sending incremental file list
api_upgrade_src/
api_upgrade_src/__init__.py
              0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=18/20)
api_upgrade_src/from_count_transformer.py
          1,263 100%    0.00kB/s    0:00:00            1,263 100%    0.00kB/s    0:00:00 (xfr#2, to-chk=17/20)
api_upgrade_src/import_transformer.py
          1,849 100%    1.76MB/s    0:00:00            1,849 100%    1.76MB/s    0:00:00 (xfr#3, to-chk=16/20)
api_upgrade_src/modify_transformer.py
          4,302 100%    4.10MB/s    0:00:00            4,302 100%    4.10MB/s    0:00:00 (xfr#4, to-chk=15/20)
api_upgrade_src/node_operation.py
          4,224 100%    4.03MB/s    0:00:00            4,224 100%    4.03MB/s    0:00:00 (xfr#5, to-chk=14/20)
api_upgrade_src/replace_full_name_transformer.py
          3,441 100%    3.28MB/s    0:00:00            3,441 100%    3.28MB/s    0:00:00 (xfr#6, to-chk=13/20)
api_upgrade_src/replace_transformer.py
          1,520 100%    1.45MB/s    0:00:00            1,520 100%    1.45MB/s    0:00:00 (xfr#7, to-chk=12/20)
api_upgrade_src/upgrade_models_api_utils.py
          5,188 100%    4.95MB/s    0:00:00            5,188 100%    4.95MB/s    0:00:00 (xfr#8, to-chk=11/20)
api_upgrade_src/conf/
api_upgrade_src/conf/upgrade.conf
             37 100%   36.13kB/s    0:00:00               37 100%   36.13kB/s    0:00:00 (xfr#9, to-chk=6/20)
api_upgrade_src/dict/
api_upgrade_src/dict/data.json
         32,768  86%   31.25MB/s    0:00:00           37,952 100%   36.19MB/s    0:00:00 (xfr#10, to-chk=5/20)
api_upgrade_src/dict/delete.dict
            254 100%  248.05kB/s    0:00:00              254 100%  248.05kB/s    0:00:00 (xfr#11, to-chk=4/20)
api_upgrade_src/dict/modify.dict
         32,768  94%   31.25MB/s    0:00:00           34,636 100%   33.03MB/s    0:00:00 (xfr#12, to-chk=3/20)
api_upgrade_src/script/
api_upgrade_src/script/check_target_env_api.py
          4,224 100%    4.03MB/s    0:00:00            4,224 100%    4.03MB/s    0:00:00 (xfr#13, to-chk=2/20)
api_upgrade_src/script/convert_dict.py
          3,056 100%    2.91MB/s    0:00:00            3,056 100%    2.91MB/s    0:00:00 (xfr#14, to-chk=1/20)
api_upgrade_src/script/restore_comments_spaces.py
          3,547 100%    3.38MB/s    0:00:00            3,547 100%    3.38MB/s    0:00:00 (xfr#15, to-chk=0/20)
api_upgrade_src/tests/

sent 106,903 bytes  received 333 bytes  214,472.00 bytes/sec
total size is 105,493  speedup is 0.98
sending incremental file list
pe.py
         11,110 100%    0.00kB/s    0:00:00           11,110 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=0/1)

sent 11,202 bytes  received 35 bytes  22,474.00 bytes/sec
total size is 11,110  speedup is 0.99
[1;34mStart upgrading model pe.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.modify_transformer
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.upgrade_models_api_utils
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.upgrade_models_api_utils
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.node_operation
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.replace_full_name_transformer
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.import_transformer
NameFrom--->: ImportFrom
module_name---> api_upgrade_src.from_count_transformer
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
ImportName--->: Import
[alias(name='importlib', asname=None)]
ImportName--->: Import
[alias(name='eventlet', asname=None)]
ImportName--->: Import
[alias(name='inspect', asname=None)]
ImportName--->: Import
[alias(name='gast', asname=None)]
ImportName--->: Import
[alias(name='astor', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='types', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='concurrent.futures', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='AddParamTransformer', asname=None),
    alias(name='DelParamTransformer', asname=None),
    alias(name='RenameParamTransformer', asname=None),
    alias(name='RepAttributeTransformer', asname=None)]
ImportFrom(module='api_upgrade_src.modify_transformer',
    names=[alias(name='AddParamTransformer', asname=None),
        alias(name='DelParamTransformer', asname=None),
        alias(name='RenameParamTransformer', asname=None),
        alias(name='RepAttributeTransformer', asname=None)],
    level=0)
module_name---> api_upgrade_src.modify_transformer
[1;33mfunc_name.name, and module name are[0m AddParamTransformer api_upgrade_src.modify_transformer
[1;33mfunc_name.name, and module name are[0m DelParamTransformer api_upgrade_src.modify_transformer
[1;33mfunc_name.name, and module name are[0m RenameParamTransformer api_upgrade_src.modify_transformer
[1;33mfunc_name.name, and module name are[0m RepAttributeTransformer api_upgrade_src.modify_transformer
NameFrom--->: ImportFrom
[alias(name='get_cur_file_list', asname=None),
    alias(name='load_replace_dict', asname=None),
    alias(name='load_modify_dict', asname=None),
    alias(name='check_dir', asname=None),
    alias(name='load_delete_dict', asname=None)]
ImportFrom(module='api_upgrade_src.upgrade_models_api_utils',
    names=[alias(name='get_cur_file_list', asname=None),
        alias(name='load_replace_dict', asname=None),
        alias(name='load_modify_dict', asname=None),
        alias(name='check_dir', asname=None),
        alias(name='load_delete_dict', asname=None)],
    level=0)
module_name---> api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m get_cur_file_list api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m load_replace_dict api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m load_modify_dict api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m check_dir api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m load_delete_dict api_upgrade_src.upgrade_models_api_utils
NameFrom--->: ImportFrom
[alias(name='print_info', asname=None),
    alias(name='import_module', asname=None),
    alias(name='check_paddle', asname=None),
    alias(name='load_config', asname=None)]
ImportFrom(module='api_upgrade_src.upgrade_models_api_utils',
    names=[alias(name='print_info', asname=None),
        alias(name='import_module', asname=None),
        alias(name='check_paddle', asname=None),
        alias(name='load_config', asname=None)],
    level=0)
module_name---> api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m print_info api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m import_module api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m check_paddle api_upgrade_src.upgrade_models_api_utils
[1;33mfunc_name.name, and module name are[0m load_config api_upgrade_src.upgrade_models_api_utils
NameFrom--->: ImportFrom
[alias(name='insert_import_module', asname=None), alias(name='insert_import_module_with_postion', asname=None)]
ImportFrom(module='api_upgrade_src.node_operation',
    names=[alias(name='insert_import_module', asname=None),
        alias(name='insert_import_module_with_postion', asname=None)],
    level=0)
module_name---> api_upgrade_src.node_operation
[1;33mfunc_name.name, and module name are[0m insert_import_module api_upgrade_src.node_operation
[1;33mfunc_name.name, and module name are[0m insert_import_module_with_postion api_upgrade_src.node_operation
NameFrom--->: ImportFrom
[alias(name='PaddleReplaceFullNameTransformer', asname=None)]
ImportFrom(module='api_upgrade_src.replace_full_name_transformer',
    names=[alias(name='PaddleReplaceFullNameTransformer', asname=None)],
    level=0)
module_name---> api_upgrade_src.replace_full_name_transformer
[1;33mfunc_name.name, and module name are[0m PaddleReplaceFullNameTransformer api_upgrade_src.replace_full_name_transformer
NameFrom--->: ImportFrom
[alias(name='ImportVisitor', asname=None)]
ImportFrom(module='api_upgrade_src.import_transformer', names=[alias(name='ImportVisitor', asname=None)], level=0)
module_name---> api_upgrade_src.import_transformer
[1;33mfunc_name.name, and module name are[0m ImportVisitor api_upgrade_src.import_transformer
NameFrom--->: ImportFrom
[alias(name='FromCountVisitor', asname=None)]
ImportFrom(module='api_upgrade_src.from_count_transformer',
    names=[alias(name='FromCountVisitor', asname=None)],
    level=0)
module_name---> api_upgrade_src.from_count_transformer
[1;33mfunc_name.name, and module name are[0m FromCountVisitor api_upgrade_src.from_count_transformer
key,value import_dict:  None paddle
key, v, from_dict:  load_delete_dict api_upgrade_src.upgrade_models_api_utils.load_delete_dict
key, v, from_dict:  import_module api_upgrade_src.upgrade_models_api_utils.import_module
key, v, from_dict:  check_paddle api_upgrade_src.upgrade_models_api_utils.check_paddle
key, v, from_dict:  FromCountVisitor api_upgrade_src.from_count_transformer.FromCountVisitor
key, v, from_dict:  PaddleReplaceFullNameTransformer api_upgrade_src.replace_full_name_transformer.PaddleReplaceFullNameTransformer
key, v, from_dict:  check_dir api_upgrade_src.upgrade_models_api_utils.check_dir
key, v, from_dict:  ImportVisitor api_upgrade_src.import_transformer.ImportVisitor
key, v, from_dict:  load_modify_dict api_upgrade_src.upgrade_models_api_utils.load_modify_dict
key, v, from_dict:  print_info api_upgrade_src.upgrade_models_api_utils.print_info
key, v, from_dict:  RepAttributeTransformer api_upgrade_src.modify_transformer.RepAttributeTransformer
key, v, from_dict:  insert_import_module api_upgrade_src.node_operation.insert_import_module
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  insert_import_module_with_postion api_upgrade_src.node_operation.insert_import_module_with_postion
key, v, from_dict:  RenameParamTransformer api_upgrade_src.modify_transformer.RenameParamTransformer
key, v, from_dict:  load_config api_upgrade_src.upgrade_models_api_utils.load_config
key, v, from_dict:  DelParamTransformer api_upgrade_src.modify_transformer.DelParamTransformer
key, v, from_dict:  load_replace_dict api_upgrade_src.upgrade_models_api_utils.load_replace_dict[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/emotion_detection inference_model.py
[1;34mStart upgrading model PaddleNLP/emotion_detection/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> run_classifier
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='run_classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> run_classifier
[1;33mfunc_name.name, and module name are[0m create_model run_classifier
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  PDConfig config.PDConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  create_model run_classifier.create_model
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/inference_model.py has been written sucess[0m

[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation predict.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/predict.py[0m
NameFrom--->: ImportFrom
module_name---> ade_net
NameFrom--->: ImportFrom
module_name---> ade.utils.configure
NameFrom--->: ImportFrom
module_name---> ade.utils.input_field
NameFrom--->: ImportFrom
module_name---> ade.utils.model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='ade.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='ade_net', names=[alias(name='create_net', asname=None)], level=0)
module_name---> ade_net
[1;33mfunc_name.name, and module name are[0m create_net ade_net
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='ade.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> ade.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig ade.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='ade.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> ade.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField ade.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='ade.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> ade.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda ade.utils.model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  reader ade.reader
key, v, from_dict:  InputField ade.utils.input_field.InputField
key, v, from_dict:  create_net ade_net.create_net
key, v, from_dict:  check_cuda ade.utils.model_check.check_cuda
key, v, from_dict:  PDConfig ade.utils.configure.PDConfig
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis eval.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/eval.py[0m
NameFrom--->: ImportFrom
module_name---> model_check
NameFrom--->: ImportFrom
module_name---> model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='creator', asname=None)]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_cuda model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_version model_check
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None creator
key, v, from_dict:  check_cuda model_check.check_cuda
key, v, from_dict:  check_version model_check.check_version
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/eval.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding train.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> dgu_net
NameFrom--->: ImportFrom
module_name---> dgu.optimization
NameFrom--->: ImportFrom
module_name---> dgu.utils.configure
NameFrom--->: ImportFrom
module_name---> dgu.utils.input_field
NameFrom--->: ImportFrom
module_name---> dgu.utils.model_check
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='dgu_net', names=[alias(name='create_net', asname=None)], level=0)
module_name---> dgu_net
[1;33mfunc_name.name, and module name are[0m create_net dgu_net
ImportName--->: Import
[alias(name='dgu.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='dgu.optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> dgu.optimization
[1;33mfunc_name.name, and module name are[0m optimization dgu.optimization
ImportName--->: Import
[alias(name='dgu.define_paradigm', asname='define_paradigm')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='dgu.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> dgu.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig dgu.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='dgu.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> dgu.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField dgu.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='dgu.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> dgu.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda dgu.utils.model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  reader dgu.reader
key,value import_dict:  define_paradigm dgu.define_paradigm
key, v, from_dict:  create_net dgu_net.create_net
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  PDConfig dgu.utils.configure.PDConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  optimization dgu.optimization.optimization
key, v, from_dict:  check_cuda dgu.utils.model_check.check_cuda
key, v, from_dict:  InputField dgu.utils.input_field.InputField
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/downloads.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/downloads.py has been written sucess[0m
[1;32mNo module named 'check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer/utils check.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/check.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/check.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/saved_models/saved_models.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/saved_models/saved_models.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/evaluation.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/evaluation.py has been written sucess[0m
[1;32mNo module named 'optimization', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu optimization.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/optimization.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> dgu.utils.fp16
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='create_master_params_grads', asname=None), alias(name='master_param_to_train_param', asname=None)]
ImportFrom(module='dgu.utils.fp16',
    names=[alias(name='create_master_params_grads', asname=None),
        alias(name='master_param_to_train_param', asname=None)],
    level=0)
module_name---> dgu.utils.fp16
[1;33mfunc_name.name, and module name are[0m create_master_params_grads dgu.utils.fp16
[1;33mfunc_name.name, and module name are[0m master_param_to_train_param dgu.utils.fp16
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  create_master_params_grads dgu.utils.fp16.create_master_params_grads
key, v, from_dict:  master_param_to_train_param dgu.utils.fp16.master_param_to_train_param
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.polynomial_decay->paddle.fluid.layers.learning_rate_scheduler.polynomial_decay)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.noam_decay->paddle.fluid.layers.learning_rate_scheduler.noam_decay)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m[1;34mStart upgrading model PaddleNLP/emotion_detection/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/lexical_analysis/compare.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/compare.py has been written sucess[0m
[1;32mNo module named 'transformer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer transformer.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/transformer.py[0m
NameFrom--->: ImportFrom
module_name---> functools
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.utils
NameFrom--->: ImportFrom
module_name---> desc
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='map_structure', asname=None)]
ImportFrom(module='paddle.fluid.layers.utils', names=[alias(name='map_structure', asname=None)], level=0)
module_name---> paddle.fluid.layers.utils
[1;33mfunc_name.name, and module name are[0m map_structure paddle.fluid.layers.utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='desc', names=[alias(name='*', asname=None)], level=0)
module_name---> desc
[1;33mfunc_name.name, and module name are[0m * desc
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  partial functools.partial
key, v, from_dict:  * desc.*
key, v, from_dict:  map_structure paddle.fluid.layers.utils.map_structure
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(layers.label_smooth->paddle.fluid.layers.label_smooth)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(layers.is_empty->paddle.fluid.layers.is_empty)[0m
[3;32mRestore API full name(layers.logical_not->paddle.fluid.layers.logical_not)[0m
[3;32mRestore API full name(layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(layers.beam_search->paddle.fluid.layers.beam_search)[0m
[3;32mRestore API full name(layers.increment->paddle.fluid.layers.increment)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m[1;34mStart upgrading model README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/README.md has been written sucess[0m
[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer inference_model.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> utils.input_field
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> utils.load
NameFrom--->: ImportFrom
module_name---> transformer
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField utils.input_field
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='load', asname=None)]
ImportFrom(module='utils.load', names=[alias(name='load', asname=None)], level=0)
module_name---> utils.load
[1;33mfunc_name.name, and module name are[0m load utils.load
ImportName--->: Import
[alias(name='desc', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='transformer', names=[alias(name='create_net', asname=None)], level=0)
module_name---> transformer
[1;33mfunc_name.name, and module name are[0m create_net transformer
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  InputField utils.input_field.InputField
key, v, from_dict:  create_net transformer.create_net
key, v, from_dict:  load utils.load.load
key, v, from_dict:  PDConfig utils.configure.PDConfig
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/prepare_data_and_model.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/prepare_data_and_model.py has been written sucess[0m
[1;32mNo module named 'main', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding main.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/main.py[0m
NameFrom--->: ImportFrom
module_name---> eval
NameFrom--->: ImportFrom
module_name---> train
NameFrom--->: ImportFrom
module_name---> predict
NameFrom--->: ImportFrom
module_name---> inference_model
NameFrom--->: ImportFrom
module_name---> dgu.utils.configure
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='do_eval', asname=None)]
ImportFrom(module='eval', names=[alias(name='do_eval', asname=None)], level=0)
module_name---> eval
[1;33mfunc_name.name, and module name are[0m do_eval eval
NameFrom--->: ImportFrom
[alias(name='do_train', asname=None)]
ImportFrom(module='train', names=[alias(name='do_train', asname=None)], level=0)
module_name---> train
[1;33mfunc_name.name, and module name are[0m do_train train
NameFrom--->: ImportFrom
[alias(name='do_predict', asname=None)]
ImportFrom(module='predict', names=[alias(name='do_predict', asname=None)], level=0)
module_name---> predict
[1;33mfunc_name.name, and module name are[0m do_predict predict
NameFrom--->: ImportFrom
[alias(name='do_save_inference_model', asname=None)]
ImportFrom(module='inference_model', names=[alias(name='do_save_inference_model', asname=None)], level=0)
module_name---> inference_model
[1;33mfunc_name.name, and module name are[0m do_save_inference_model inference_model
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='dgu.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> dgu.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig dgu.utils.configure
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  PDConfig dgu.utils.configure.PDConfig
key, v, from_dict:  do_train train.do_train
key, v, from_dict:  do_predict predict.do_predict
key, v, from_dict:  do_eval eval.do_eval
key, v, from_dict:  do_save_inference_model inference_model.do_save_inference_model
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/main.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/commonlib.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/commonlib.py has been written sucess[0m
[1;32mNo module named 'inference_model_ernie', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification inference_model_ernie.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/inference_model_ernie.py[0m
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> run_ernie_classifier
NameFrom--->: ImportFrom
module_name---> run_ernie_classifier
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
NameFrom--->: ImportFrom
module_name---> preprocess.ernie
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)][1;34mStart upgrading model PaddleNLP/emotion_detection/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/README.md has been written sucess[0m
[1;32mNo module named 'load', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer/utils load.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/load.py[0m
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None warnings
key, v, from_dict:  partial functools.partial
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/load.py has been written sucess[0m

[1;32mNo module named 'define_paradigm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu define_paradigm.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/define_paradigm.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.tensor.fill_constant->paddle.fluid.layers.tensor.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.argmax->paddle.fluid.layers.argmax)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.tensor.fill_constant->paddle.fluid.layers.tensor.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.equal)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (cond) from API (paddle.fluid.layers.equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.argmax->paddle.tensor.argmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis inference_model.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> model_check
NameFrom--->: ImportFrom
module_name---> model_check
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='creator', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_cuda model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_version model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  check_cuda model_check.check_cuda
key, v, from_dict:  check_version model_check.check_version
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.create_lod_tensor->paddle.fluid.create_lod_tensor)[0m
[3;32mRestore API full name(fluid.core.Scope->paddle.fluid.core.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/inference_models/inference_models.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/inference_models/inference_models.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/tokenization.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/tokenization.py has been written sucess[0m
[1;32mNo module named 'define_predict_pack', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu define_predict_pack.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/define_predict_pack.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/define_predict_pack.py has been written sucess[0m

[1;32mNo module named 'run_ernie_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification run_ernie_classifier.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/run_ernie_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> preprocess.ernie
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='bow_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='bow_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m bow_net nets
NameFrom--->: ImportFrom
[alias(name='lstm_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='lstm_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m lstm_net nets
NameFrom--->: ImportFrom
[alias(name='cnn_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='cnn_net', asname=None)], level=0)[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis predict.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/predict.py[0m
NameFrom--->: ImportFrom
module_name---> model_check
NameFrom--->: ImportFrom
module_name---> model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='creator', asname=None)]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_cuda model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_version model_check
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None creator
key, v, from_dict:  check_cuda model_check.check_cuda
key, v, from_dict:  check_version model_check.check_version
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/predict.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/eval.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/eval.py has been written sucess[0m
[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification run_classifier.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='bow_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='bow_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m bow_net nets
NameFrom--->: ImportFrom
[alias(name='lstm_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='lstm_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m lstm_net nets
NameFrom--->: ImportFrom
[alias(name='cnn_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='cnn_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m cnn_net nets
NameFrom--->: ImportFrom
[alias(name='bilstm_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='bilstm_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m bilstm_net nets
NameFrom--->: ImportFrom
[alias(name='gru_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='gru_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m gru_net nets
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_version models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils', names=[alias(name='init_checkpoint', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  init_checkpoint utils.init_checkpoint
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  gru_net nets.gru_net
key, v, from_dict:  bilstm_net nets.bilstm_net
key, v, from_dict:  bow_net nets.bow_net
key, v, from_dict:  check_version models.model_check.check_version
key, v, from_dict:  cnn_net nets.cnn_net
key, v, from_dict:  lstm_net nets.lstm_net
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  PDConfig config.PDConfig
key, v, from_dict: [1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/emotion_detection utils.py
[1;34mStart upgrading model PaddleNLP/emotion_detection/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/input/input.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/input/input.md has been written sucess[0m
[1;32mNo module named 'transformer_encoder', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu transformer_encoder.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/transformer_encoder.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  partial functools.partial
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/conf/ernie_args.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/conf/ernie_args.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/output/output.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/output/output.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/pretrain_model/pretrain_model.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/pretrain_model/pretrain_model.md has been written sucess[0m
[1;32mNo module named 'cache_bert', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu bert.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/bert.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> dgu.transformer_encoder
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)]
ImportFrom(module='dgu.transformer_encoder',
    names=[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)],
    level=0)
module_name---> dgu.transformer_encoder
[1;33mfunc_name.name, and module name are[0m encoder dgu.transformer_encoder
[1;33mfunc_name.name, and module name are[0m pre_process_layer dgu.transformer_encoder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None json
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  pre_process_layer dgu.transformer_encoder.pre_process_layer
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  encoder dgu.transformer_encoder.encoder
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/bert.py has been written sucess[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/reader.py has been written sucess[0m
[1;32mNo module named 'run_ernie_sequence_labeling', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis run_ernie_sequence_labeling.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/run_ernie_sequence_labeling.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> models.model_check
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='namedtuple', asname=None)]
ImportFrom(module='collections', names=[alias(name='namedtuple', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m namedtuple collections
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='creator', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ErnieConfig', asname=None)]
ImportFrom(module='models.representation.ernie', names=[alias(name='ErnieConfig', asname=None)], level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ErnieConfig models.representation.ernie
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_version models.model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  namedtuple collections.namedtuple
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ErnieConfig models.representation.ernie.ErnieConfig
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  check_version models.model_check.check_version
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.contrib.memory_usage->paddle.fluid.contrib.memory_usage)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/run_ernie_sequence_labeling.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/saved_models/saved_models.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/saved_models/saved_models.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/unicom_split.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/unicom_split.py has been written sucess[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/configure.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/configure.py has been written sucess[0m
[1;32mNo module named 'input_field', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils input_field.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/input_field.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/input_field.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/config/dgu.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/config/dgu.yaml has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/language_model train.py
[1;34mStart upgrading model PaddleNLP/language_model/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> distutils.dir_util
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> models.language_model
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
NameFrom--->: ImportFrom
[alias(name='mkpath', asname=None)]
ImportFrom(module='distutils.dir_util', names=[alias(name='mkpath', asname=None)], level=0)
module_name---> distutils.dir_util
[1;33mfunc_name.name, and module name are[0m mkpath distutils.dir_util
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None), alias(name='check_version', asname=None)]
ImportFrom(module='models.model_check',
    names=[alias(name='check_cuda', asname=None), alias(name='check_version', asname=None)],
    level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
[1;33mfunc_name.name, and module name are[0m check_version models.model_check
NameFrom--->: ImportFrom
[alias(name='lm_model', asname=None)]
ImportFrom(module='models.language_model', names=[alias(name='lm_model', asname=None)], level=0)
module_name---> models.language_model
[1;33mfunc_name.name, and module name are[0m lm_model models.language_model
NameFrom--->: ImportFrom
[alias(name='RNNConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='RNNConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m RNNConfig config
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None pickle
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  lm_model models.language_model.lm_model
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function[1;34mStart upgrading model PaddleNLP/emotion_detection/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/__init__.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer train.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utils.input_field
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> utils.check
NameFrom--->: ImportFrom
module_name---> utils.load
NameFrom--->: ImportFrom
module_name---> transformer
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='utils.dist_utils', asname='dist_utils')]
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField utils.input_field
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)]
ImportFrom(module='utils.check',
    names=[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.check
[1;33mfunc_name.name, and module name are[0m check_gpu utils.check
[1;33mfunc_name.name, and module name are[0m check_version utils.check
NameFrom--->: ImportFrom
[alias(name='load', asname=None)]
ImportFrom(module='utils.load', names=[alias(name='load', asname=None)], level=0)
module_name---> utils.load
[1;33mfunc_name.name, and module name are[0m load utils.load
ImportName--->: Import
[alias(name='desc', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None), alias(name='position_encoding_init', asname=None)]
ImportFrom(module='transformer',
    names=[alias(name='create_net', asname=None), alias(name='position_encoding_init', asname=None)],
    level=0)
module_name---> transformer
[1;33mfunc_name.name, and module name are[0m create_net transformer
[1;33mfunc_name.name, and module name are[0m position_encoding_init transformer
key,value import_dict:  dist_utils utils.dist_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  position_encoding_init transformer.position_encoding_init
key, v, from_dict:  create_net transformer.create_net
key, v, from_dict:  load utils.load.load
key, v, from_dict:  PDConfig utils.configure.PDConfig
key, v, from_dict:  InputField utils.input_field.InputField
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  check_gpu utils.check.check_gpu
key, v, from_dict:  check_version utils.check.check_version
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.noam_decay->paddle.fluid.layers.learning_rate_scheduler.noam_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(profiler.start_profiler->paddle.fluid.profiler.start_profiler)[0m
[3;32mRestore API full name(profiler.stop_profiler->paddle.fluid.profiler.stop_profiler)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/train.py has been written sucess[0m

[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/similarity_net run_classifier.py
[1;34mStart upgrading model PaddleNLP/similarity_net/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> models.model_check
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->:[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/emotion_detection reader.py
[1;34mStart upgrading model PaddleNLP/emotion_detection/reader.py[0m
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='load_vocab', asname=None)]
ImportFrom(module='utils', names=[alias(name='load_vocab', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m load_vocab utils
NameFrom--->: ImportFrom
[alias(name='data_reader', asname=None)]
ImportFrom(module='utils', names=[alias(name='data_reader', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m data_reader utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  load_vocab utils.load_vocab
key, v, from_dict:  data_reader utils.data_reader
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/reader.py has been written sucess[0m

[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation inference_model.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> ade_net
NameFrom--->: ImportFrom
module_name---> ade.utils.configure
NameFrom--->: ImportFrom
module_name---> ade.utils.input_field
NameFrom--->: ImportFrom
module_name---> ade.utils.model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='ade.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='ade_net', names=[alias(name='create_net', asname=None)], level=0)
module_name---> ade_net
[1;33mfunc_name.name, and module name are[0m create_net ade_net
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='ade.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> ade.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig ade.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='ade.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> ade.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField ade.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='ade.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> ade.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda ade.utils.model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  reader ade.reader
key, v, from_dict:  InputField ade.utils.input_field.InputField
key, v, from_dict:  create_net ade_net.create_net
key, v, from_dict:  check_cuda ade.utils.model_check.check_cuda
key, v, from_dict:  PDConfig ade.utils.configure.PDConfig
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/run_build_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/run_build_data.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/sentiment_classification/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/README.md has been written sucess[0m
[1;32mNo module named 'attention_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/seq2seq attention_model.py
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/attention_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.contrib.layers
NameFrom--->: ImportFrom
module_name---> base_model
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis utils.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='yaml', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.Tensor->paddle.fluid.Tensor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/utils.py has been written sucess[0m

[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils model_check.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/model_check.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification utils.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/utils.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/seq2seq infer.py
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> attention_model
NameFrom--->: ImportFrom
module_name---> base_model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='AttentionModel', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='AttentionModel', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m AttentionModel attention_model
NameFrom--->: ImportFrom
[alias(name='BaseModel', asname=None)]
ImportFrom(module='base_model', names=[alias(name='BaseModel', asname=None)], level=0)[1;34mStart upgrading model PaddleNLP/emotion_detection/run_ernie.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/run_ernie.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/desc.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/desc.py has been written sucess[0m
[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils model_check.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/model_check.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/configure.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/configure.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/py23.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/py23.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/sentiment_classification/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/data/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/data/download_data.sh has been written sucess[0m
[1;32mNo module named 'base_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/seq2seq base_model.py
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/base_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='RNNCell', asname=None),
    alias(name='LSTMCell', asname=None),
    alias(name='rnn', asname=None),
    alias(name='BeamSearchDecoder', asname=None),
    alias(name='dynamic_decode', asname=None)]
ImportFrom(module='paddle.fluid.layers',
    names=[alias(name='RNNCell', asname=None),
        alias(name='LSTMCell', asname=None),
        alias(name='rnn', asname=None),
        alias(name='BeamSearchDecoder', asname=None),
        alias(name='dynamic_decode', asname=None)],
    level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m RNNCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m LSTMCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m rnn paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m BeamSearchDecoder paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m dynamic_decode paddle.fluid.layers
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  BeamSearchDecoder paddle.fluid.layers.BeamSearchDecoder
key, v, from_dict:  dynamic_decode paddle.fluid.layers.dynamic_decode
key, v, from_dict:  RNNCell paddle.fluid.layers.RNNCell
key, v, from_dict:  rnn paddle.fluid.layers.rnn
key, v, from_dict:  LSTMCell paddle.fluid.layers.LSTMCell
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(LSTMCell->paddle.fluid.layers.LSTMCell)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(LSTMCell->paddle.fluid.layers.LSTMCell)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(BeamSearchDecoder->paddle.fluid.layers.BeamSearchDecoder)[0m
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='run_ernie_classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> run_ernie_classifier
[1;33mfunc_name.name, and module name are[0m create_model run_ernie_classifier
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ernie_pyreader', asname=None)]
ImportFrom(module='run_ernie_classifier', names=[alias(name='ernie_pyreader', asname=None)], level=0)
module_name---> run_ernie_classifier
[1;33mfunc_name.name, and module name are[0m ernie_pyreader run_ernie_classifier
NameFrom--->: ImportFrom
[alias(name='ErnieConfig', asname=None)]
ImportFrom(module='models.representation.ernie', names=[alias(name='ErnieConfig', asname=None)], level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ErnieConfig models.representation.ernie
NameFrom--->: ImportFrom
[alias(name='ernie_encoder', asname=None), alias(name='ernie_encoder_with_paddle_hub', asname=None)]
ImportFrom(module='models.representation.ernie',
    names=[alias(name='ernie_encoder', asname=None), alias(name='ernie_encoder_with_paddle_hub', asname=None)],
    level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_encoder models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_encoder_with_paddle_hub models.representation.ernie
NameFrom--->: ImportFrom
[alias(name='task_reader', asname=None)]
ImportFrom(module='preprocess.ernie', names=[alias(name='task_reader', asname=None)], level=0)
module_name---> preprocess.ernie
[1;33mfunc_name.name, and module name are[0m task_reader preprocess.ernie
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  ernie_encoder models.representation.ernie.ernie_encoder
key, v, from_dict:  ernie_pyreader run_ernie_classifier.ernie_pyreader
key, v, from_dict:  PDConfig config.PDConfig
key, v, from_dict:  task_reader preprocess.ernie.task_reader
key, v, from_dict:  ErnieConfig models.representation.ernie.ErnieConfig
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  create_model run_ernie_classifier.create_model
key, v, from_dict:  ernie_encoder_with_paddle_hub models.representation.ernie.ernie_encoder_with_paddle_hub
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(ernie_encoder_with_paddle_hub->models.representation.ernie.ernie_encoder_with_paddle_hub)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/inference_model_ernie.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/variational_seq2seq infer.py
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> reader
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='VAE', asname=None)]
ImportFrom(module='model', names=[alias(name='VAE', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m VAE model
NameFrom--->: ImportFrom
[alias(name='BOS_ID', asname=None), alias(name='EOS_ID', asname=None), alias(name='get_vocab', asname=None)][1;34mStart upgrading model PaddleNLP/emotion_detection/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/README.md has been written sucess[0m
[1;32mNo module named 'main', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation main.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/main.py[0m
NameFrom--->: ImportFrom
module_name---> eval
NameFrom--->: ImportFrom
module_name---> train
NameFrom--->: ImportFrom
module_name---> predict
NameFrom--->: ImportFrom
module_name---> inference_model
NameFrom--->: ImportFrom
module_name---> ade.utils.configure
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='do_eval', asname=None)]
ImportFrom(module='eval', names=[alias(name='do_eval', asname=None)], level=0)
module_name---> eval
[1;33mfunc_name.name, and module name are[0m do_eval eval
NameFrom--->: ImportFrom
[alias(name='do_train', asname=None)]
ImportFrom(module='train', names=[alias(name='do_train', asname=None)], level=0)
module_name---> train
[1;33mfunc_name.name, and module name are[0m do_train train
NameFrom--->: ImportFrom
[alias(name='do_predict', asname=None)]
ImportFrom(module='predict', names=[alias(name='do_predict', asname=None)], level=0)
module_name---> predict
[1;33mfunc_name.name, and module name are[0m do_predict predict
NameFrom--->: ImportFrom
[alias(name='do_save_inference_model', asname=None)]
ImportFrom(module='inference_model', names=[alias(name='do_save_inference_model', asname=None)], level=0)
module_name---> inference_model
[1;33mfunc_name.name, and module name are[0m do_save_inference_model inference_model
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='ade.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> ade.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig ade.utils.configure
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  PDConfig ade.utils.configure.PDConfig
key, v, from_dict:  do_train train.do_train
key, v, from_dict:  do_predict predict.do_predict
key, v, from_dict:  do_eval eval.do_eval
key, v, from_dict:  do_save_inference_model inference_model.do_save_inference_model
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/main.py has been written sucess[0m

[1;32mNo module named 'dgu_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding dgu_net.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu_net.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> dgu.bert
NameFrom--->: ImportFrom
module_name---> dgu.utils.configure
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='BertModel', asname=None)]
ImportFrom(module='dgu.bert', names=[alias(name='BertModel', asname=None)], level=0)
module_name---> dgu.bert
[1;33mfunc_name.name, and module name are[0m BertModel dgu.bert
NameFrom--->: ImportFrom
[alias(name='JsonConfig', asname=None)]
ImportFrom(module='dgu.utils.configure', names=[alias(name='JsonConfig', asname=None)], level=0)
module_name---> dgu.utils.configure
[1;33mfunc_name.name, and module name are[0m JsonConfig dgu.utils.configure
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  BertModel dgu.bert.BertModel
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  JsonConfig dgu.utils.configure.JsonConfig
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu_net.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_mrda_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_mrda_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_swda_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_swda_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/evaluate_ecom.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/evaluate_ecom.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/variational_seq2seq train.py
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m[1;34mStart upgrading model PaddleNLP/add_license.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/add_license.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/lexical_analysis/conf/args.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/conf/args.yaml has been written sucess[0m
[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer/utils dist_utils.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/dist_utils.py has been written sucess[0m

[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding inference_model.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> dgu.utils.configure
NameFrom--->: ImportFrom
module_name---> dgu.utils.input_field
NameFrom--->: ImportFrom
module_name---> dgu.utils.model_check
NameFrom--->: ImportFrom
module_name---> dgu_net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='dgu.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> dgu.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig dgu.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='dgu.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> dgu.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField dgu.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='dgu.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> dgu.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda dgu.utils.model_check
ImportName--->: Import
[alias(name='dgu.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='dgu_net', names=[alias(name='create_net', asname=None)], level=0)
module_name---> dgu_net
[1;33mfunc_name.name, and module name are[0m create_net dgu_net
ImportName--->: Import
[alias(name='dgu.define_paradigm', asname='define_paradigm')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  reader dgu.reader
key,value import_dict:  define_paradigm dgu.define_paradigm
key, v, from_dict:  InputField dgu.utils.input_field.InputField
key, v, from_dict:  create_net dgu_net.create_net
key, v, from_dict:  check_cuda dgu.utils.model_check.check_cuda
key, v, from_dict:  PDConfig dgu.utils.configure.PDConfig
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/sentiment_classification/run_ernie.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/run_ernie.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/data/download_data_win.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/data/download_data_win.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/infer.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/ernie/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/ernie/__init__.py has been written sucess[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/train.py has been written sucess[0m

[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/variational_seq2seq model.py
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
NameFrom--->: ImportFrom
module_name---> paddle.fluid.contrib.layers
NameFrom--->: ImportFrom
module_name---> reader
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='RNNCell', asname=None),
    alias(name='LSTMCell', asname=None),
    alias(name='rnn', asname=None),
    alias(name='BeamSearchDecoder', asname=None),
    alias(name='dynamic_decode', asname=None)]
ImportFrom(module='paddle.fluid.layers',
    names=[alias(name='RNNCell', asname=None),
        alias(name='LSTMCell', asname=None),
        alias(name='rnn', asname=None),
        alias(name='BeamSearchDecoder', asname=None),
        alias(name='dynamic_decode', asname=None)],
    level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m RNNCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m LSTMCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m rnn paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m BeamSearchDecoder paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m dynamic_decode paddle.fluid.layers
NameFrom--->: ImportFrom
[alias(name='basic_lstm', asname=None), alias(name='BasicLSTMUnit', asname=None)]
ImportFrom(module='paddle.fluid.contrib.layers',
    names=[alias(name='basic_lstm', asname=None), alias(name='BasicLSTMUnit', asname=None)],
    level=0)
module_name---> paddle.fluid.contrib.layers
[1;33mfunc_name.name, and module name are[0m basic_lstm paddle.fluid.contrib.layers
[1;33mfunc_name.name, and module name are[0m BasicLSTMUnit paddle.fluid.contrib.layers
NameFrom--->: ImportFrom
[alias(name='BOS_ID', asname=None), alias(name='EOS_ID', asname=None)]
ImportFrom(module='reader', names=[alias(name='BOS_ID', asname=None), alias(name='EOS_ID', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m BOS_ID reader
[1;33mfunc_name.name, and module name are[0m EOS_ID reader
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  basic_lstm paddle.fluid.contrib.layers.basic_lstm
key, v, from_dict:  RNNCell paddle.fluid.layers.RNNCell
key, v, from_dict:  BeamSearchDecoder paddle.fluid.layers.BeamSearchDecoder
key, v, from_dict:  EOS_ID reader.EOS_ID
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  BasicLSTMUnit paddle.fluid.contrib.layers.BasicLSTMUnit
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  BOS_ID reader.BOS_ID
key, v, from_dict:  dynamic_decode paddle.fluid.layers.dynamic_decode
key, v, from_dict:  rnn paddle.fluid.layers.rnn
key, v, from_dict:  LSTMCell paddle.fluid.layers.LSTMCell
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(LSTMCell->paddle.fluid.layers.LSTMCell)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(LSTMCell->paddle.fluid.layers.LSTMCell)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.sampling_id->paddle.fluid.layers.sampling_id)[0m
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m[1;32mNo module named 'creator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis creator.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/creator.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> ernie_reader
NameFrom--->: ImportFrom
module_name---> models.sequence_labeling
NameFrom--->: ImportFrom
module_name---> models.representation.ernie
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='NormalInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='NormalInitializer', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NormalInitializer paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Dataset', asname=None)]
ImportFrom(module='reader', names=[alias(name='Dataset', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m Dataset reader
NameFrom--->: ImportFrom
[alias(name='SequenceLabelReader', asname=None)]
ImportFrom(module='ernie_reader', names=[alias(name='SequenceLabelReader', asname=None)], level=0)
module_name---> ernie_reader
[1;33mfunc_name.name, and module name are[0m SequenceLabelReader ernie_reader
NameFrom--->: ImportFrom
[alias(name='nets', asname=None)]
ImportFrom(module='models.sequence_labeling', names=[alias(name='nets', asname=None)], level=0)
module_name---> models.sequence_labeling
[1;33mfunc_name.name, and module name are[0m nets models.sequence_labeling
NameFrom--->: ImportFrom
[alias(name='ernie_encoder', asname=None), alias(name='ernie_pyreader', asname=None)]
ImportFrom(module='models.representation.ernie',
    names=[alias(name='ernie_encoder', asname=None), alias(name='ernie_pyreader', asname=None)],
    level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_encoder models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_pyreader models.representation.ernie
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  SequenceLabelReader ernie_reader.SequenceLabelReader
key, v, from_dict:  NormalInitializer paddle.fluid.initializer.NormalInitializer
key, v, from_dict:  nets models.sequence_labeling.nets
key, v, from_dict:  ernie_encoder models.representation.ernie.ernie_encoder
key, v, from_dict:  Dataset reader.Dataset
key, v, from_dict:  ernie_pyreader models.representation.ernie.ernie_pyreader
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.chunk_eval->paddle.fluid.layers.chunk_eval)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.linear_chain_crf->paddle.fluid.layers.linear_chain_crf)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.crf_decoding->paddle.fluid.layers.crf_decoding)[0m
[3;32mRestore API full name(fluid.layers.chunk_eval->paddle.fluid.layers.chunk_eval)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/creator.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/output/output.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/output/output.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/__init__.py has been written sucess[0m
[1;32mNo module named 'bow', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching bow.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/bow.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/emotion_detection run_classifier.py
[1;34mStart upgrading model PaddleNLP/emotion_detection/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> models.classification
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='nets', asname=None)]
ImportFrom(module='models.classification', names=[alias(name='nets', asname=None)], level=0)
module_name---> models.classification
[1;33mfunc_name.name, and module name are[0m nets models.classification
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_version models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  PDConfig config.PDConfig
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  nets models.classification.nets
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  check_version models.model_check.check_version
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.contrib.memory_usage->paddle.fluid.contrib.memory_usage)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/run_classifier.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/language_model/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/unicom_compute_pos_neg.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/unicom_compute_pos_neg.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/__init__.py has been written sucess[0m
[1;32mNo module named 'paddle_optimizers', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching/optimizers paddle_optimizers.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/optimizers/paddle_optimizers.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.optimizer.SGDOptimizer->paddle.fluid.optimizer.SGDOptimizer)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGDOptimizer->paddle.optimizer.SGDOptimizer)[0m
module_name---> nets
[1;33mfunc_name.name, and module name are[0m cnn_net nets
NameFrom--->: ImportFrom
[alias(name='bilstm_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='bilstm_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m bilstm_net nets
NameFrom--->: ImportFrom
[alias(name='gru_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='gru_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m gru_net nets
NameFrom--->: ImportFrom
[alias(name='ernie_base_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='ernie_base_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m ernie_base_net nets
NameFrom--->: ImportFrom
[alias(name='ernie_bilstm_net', asname=None)]
ImportFrom(module='nets', names=[alias(name='ernie_bilstm_net', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m ernie_bilstm_net nets
NameFrom--->: ImportFrom
[alias(name='task_reader', asname=None)]
ImportFrom(module='preprocess.ernie', names=[alias(name='task_reader', asname=None)], level=0)
module_name---> preprocess.ernie
[1;33mfunc_name.name, and module name are[0m task_reader preprocess.ernie
NameFrom--->: ImportFrom
[alias(name='ErnieConfig', asname=None)]
ImportFrom(module='models.representation.ernie', names=[alias(name='ErnieConfig', asname=None)], level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ErnieConfig models.representation.ernie
NameFrom--->: ImportFrom
[alias(name='ernie_encoder', asname=None), alias(name='ernie_encoder_with_paddle_hub', asname=None)]
ImportFrom(module='models.representation.ernie',
    names=[alias(name='ernie_encoder', asname=None), alias(name='ernie_encoder_with_paddle_hub', asname=None)],
    level=0)
module_name---> models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_encoder models.representation.ernie
[1;33mfunc_name.name, and module name are[0m ernie_encoder_with_paddle_hub models.representation.ernie
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
NameFrom--->: ImportFrom
[alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils', names=[alias(name='init_checkpoint', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  init_checkpoint utils.init_checkpoint
key, v, from_dict:  ernie_base_net nets.ernie_base_net
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ernie_bilstm_net nets.ernie_bilstm_net
key, v, from_dict:  gru_net nets.gru_net
key, v, from_dict:  bilstm_net nets.bilstm_net
key, v, from_dict:  bow_net nets.bow_net
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  ernie_encoder_with_paddle_hub models.representation.ernie.ernie_encoder_with_paddle_hub
key, v, from_dict:  cnn_net nets.cnn_net
key, v, from_dict:  lstm_net nets.lstm_net
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  PDConfig config.PDConfig
key, v, from_dict:  ErnieConfig models.representation.ernie.ErnieConfig
key, v, from_dict:  ernie_encoder models.representation.ernie.ernie_encoder
key, v, from_dict:  task_reader preprocess.ernie.task_reader
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(ernie_encoder_with_paddle_hub->models.representation.ernie.ernie_encoder_with_paddle_hub)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.contrib.memory_usage->paddle.fluid.contrib.memory_usage)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(ernie_encoder_with_paddle_hub->models.representation.ernie.ernie_encoder_with_paddle_hub)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(ernie_encoder_with_paddle_hub->models.representation.ernie.ernie_encoder_with_paddle_hub)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/run_ernie_classifier.py has been written sucess[0m

[1;32mNo module named 'softmax_cross_entropy_loss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching/losses softmax_cross_entropy_loss.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/losses/softmax_cross_entropy_loss.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='models.matching.paddle_layers', asname='layers')][1;34mStart upgrading model PaddleNLP/lexical_analysis/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/README.md has been written sucess[0m
[1;32mNo module named 'main', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer main.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/main.py[0m
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> train
NameFrom--->: ImportFrom
module_name---> predict
NameFrom--->: ImportFrom
module_name---> inference_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='do_train', asname=None)]
ImportFrom(module='train', names=[alias(name='do_train', asname=None)], level=0)
module_name---> train
[1;33mfunc_name.name, and module name are[0m do_train train
NameFrom--->: ImportFrom
[alias(name='do_predict', asname=None)]
ImportFrom(module='predict', names=[alias(name='do_predict', asname=None)], level=0)
module_name---> predict
[1;33mfunc_name.name, and module name are[0m do_predict predict
NameFrom--->: ImportFrom
[alias(name='do_save_inference_model', asname=None)]
ImportFrom(module='inference_model', names=[alias(name='do_save_inference_model', asname=None)], level=0)
module_name---> inference_model
[1;33mfunc_name.name, and module name are[0m do_save_inference_model inference_model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  do_save_inference_model inference_model.do_save_inference_model
key, v, from_dict:  do_train train.do_train
key, v, from_dict:  do_predict predict.do_predict
key, v, from_dict:  PDConfig utils.configure.PDConfig
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/main.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade reader.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/reader.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/pretrain_model/pretrain_model.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/pretrain_model/pretrain_model.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/__init__.py has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/classification nets.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/classification/nets.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/README.md has been written sucess[0m
[1;32mNo module named 'ade_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation ade_net.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade_net.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.bilinear_tensor_product->paddle.fluid.layers.bilinear_tensor_product)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.square_error_cost->paddle.fluid.layers.square_error_cost)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade_net.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_dstc2_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_dstc2_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/sentiment_classification/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/download.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/similarity_net utils.py
[1;34mStart upgrading model PaddleNLP/similarity_net/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='logging.handlers', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/utils.py has been written sucess[0m

[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer reader.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/reader.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='glob', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='tarfile', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None tarfile
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/reader.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/seq2seq/seq2seq train.py
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> base_model
NameFrom--->: ImportFrom
module_name---> attention_model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
NameFrom--->: ImportFrom
[alias(name='BaseModel', asname=None)]
ImportFrom(module='base_model', names=[alias(name='BaseModel', asname=None)], level=0)
module_name---> base_model
[1;33mfunc_name.name, and module name are[0m BaseModel base_model
NameFrom--->: ImportFrom
[alias(name='AttentionModel', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='AttentionModel', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m AttentionModel attention_model
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None pickle
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BaseModel base_model.BaseModel
key, v, from_dict:  AttentionModel attention_model.AttentionModel
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  * args.*
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/IJCAI2019-MMPMS/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/IJCAI2019-MMPMS/README.md has been written sucess[0m
[1;32mNo module named 'convert_params', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT convert_params.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/convert_params.py[0m[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/transformer.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/transformer.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/evaluate.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/evaluate.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/run.sh has been written sucess[0m
[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification inference_model.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> models.model_check
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> run_classifier
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='config', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m PDConfig config
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='run_classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> run_classifier
[1;33mfunc_name.name, and module name are[0m create_model run_classifier
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  create_model run_classifier.create_model
key, v, from_dict:  PDConfig config.PDConfig
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/args.py has been written sucess[0m
[1;32mNo module named 'mm_dnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching mm_dnn.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/mm_dnn.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.sequence_pad->paddle.fluid.layers.sequence_pad)[0m
[3;32mRestore API full name(fluid.layers.sequence_pad->paddle.fluid.layers.sequence_pad)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/gen_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/gen_data.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/auto_dialogue_evaluation train.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/train.py[0m
NameFrom--->: ImportFrom
module_name---> ade_net
NameFrom--->: ImportFrom
module_name---> ade.utils.configure
NameFrom--->: ImportFrom
module_name---> ade.utils.input_field
NameFrom--->: ImportFrom
module_name---> ade.utils.model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='ade.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None), alias(name='set_word_embedding', asname=None)]
ImportFrom(module='ade_net',
    names=[alias(name='create_net', asname=None), alias(name='set_word_embedding', asname=None)],
    level=0)
module_name---> ade_net
[1;33mfunc_name.name, and module name are[0m create_net ade_net
[1;33mfunc_name.name, and module name are[0m set_word_embedding ade_net
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='ade.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> ade.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig ade.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='ade.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> ade.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField ade.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='ade.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> ade.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda ade.utils.model_check
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  reader ade.reader
key,value import_dict:  None pickle
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  pickle cPickle
key, v, from_dict:  InputField ade.utils.input_field.InputField
key, v, from_dict:  create_net ade_net.create_net
key, v, from_dict:  PDConfig ade.utils.configure.PDConfig
key, v, from_dict:  check_cuda ade.utils.model_check.check_cuda
key, v, from_dict:  set_word_embedding ade_net.set_word_embedding
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByValue->paddle.fluid.clip.GradientClipByValue)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByValue->paddle.nn.GradientClipByValue)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/language_model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/ernie/task_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/ernie/task_reader.py has been written sucess[0m
[1;32mNo module named 'bidaf_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/reading_comprehension bidaf_model.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/reading_comprehension/bidaf_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict: 
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.while_loop->paddle.fluid.layers.while_loop)[0m
[3;32mRestore API full name(layers.beam_search_decode->paddle.fluid.layers.beam_search_decode)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.label_smooth->paddle.nn.functional.label_smooth)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_not->paddle.logical_not)[0m
[1;33mUpgrade API (paddle.fluid.layers.is_empty->paddle.is_empty)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search->paddle.nn.beam_search)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;33mUpgrade API (paddle.fluid.layers.while_loop->paddle.nn.while_loop)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search_decode->paddle.nn.beam_search_decode)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/transformer.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/shared_modules/models/sequence_labeling/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/sequence_labeling/__init__.py has been written sucess[0m
[1;32mNo module named 'ernie', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/representation ernie.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/representation/ernie.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> models.transformer_encoder
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddlehub', asname='hub')]
NameFrom--->: ImportFrom
[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)]
ImportFrom(module='models.transformer_encoder',
    names=[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)],
    level=0)
module_name---> models.transformer_encoder
[1;33mfunc_name.name, and module name are[0m encoder models.transformer_encoder
[1;33mfunc_name.name, and module name are[0m pre_process_layer models.transformer_encoder
key,value import_dict:  hub paddlehub
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  pre_process_layer models.transformer_encoder.pre_process_layer
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  encoder models.transformer_encoder.encoder
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(hub.Module->paddlehub.Module)[0m[1;34mStart upgrading model PaddleNLP/emotion_detection/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/download_data.sh has been written sucess[0m
[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer predict.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/predict.py[0m
NameFrom--->: ImportFrom
module_name---> utils.input_field
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> utils.check
NameFrom--->: ImportFrom
module_name---> utils.load
NameFrom--->: ImportFrom
module_name---> transformer
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField utils.input_field
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)]
ImportFrom(module='utils.check',
    names=[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.check
[1;33mfunc_name.name, and module name are[0m check_gpu utils.check
[1;33mfunc_name.name, and module name are[0m check_version utils.check
NameFrom--->: ImportFrom
[alias(name='load', asname=None)]
ImportFrom(module='utils.load', names=[alias(name='load', asname=None)], level=0)
module_name---> utils.load
[1;33mfunc_name.name, and module name are[0m load utils.load
ImportName--->: Import
[alias(name='desc', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None), alias(name='position_encoding_init', asname=None)]
ImportFrom(module='transformer',
    names=[alias(name='create_net', asname=None), alias(name='position_encoding_init', asname=None)],
    level=0)
module_name---> transformer
[1;33mfunc_name.name, and module name are[0m create_net transformer
[1;33mfunc_name.name, and module name are[0m position_encoding_init transformer
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  position_encoding_init transformer.position_encoding_init
key, v, from_dict:  create_net transformer.create_net
key, v, from_dict:  load utils.load.load
key, v, from_dict:  PDConfig utils.configure.PDConfig
key, v, from_dict:  InputField utils.input_field.InputField
key, v, from_dict:  check_gpu utils.check.check_gpu
key, v, from_dict:  check_version utils.check.check_version
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/predict.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/input/input.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/input/input.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/language_model/data/test_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/data/test_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/ernie/tokenization.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/ernie/tokenization.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/ACL2019-ARNOR/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2019-ARNOR/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/inference/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/inference/README.md has been written sucess[0m
[1;32mNo module named 'classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/model classifier.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/model/classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model.bert
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='BertModel', asname=None)]
ImportFrom(module='model.bert', names=[alias(name='BertModel', asname=None)], level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertModel model.bert
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  BertModel[1;34mStart upgrading model PaddleNLP/emotion_detection/download_model.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/download_model.sh has been written sucess[0m
[1;32mNo module named 'run_ernie_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/emotion_detection run_ernie_classifier.py
[1;34mStart upgrading model PaddleNLP/emotion_detection/run_ernie_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> preprocess.ernie
NameFrom--->: ImportFrom
module_name---> models.representation
NameFrom--->: ImportFrom
module_name---> models.model_check
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='task_reader', asname=None)]
ImportFrom(module='preprocess.ernie', names=[alias(name='task_reader', asname=None)], level=0)
module_name---> preprocess.ernie
[1;33mfunc_name.name, and module name are[0m task_reader preprocess.ernie
NameFrom--->: ImportFrom
[alias(name='ernie', asname=None)]
ImportFrom(module='models.representation', names=[alias(name='ernie', asname=None)], level=0)
module_name---> models.representation
[1;33mfunc_name.name, and module name are[0m ernie models.representation
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='config', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None config
key, v, from_dict:  ernie models.representation.ernie
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  task_reader preprocess.ernie.task_reader
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.contrib.memory_usage->paddle.fluid.contrib.memory_usage)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/run_ernie_classifier.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/language_model/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/evaluate_zhidao.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/evaluate_zhidao.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/tokenizer/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/tokenizer/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/losses/hinge_loss.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/losses/hinge_loss.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/ACL2019-DuConv/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2019-DuConv/README.md has been written sucess[0m
[1;32mNo module named 'init', so we use another strategy to dynamically import module[0m[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/eval.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/eval.py has been written sucess[0m
[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding predict.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/predict.py[0m
NameFrom--->: ImportFrom
module_name---> dgu_net
NameFrom--->: ImportFrom
module_name---> dgu.utils.configure
NameFrom--->: ImportFrom
module_name---> dgu.utils.input_field
NameFrom--->: ImportFrom
module_name---> dgu.utils.model_check
NameFrom--->: ImportFrom
module_name---> dgu.utils.py23
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='dgu.reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='create_net', asname=None)]
ImportFrom(module='dgu_net', names=[alias(name='create_net', asname=None)], level=0)
module_name---> dgu_net
[1;33mfunc_name.name, and module name are[0m create_net dgu_net
ImportName--->: Import
[alias(name='dgu.define_paradigm', asname='define_paradigm')]
ImportName--->: Import
[alias(name='dgu.define_predict_pack', asname='define_predict_pack')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='dgu.utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> dgu.utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig dgu.utils.configure
NameFrom--->: ImportFrom
[alias(name='InputField', asname=None)]
ImportFrom(module='dgu.utils.input_field', names=[alias(name='InputField', asname=None)], level=0)
module_name---> dgu.utils.input_field
[1;33mfunc_name.name, and module name are[0m InputField dgu.utils.input_field
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='dgu.utils.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> dgu.utils.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda dgu.utils.model_check
NameFrom--->: ImportFrom
[alias(name='tab_tok', asname=None), alias(name='rt_tok', asname=None)]
ImportFrom(module='dgu.utils.py23',
    names=[alias(name='tab_tok', asname=None), alias(name='rt_tok', asname=None)],
    level=0)
module_name---> dgu.utils.py23
[1;33mfunc_name.name, and module name are[0m tab_tok dgu.utils.py23
[1;33mfunc_name.name, and module name are[0m rt_tok dgu.utils.py23
key,value import_dict:  define_predict_pack dgu.define_predict_pack
key,value import_dict:  reader dgu.reader
key,value import_dict:  None collections
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  define_paradigm dgu.define_paradigm
key, v, from_dict:  create_net dgu_net.create_net
key, v, from_dict:  rt_tok dgu.utils.py23.rt_tok
key, v, from_dict:  tab_tok dgu.utils.py23.tab_tok
key, v, from_dict:  PDConfig dgu.utils.configure.PDConfig
key, v, from_dict:  InputField dgu.utils.input_field.InputField
key, v, from_dict:  check_cuda dgu.utils.model_check.check_cuda
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/predict.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/similarity_net/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/config.py has been written sucess[0m
[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models model_check.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/model_check.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/NAACL2019-MPM/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/NAACL2019-MPM/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/ACL2018-DAM/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2018-DAM/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/batching.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/batching.py has been written sucess[0m
[1;32mNo module named 'args', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/utils args.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/utils/args.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
key, v, from_dict:  AddParamTransformer api_upgrade_src.modify_transformer.AddParamTransformer
key, v, from_dict:  get_cur_file_list api_upgrade_src.upgrade_models_api_utils.get_cur_file_list
[3;32mRestore API full name(check_paddle->api_upgrade_src.upgrade_models_api_utils.check_paddle)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/pe.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/sentiment_classification/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/reader.py has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/sequence_labeling nets.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/sequence_labeling/nets.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='NormalInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='NormalInitializer', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NormalInitializer paddle.fluid.initializer
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  NormalInitializer paddle.fluid.initializer.NormalInitializer
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.linear_chain_crf->paddle.fluid.layers.linear_chain_crf)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.crf_decoding->paddle.fluid.layers.crf_decoding)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.crf_decoding->paddle.fluid.layers.crf_decoding)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/sequence_labeling/nets.py has been written sucess[0m

[1;32mNo module named 'cache_bert', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/model bert.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/model/bert.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model.transformer_encoder
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)]
ImportFrom(module='model.transformer_encoder',
    names=[alias(name='encoder', asname=None), alias(name='pre_process_layer', asname=None)],
    level=0)
module_name---> model.transformer_encoder
[1;33mfunc_name.name, and module name are[0m encoder model.transformer_encoder
[1;33mfunc_name.name, and module name are[0m pre_process_layer model.transformer_encoder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None json
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  pre_process_layer
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='basic_lstm', asname=None), alias(name='BasicLSTMUnit', asname=None)]
ImportFrom(module='paddle.fluid.contrib.layers',
    names=[alias(name='basic_lstm', asname=None), alias(name='BasicLSTMUnit', asname=None)],
    level=0)
module_name---> paddle.fluid.contrib.layers
[1;33mfunc_name.name, and module name are[0m basic_lstm paddle.fluid.contrib.layers
[1;33mfunc_name.name, and module name are[0m BasicLSTMUnit paddle.fluid.contrib.layers
NameFrom--->: ImportFrom
[alias(name='BaseModel', asname=None), alias(name='DecoderCell', asname=None)]
ImportFrom(module='base_model',
    names=[alias(name='BaseModel', asname=None), alias(name='DecoderCell', asname=None)],
    level=0)
module_name---> base_model
[1;33mfunc_name.name, and module name are[0m BaseModel base_model
[1;33mfunc_name.name, and module name are[0m DecoderCell base_model
NameFrom--->: ImportFrom
[alias(name='RNNCell', asname=None),
    alias(name='LSTMCell', asname=None),
    alias(name='rnn', asname=None),
    alias(name='BeamSearchDecoder', asname=None),
    alias(name='dynamic_decode', asname=None)]
ImportFrom(module='paddle.fluid.layers',
    names=[alias(name='RNNCell', asname=None),
        alias(name='LSTMCell', asname=None),
        alias(name='rnn', asname=None),
        alias(name='BeamSearchDecoder', asname=None),
        alias(name='dynamic_decode', asname=None)],
    level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m RNNCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m LSTMCell paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m rnn paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m BeamSearchDecoder paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m dynamic_decode paddle.fluid.layers
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BaseModel base_model.BaseModel
key, v, from_dict:  basic_lstm paddle.fluid.contrib.layers.basic_lstm
key, v, from_dict:  RNNCell paddle.fluid.layers.RNNCell
key, v, from_dict:  DecoderCell base_model.DecoderCell
key, v, from_dict:  BeamSearchDecoder paddle.fluid.layers.BeamSearchDecoder
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  BasicLSTMUnit paddle.fluid.contrib.layers.BasicLSTMUnit
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  dynamic_decode paddle.fluid.layers.dynamic_decode
key, v, from_dict:  rnn paddle.fluid.layers.rnn
key, v, from_dict:  LSTMCell paddle.fluid.layers.LSTMCell
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(BeamSearchDecoder->paddle.fluid.layers.BeamSearchDecoder)[0m
[3;32mRestore API full name(dynamic_decode->paddle.fluid.layers.dynamic_decode)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/attention_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/shared_modules/models/language_model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/language_model/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/EMNLP2019-MAL/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/EMNLP2019-MAL/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/reader/cls.py[0m[1;34mStart upgrading model PaddleNLP/lexical_analysis/run_ernie.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/run_ernie.sh has been written sucess[0m
[1;32mNo module named 'input_field', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/machine_translation/transformer/utils input_field.py
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/input_field.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/input_field.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/prepare_data_and_model.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/prepare_data_and_model.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_atis_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/build_atis_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/download.py has been written sucess[0m
[1;32mNo module named 'gru', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching gru.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/gru.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.DynamicGRULayer->paddle_layers.DynamicGRULayer)[0m
[3;32mRestore API full name(layers.SequenceLastStepLayer->paddle_layers.SequenceLastStepLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/gru.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/losses/log_loss.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/losses/log_loss.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/MRQA2019-D-NET/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/MRQA2019-D-NET/README.md has been written sucess[0m
[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT dist_utils.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/dist_utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/reader/squad.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/reader/squad.py has been written sucess[0m
[1;32mNo module named 'init', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo/utils
[3;32mRestore API full name(dynamic_decode->paddle.fluid.layers.dynamic_decode)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/base_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/README.md has been written sucess[0m
[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT run_classifier.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model.bert
NameFrom--->: ImportFrom
module_name---> model.classifier
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> utils.init
NameFrom--->: ImportFrom
module_name---> utils.cards
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='reader.cls', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='BertConfig', asname=None)]
ImportFrom(module='model.bert', names=[alias(name='BertConfig', asname=None)], level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertConfig model.bert
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='model.classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> model.classifier
[1;33mfunc_name.name, and module name are[0m create_model model.classifier
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m optimization optimization
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None),
    alias(name='check_version', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None),
        alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
[1;33mfunc_name.name, and module name are[0m check_cuda utils.args
[1;33mfunc_name.name, and module name are[0m check_version utils.args
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils.init',
    names=[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)],
    level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils.init
NameFrom--->: ImportFrom
[alias(name='get_cards', asname=None)]
ImportFrom(module='utils.cards', names=[alias(name='get_cards', asname=None)], level=0)
module_name---> utils.cards
[1;33mfunc_name.name, and module name are[0m get_cards utils.cards
ImportName--->: Import
[alias(name='dist_utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None dist_utils
key,value import_dict:  reader reader.cls
key, v, from_dict:  BertConfig model.bert.BertConfig
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  optimization optimization.optimization
key, v, from_dict:  check_version utils.args.check_version
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  init_checkpoint utils.init.init_checkpoint
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  check_cuda utils.args.check_cuda
key, v, from_dict:  create_model model.classifier.create_model
key, v, from_dict:  get_cards utils.cards.get_cards
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/lexical_analysis train.py
[1;34mStart upgrading model PaddleNLP/lexical_analysis/train.py[0m
NameFrom--->: ImportFrom
module_name---> eval
NameFrom--->: ImportFrom
module_name---> model_check
NameFrom--->: ImportFrom
module_name---> model_check
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='creator', asname=None)]
NameFrom--->: ImportFrom
[alias(name='test_process', asname=None)]
ImportFrom(module='eval', names=[alias(name='test_process', asname=None)], level=0)
module_name---> eval
[1;33mfunc_name.name, and module name are[0m test_process eval
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_cuda model_check
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_version model_check
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None creator
key, v, from_dict:  test_process eval.test_process
key, v, from_dict:  check_cuda model_check.check_cuda
key, v, from_dict:  check_version model_check.check_version
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/config/ade.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/data/config/ade.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/batching.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/batching.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/data/inference_models/inference_models.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/data/inference_models/inference_models.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/evaluate_unicom.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/evaluate_unicom.sh has been written sucess[0m
[1;32mNo module named 'tokenizer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/preprocess/tokenizer tokenizer.py
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/tokenizer/tokenizer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/tokenizer/tokenizer.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/LAC_demo/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo/run.sh has been written sucess[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/transformer_encoder.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/machine_reading_comprehension/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_reading_comprehension/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/ACL2019-JEMT/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2019-JEMT/README.md has been written sucess[0m
[1;32mNo module named 'optimization', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT optimization.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/optimization.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils.fp16
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='create_master_params_grads', asname=None),
    alias(name='master_param_to_train_param', asname=None),
    alias(name='apply_dynamic_loss_scaling', asname=None)]
ImportFrom(module='utils.fp16',
    names=[alias(name='create_master_params_grads', asname=None),
        alias(name='master_param_to_train_param', asname=None),
        alias(name='apply_dynamic_loss_scaling', asname=None)],
    level=0)
module_name---> utils.fp16
[1;33mfunc_name.name, and module name are[0m create_master_params_grads utils.fp16
[1;33mfunc_name.name, and module name are[0m master_param_to_train_param utils.fp16
[1;33mfunc_name.name, and module name are[0m apply_dynamic_loss_scaling utils.fp16
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  create_master_params_grads utils.fp16.create_master_params_grads
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  master_param_to_train_param utils.fp16.master_param_to_train_param
key, v, from_dict:  apply_dynamic_loss_scaling utils.fp16.apply_dynamic_loss_scaling
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.polynomial_decay->paddle.fluid.layers.learning_rate_scheduler.polynomial_decay)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.noam_decay->paddle.fluid.layers.learning_rate_scheduler.noam_decay)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/optimization.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo train.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/LAC_demo/train.py[0m
NameFrom--->: ImportFrom
module_name---> network
NameFrom--->: ImportFrom
module_name---> bilm
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/padding.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/padding.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/optimizers/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/optimizers/__init__.py has been written sucess[0m
[1;32mNo module named 'run_squad', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT run_squad.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/run_squad.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> reader.squad
NameFrom--->: ImportFrom
module_name---> model.bert
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.init
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='DataProcessor', asname=None), alias(name='write_predictions', asname=None)]
ImportFrom(module='reader.squad',
    names=[alias(name='DataProcessor', asname=None), alias(name='write_predictions', asname=None)],
    level=0)
module_name---> reader.squad
[1;33mfunc_name.name, and module name are[0m DataProcessor reader.squad
[1;33mfunc_name.name, and module name are[0m write_predictions reader.squad
NameFrom--->: ImportFrom
[alias(name='BertConfig', asname=None), alias(name='BertModel', asname=None)]
ImportFrom(module='model.bert',
    names=[alias(name='BertConfig', asname=None), alias(name='BertModel', asname=None)],
    level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertConfig model.bert
[1;33mfunc_name.name, and module name are[0m BertModel model.bert
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None),
    alias(name='check_version', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None),
        alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
[1;33mfunc_name.name, and module name are[0m check_cuda utils.args
[1;33mfunc_name.name, and module name are[0m check_version utils.args
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m optimization optimization
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils.init',
    names=[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)],
    level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils.init
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  BertModel model.bert.BertModel
key, v, from_dict:  DataProcessor reader.squad.DataProcessor
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  write_predictions reader.squad.write_predictions
key, v, from_dict:  optimization optimization.optimization
key, v, from_dict:  check_version utils.args.check_version
key, v, from_dict:  BertConfig model.bert.BertConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  init_checkpoint utils.init.init_checkpoint
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  check_cuda utils.args.check_cuda
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unstack->paddle.fluid.layers.unstack)[0m
[3;32mRestore API full name(fluid.layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/classification/nets.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/reader/cls.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/reader/cls.py has been written sucess[0m
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(layers.gaussian_random_batch_size_like->paddle.fluid.layers.gaussian_random_batch_size_like)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(BeamSearchDecoder->paddle.fluid.layers.BeamSearchDecoder)[0m
[3;32mRestore API full name(dynamic_decode->paddle.fluid.layers.dynamic_decode)[0m
[3;32mRestore API full name(BeamSearchDecoder->paddle.fluid.layers.BeamSearchDecoder)[0m
[3;32mRestore API full name(dynamic_decode->paddle.fluid.layers.dynamic_decode)[0m
[3;32mRestore API full name(layers.gaussian_random_batch_size_like->paddle.fluid.layers.gaussian_random_batch_size_like)[0m
[3;32mRestore API full name(layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/model.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/model/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/data.py has been written sucess[0m
[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo network.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/LAC_demo/network.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> bilm
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='NormalInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='NormalInitializer', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NormalInitializer paddle.fluid.initializer
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='elmo_encoder', asname=None)]
ImportFrom(module='bilm', names=[alias(name='elmo_encoder', asname=None)], level=0)
module_name---> bilm
[1;33mfunc_name.name, and module name are[0m elmo_encoder bilm
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  NormalInitializer paddle.fluid.initializer.NormalInitializer
key, v, from_dict:  elmo_encoder bilm.elmo_encoder
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
ImportFrom(module='reader',
    names=[alias(name='BOS_ID', asname=None), alias(name='EOS_ID', asname=None), alias(name='get_vocab', asname=None)],
    level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m BOS_ID reader
[1;33mfunc_name.name, and module name are[0m EOS_ID reader
[1;33mfunc_name.name, and module name are[0m get_vocab reader
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key, v, from_dict:  VAE model.VAE
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_vocab reader.get_vocab
key, v, from_dict:  EOS_ID reader.EOS_ID
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  BOS_ID reader.BOS_ID
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/infer.py has been written sucess[0m

[1;32mNo module named 'lm_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/language_model lm_model.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/language_model/lm_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.control_flow
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.contrib.layers
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='StaticRNN', asname='PaddingRNN')]
ImportFrom(module='paddle.fluid.layers.control_flow', names=[alias(name='StaticRNN', asname='PaddingRNN')], level=0)
module_name---> paddle.fluid.layers.control_flow
[1;33mfunc_name.name, and module name are[0m StaticRNN paddle.fluid.layers.control_flow
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='basic_lstm', asname=None)]
ImportFrom(module='paddle.fluid.contrib.layers', names=[alias(name='basic_lstm', asname=None)], level=0)
module_name---> paddle.fluid.contrib.layers
[1;33mfunc_name.name, and module name are[0m basic_lstm paddle.fluid.contrib.layers
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  StaticRNN paddle.fluid.layers.control_flow.StaticRNN
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  basic_lstm paddle.fluid.contrib.layers.basic_lstm
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  division __future__.division
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/predict.py has been written sucess[0m

[1;32mNo module named 'input_field', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils input_field.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/input_field.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/input_field.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/sentiment_classification reader.py
[1;34mStart upgrading model PaddleNLP/sentiment_classification/reader.py[0m
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='types', asname=None)]
ImportName--->: Import
[alias(name='csv', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='load_vocab', asname=None)]
ImportFrom(module='utils', names=[alias(name='load_vocab', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m load_vocab utils
NameFrom--->: ImportFrom
[alias(name='data_reader', asname=None)]
ImportFrom(module='utils', names=[alias(name='data_reader', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m data_reader utils
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  load_vocab utils.load_vocab
key, v, from_dict:  data_reader utils.data_reader
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/similarity_net/evaluate/evaluate_qqsim.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/evaluate/evaluate_qqsim.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/preprocess/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/preprocess/__init__.py has been written sucess[0m
[1;32mNo module named 'transformer_encoder', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/model transformer_encoder.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/model/transformer_encoder.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  partial functools.partial
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/define_paradigm.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/run.sh has been written sucess[0m
[1;32mNo module named 'transformer_encoder', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models transformer_encoder.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/transformer_encoder.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  partial functools.partial
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/transformer_encoder.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/classifier_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/classifier_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/utils/cards.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/utils/cards.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/tests/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/tests/__init__.py has been written sucess[0m
module_name---> base_model
[1;33mfunc_name.name, and module name are[0m BaseModel base_model
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BaseModel base_model.BaseModel
key, v, from_dict:  AttentionModel attention_model.AttentionModel
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/losses/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/losses/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/reading_comprehension/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/reading_comprehension/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/Research/Dialogue-PLATO/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/Dialogue-PLATO/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/inference/gen_demo_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/inference/gen_demo_data.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/reader/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/reader/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet run_classifier.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> scipy.stats
NameFrom--->: ImportFrom
module_name---> model.xlnet
NameFrom--->: ImportFrom
module_name---> model.classifier
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> utils.init
NameFrom--->: ImportFrom
module_name---> utils.cards
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
NameFrom--->: ImportFrom
[alias(name='pearsonr', asname=None)]
ImportFrom(module='scipy.stats', names=[alias(name='pearsonr', asname=None)], level=0)
module_name---> scipy.stats
[1;33mfunc_name.name, and module name are[0m pearsonr scipy.stats
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader.cls', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='XLNetConfig', asname=None)]
ImportFrom(module='model.xlnet', names=[alias(name='XLNetConfig', asname=None)], level=0)
module_name---> model.xlnet
[1;33mfunc_name.name, and module name are[0m XLNetConfig model.xlnet
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='model.classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> model.classifier
[1;33mfunc_name.name, and module name are[0m create_model model.classifier
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m optimization optimization
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
[1;33mfunc_name.name, and module name are[0m check_cuda utils.args
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils.init',
    names=[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)],
    level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils.init
NameFrom--->: ImportFrom
[alias(name='get_cards', asname=None)]
ImportFrom(module='utils.cards', names=[alias(name='get_cards', asname=None)], level=0)
module_name---> utils.cards
[1;34mStart upgrading model PaddleNLP/emotion_detection/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/emotion_detection/download.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/lexical_analysis/ernie_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/ernie_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/README.md has been written sucess[0m
[1;32mNo module named 'fp16', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils fp16.py
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/fp16.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.framework.Parameter->paddle.fluid.framework.Parameter)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/utils/fp16.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/similarity_net/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/classification/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/classification/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/neural_machine_translation/transformer/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/neural_machine_translation/transformer/__init__.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_domain_classification utils.py
[1;34mStart upgrading model PaddleNLP/dialogue_domain_classification/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='codecs', asname=None)]
ImportName--->: Import
[alias(name='configparser', asname='cp')]
ImportName--->: Import
[alias(name='ConfigParser', asname='cp')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None codecs
key,value import_dict:  cp ConfigParser
key, v, from_dict:  unicode_literals __future__.unicode_literals
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_domain_classification/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleSpeech/DeepASR/README_cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/README_cn.md has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/util.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/trans_mean_variance_norm.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/trans_mean_variance_norm.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/decoder/setup.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/decoder/setup.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/profile.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/profile.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/prepare_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/prepare_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/tools/error_rate.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/tools/error_rate.py has been written sucess[0m
[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: check_cuda models.model_check.check_cuda
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.contrib.memory_usage->paddle.fluid.contrib.memory_usage)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/run_classifier.py has been written sucess[0m

[1;32mNo module named 'lstm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching lstm.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/lstm.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.DynamicLSTMLayer->paddle_layers.DynamicLSTMLayer)[0m
[3;32mRestore API full name(layers.SequenceLastStepLayer->paddle_layers.SequenceLastStepLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/lstm.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/LAC_demo/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo/reader.py has been written sucess[0m
[1;32mNo module named 'bilm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo bilm.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/LAC_demo/bilm.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.dynamic_lstmp->paddle.fluid.layers.dynamic_lstmp)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m[1;34mStart upgrading model PaddleNLP/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/lexical_analysis/downloads.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/lexical_analysis/downloads.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/machine_translation/transformer/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/machine_translation/transformer/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/configure.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/auto_dialogue_evaluation/ade/utils/configure.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/scripts/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/sentiment_classification/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/sentiment_classification/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/download.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/similarity_net/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/download_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/infer.sh has been written sucess[0m
[1;32mNo module named 'cnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching cnn.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/cnn.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.SequenceConvPoolLayer->paddle_layers.SequenceConvPoolLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/cnn.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/ACL2018-DuReader/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2018-DuReader/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/tokenization.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/tokenization.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/prepro_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/prepro_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/squad_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/squad_utils.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleSpeech/DeepASR infer.py
[1;34mStart upgrading model PaddleSpeech/DeepASR/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> data_utils.util
NameFrom--->: ImportFrom
module_name---> data_utils.util
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_mean_variance_norm', asname='trans_mean_variance_norm')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_add_delta', asname='trans_add_delta')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_splice', asname='trans_splice')]
ImportName--->: Import
[alias(name='data_utils.async_data_reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='lodtensor_to_ndarray', asname=None)]
ImportFrom(module='data_utils.util', names=[alias(name='lodtensor_to_ndarray', asname=None)], level=0)
module_name---> data_utils.util
[1;33mfunc_name.name, and module name are[0m lodtensor_to_ndarray data_utils.util
NameFrom--->: ImportFrom
[alias(name='split_infer_result', asname=None)]
ImportFrom(module='data_utils.util', names=[alias(name='split_infer_result', asname=None)], level=0)
module_name---> data_utils.util
[1;33mfunc_name.name, and module name are[0m split_infer_result data_utils.util
key,value import_dict:  reader data_utils.async_data_reader
key,value import_dict:  None argparse
key,value import_dict:  trans_add_delta data_utils.augmentor.trans_add_delta
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  trans_splice 

[1;34mStart upgrading model PaddleNLP/seq2seq/variational_seq2seq/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/run.sh has been written sucess[0m
[1;32mNo module named 'paddle_layers', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/matching paddle_layers.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/matching/paddle_layers.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.param_attr', asname='attr')]
key,value import_dict:  attr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.elementwise_max->paddle.fluid.layers.elementwise_max)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.softsign->paddle.fluid.layers.softsign)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_max->paddle.elementwise_max)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.softsign->paddle.nn.functional.softsign)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/paddle_layers.py has been written sucess[0m

[1;32mNo module named 'init', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet/utils init.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/utils/init.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='config', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models.matching.paddle_layers', asname='layers')]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ArgConfig', asname=None)]
ImportFrom(module='utils', names=[alias(name='ArgConfig', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m ArgConfig utils
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_version models.model_check
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='models.model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> models.model_check
[1;33mfunc_name.name, and module name are[0m check_cuda models.model_check
key,value import_dict:  layers models.matching.paddle_layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ArgConfig utils.ArgConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  check_version models.model_check.check_version
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/run_classifier.py has been written sucess[0m

[1;32mNo module named 'modeling', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet modeling.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/modeling.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.DynamicRNN->paddle.fluid.layers.DynamicRNN)[0m
[3;32mRestore API full name(layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sums->paddle.fluid.layers.sums)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.DynamicRNN->paddle.fluid.layers.DynamicRNN)[0m
[3;32mRestore API full name(layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m __future__.print_function
key, v, from_dict:  mkpath distutils.dir_util.mkpath
key, v, from_dict:  RNNConfig config.RNNConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  check_cuda models.model_check.check_cuda
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  check_version models.model_check.check_version
key, v, from_dict:  * args.*
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/language_model/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/MRQA2019-BASELINE/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/MRQA2019-BASELINE/README.md has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_domain_classification nets.py
[1;34mStart upgrading model PaddleNLP/dialogue_domain_classification/nets.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.thresholded_relu->paddle.fluid.layers.thresholded_relu)[0m
[3;32mRestore API full name(fluid.layers.ceil->paddle.fluid.layers.ceil)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.ceil->paddle.ceil)[0m
[1;33mUpgrade API (paddle.fluid.layers.thresholded_relu->paddle.nn.functional.thresholded_relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_domain_classification/nets.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/reader/squad.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/reader/squad.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleSpeech/DeepASR train.py
[1;34mStart upgrading model PaddleSpeech/DeepASR/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model_utils.model
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
key,value import_dict:  layers models.matching.paddle_layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
[3;32mRestore API full name(layers.ReduceMeanLayer->models.matching.paddle_layers.ReduceMeanLayer)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/losses/softmax_cross_entropy_loss.py has been written sucess[0m

[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/dialogue_domain_classification run_classifier.py
[1;34mStart upgrading model PaddleNLP/dialogue_domain_classification/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='textcnn_net_multi_label', asname=None)]
ImportFrom(module='nets', names=[alias(name='textcnn_net_multi_label', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m textcnn_net_multi_label nets
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='DataProcesser', asname=None),
    alias(name='DataReader', asname=None),
    alias(name='ConfigReader', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='DataProcesser', asname=None),
        alias(name='DataReader', asname=None),
        alias(name='ConfigReader', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils
[1;33mfunc_name.name, and module name are[0m print_arguments utils
[1;33mfunc_name.name, and module name are[0m DataProcesser utils
[1;33mfunc_name.name, and module name are[0m DataReader utils
[1;33mfunc_name.name, and module name are[0m ConfigReader utils
NameFrom--->: ImportFrom
[alias(name='init_checkpoint', asname=None),
    alias(name='check_version', asname=None),
    alias(name='logger', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='init_checkpoint', asname=None),
        alias(name='check_version', asname=None),
        alias(name='logger', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils
[1;33mfunc_name.name, and module name are[0m check_version utils
[1;33mfunc_name.name, and module name are[0m logger utils
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='codecs', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  logger utils.logger
key, v, from_dict:  print_arguments utils.print_arguments
key, v, from_dict:  ConfigReader utils.ConfigReader
key, v, from_dict:  DataReader utils.DataReader
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_version utils.check_version
key, v, from_dict:  init_checkpoint utils.init_checkpoint
key, v, from_dict:  ArgumentGroup utils.ArgumentGroup
key, v, from_dict:  DataProcesser utils.DataProcesser
key, v, from_dict:  textcnn_net_multi_label nets.textcnn_net_multi_label
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> tensorflow.python
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None)]
ImportFrom(module='utils.args', names=[alias(name='print_arguments', asname=None)], level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
ImportName--->: Import
[alias(name='tensorflow', asname='tf')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='pywrap_tensorflow', asname=None)]
ImportFrom(module='tensorflow.python', names=[alias(name='pywrap_tensorflow', asname=None)], level=0)
module_name---> tensorflow.python
[1;33mfunc_name.name, and module name are[0m pywrap_tensorflow tensorflow.python
key,value import_dict:  tf tensorflow
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None collections
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  pywrap_tensorflow tensorflow.python.pywrap_tensorflow
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.core.CPUPlace->paddle.fluid.core.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.io.save_params->paddle.fluid.io.save_params)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.core.CPUPlace->paddle.CPUPlace)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/convert_params.py has been written sucess[0m

[1;32mNo module named 'run_squad', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet run_squad.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/run_squad.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> reader.squad
NameFrom--->: ImportFrom
module_name---> model.xlnet
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.init
NameFrom--->: ImportFrom
module_name---> modeling
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='DataProcessor', asname=None), alias(name='write_predictions', asname=None)]
ImportFrom(module='reader.squad',
    names=[alias(name='DataProcessor', asname=None), alias(name='write_predictions', asname=None)],
    level=0)
module_name---> reader.squad
[1;33mfunc_name.name, and module name are[0m DataProcessor reader.squad
[1;33mfunc_name.name, and module name are[0m write_predictions reader.squad
NameFrom--->: ImportFrom
[alias(name='XLNetConfig', asname=None), alias(name='XLNetModel', asname=None)]
ImportFrom(module='model.xlnet',
    names=[alias(name='XLNetConfig', asname=None), alias(name='XLNetModel', asname=None)],
    level=0)
module_name---> model.xlnet
[1;33mfunc_name.name, and module name are[0m XLNetConfig model.xlnet
[1;33mfunc_name.name, and module name are[0m XLNetModel model.xlnet
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m optimization optimization
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)]
ImportFrom(module='utils.init',
    names=[alias(name='init_pretraining_params', asname=None), alias(name='init_checkpoint', asname=None)],
    level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils.init
NameFrom--->: ImportFrom
[alias(name='log_softmax', asname=None)]
ImportFrom(module='modeling', names=[alias(name='log_softmax', asname=None)], level=0)
module_name---> modeling
[1;33mfunc_name.name, and module name are[0m log_softmax modeling
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key,value import_dict:  pickle cPickle
key, v, from_dict:  DataProcessor reader.squad.DataProcessor
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/mm_dnn.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/utils/cards.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/utils/cards.py has been written sucess[0m
[1;32mNo module named 'classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet/model classifier.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/model/classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model.xlnet
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='modeling', asname=None)]
NameFrom--->: ImportFrom
[alias(name='XLNetModel', asname=None), alias(name='_get_initializer', asname=None)]
ImportFrom(module='model.xlnet',
    names=[alias(name='XLNetModel', asname=None), alias(name='_get_initializer', asname=None)],
    level=0)
module_name---> model.xlnet
[1;33mfunc_name.name, and module name are[0m XLNetModel model.xlnet
[1;33mfunc_name.name, and module name are[0m _get_initializer model.xlnet
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None modeling
key, v, from_dict:  XLNetModel model.xlnet.XLNetModel
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  _get_initializer model.xlnet._get_initializer
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/model/classifier.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition train.py
[1;34mStart upgrading model dygraph/ocr_recognition/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> eval
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='get_attention_feeder_data', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='get_attention_feeder_data', asname=None)],
    level=0)
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(hub.connect_program->paddlehub.connect_program)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/representation/ernie.py has been written sucess[0m

[1;34mStart upgrading model dygraph/ocr_recognition/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/README.md has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition nets.py
[1;34mStart upgrading model dygraph/ocr_recognition/nets.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='Linear', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Embedding', asname=None),
    alias(name='GRUUnit', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='Linear', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Embedding', asname=None),
        alias(name='GRUUnit', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m GRUUnit paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  GRUUnit paddle.fluid.dygraph.nn.GRUUnit
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/optimizers/paddle_optimizers.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/Research/ACL2019-KTNET/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/Research/ACL2019-KTNET/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT train.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> reader.pretraining
NameFrom--->: ImportFrom
module_name---> model.bert
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> utils.init
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader.pretraining', names=[alias(name='DataReader', asname=None)], level=0)
module_name---> reader.pretraining
[1;33mfunc_name.name, and module name are[0m DataReader reader.pretraining
NameFrom--->: ImportFrom
[alias(name='BertModel', asname=None), alias(name='BertConfig', asname=None)]
ImportFrom(module='model.bert',
    names=[alias(name='BertModel', asname=None), alias(name='BertConfig', asname=None)],
    level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertModel model.bert
[1;33mfunc_name.name, and module name are[0m BertConfig model.bert
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None)]
ImportFrom(module='optimization', names=[alias(name='optimization', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m optimization optimization
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None),
    alias(name='check_version', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None),
        alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
[1;33mfunc_name.name, and module name are[0m check_cuda utils.args
[1;33mfunc_name.name, and module name are[0m check_version utils.args
NameFrom--->: ImportFrom
[alias(name='init_checkpoint', asname=None), alias(name='init_pretraining_params', asname=None)]
ImportFrom(module='utils.init',
    names=[alias(name='init_checkpoint', asname=None), alias(name='init_pretraining_params', asname=None)],
    level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_checkpoint utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  BertModel model.bert.BertModel
key, v, from_dict:  BertConfig model.bert.BertConfig
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  optimization optimization.optimization
key, v, from_dict:  check_version utils.args.check_version
key, v, from_dict:  DataReader reader.pretraining.DataReader
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  init_checkpoint utils.init.init_checkpoint
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  check_cuda utils.args.check_cuda
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/train.py has been written sucess[0m

[1;34mStart upgrading model dygraph/mobilenet/run_sing_v1_checkpoint.sh[0m
[1;32mNo module named 'infer_by_ckpt', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleSpeech/DeepASR infer_by_ckpt.py
[1;34mStart upgrading model PaddleSpeech/DeepASR/infer_by_ckpt.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> data_utils.util
NameFrom--->: ImportFrom
module_name---> model_utils.model
NameFrom--->: ImportFrom
module_name---> post_latgen_faster_mapped
NameFrom--->: ImportFrom
module_name---> tools.error_rate
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_mean_variance_norm', asname='trans_mean_variance_norm')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_add_delta', asname='trans_add_delta')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_splice', asname='trans_splice')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_delay', asname='trans_delay')]
ImportName--->: Import
[alias(name='data_utils.async_data_reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='lodtensor_to_ndarray', asname=None), alias(name='split_infer_result', asname=None)]
ImportFrom(module='data_utils.util',
    names=[alias(name='lodtensor_to_ndarray', asname=None), alias(name='split_infer_result', asname=None)],
    level=0)
module_name---> data_utils.util
[1;33mfunc_name.name, and module name are[0m lodtensor_to_ndarray data_utils.util
[1;33mfunc_name.name, and module name are[0m split_infer_result data_utils.util
NameFrom--->: ImportFrom
[alias(name='stacked_lstmp_model', asname=None)]
ImportFrom(module='model_utils.model', names=[alias(name='stacked_lstmp_model', asname=None)], level=0)
module_name---> model_utils.model
[1;33mfunc_name.name, and module name are[0m stacked_lstmp_model model_utils.model
NameFrom--->: ImportFrom
[alias(name='Decoder', asname=None)]
ImportFrom(module='post_latgen_faster_mapped', names=[alias(name='Decoder', asname=None)], level=0)
module_name---> post_latgen_faster_mapped
[1;33mfunc_name.name, and module name are[0m Decoder post_latgen_faster_mapped
NameFrom--->: ImportFrom
[alias(name='char_errors', asname=None)]
ImportFrom(module='tools.error_rate', names=[alias(name='char_errors', asname=None)], level=0)
module_name---> tools.error_rate
[1;33mfunc_name.name, and module name are[0m char_errors tools.error_rate
key,value import_dict:  reader data_utils.async_data_reader
key,value import_dict:  None time
key,value import_dict:  trans_add_delta data_utils.augmentor.trans_add_delta
key,value import_dict:  trans_delay data_utils.augmentor.trans_delay
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  trans_mean_variance_norm data_utils.augmentor.trans_mean_variance_norm
key,value import_dict:  trans_splice data_utils.augmentor.trans_splice
key, v, from_dict:  split_infer_result data_utils.util.split_infer_result
key, v, from_dict:  lodtensor_to_ndarray data_utils.util.lodtensor_to_ndarray
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  char_errors tools.error_rate.char_errors
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Decoder post_latgen_faster_mapped.Decoder
key, v, from_dict:  division __future__.division
key, v, from_dict:  stacked_lstmp_model model_utils.model.stacked_lstmp_model
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/infer_by_ckpt.py has been written sucess[0m

[1;32mNo module named 'imagenet_dataset', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet imagenet_dataset.py
[1;34mStart upgrading model dygraph/mobilenet/imagenet_dataset.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.incubate.hapi.datasets
NameFrom--->: ImportFrom
module_name---> paddle.incubate.hapi.vision.transforms
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='DatasetFolder', asname=None)]
ImportFrom(module='paddle.incubate.hapi.datasets', names=[alias(name='DatasetFolder', asname=None)], level=0)
module_name---> paddle.incubate.hapi.datasets
[1;33mfunc_name.name, and module name are[0m DatasetFolder paddle.incubate.hapi.datasets
NameFrom--->: ImportFrom
[alias(name='transforms', asname=None)]
ImportFrom(module='paddle.incubate.hapi.vision.transforms', names=[alias(name='transforms', asname=None)], level=0)
module_name---> paddle.incubate.hapi.vision.transforms
[1;33mfunc_name.name, and module name are[0m transforms paddle.incubate.hapi.vision.transforms
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
key,value import_dict:  np numpy
key,value import_dict:  None random
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  transforms paddle.incubate.hapi.vision.transforms.transforms
key, v, from_dict:  DatasetFolder paddle.incubate.hapi.datasets.DatasetFolder
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_system/dialogue_general_understanding/dgu/optimization.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/similarity_net/download_pretrained_model.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/similarity_net/download_pretrained_model.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/download.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/seq2seq/seq2seq/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/seq2seq/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/representation/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/representation/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/README.md has been written sucess[0m
[1;32mNo module named 'fp16', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/utils fp16.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/utils/fp16.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.framework.Parameter->paddle.fluid.framework.Parameter)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.isfinite->paddle.fluid.layers.isfinite)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.zeros_like->paddle.fluid.layers.zeros_like)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.isfinite->paddle.fluid.layers.isfinite)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.increment->paddle.fluid.layers.increment)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.Switch->paddle.fluid.layers.Switch)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.increment->paddle.fluid.layers.increment)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.isfinite->paddle.isfinite)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros_like->paddle.tensor.zeros_like)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.isfinite->paddle.isfinite)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/utils/fp16.py has been written sucess[0m
[3;32mRestore API full name(layers.SequencePoolLayer->paddle_layers.SequencePoolLayer)[0m
[3;32mRestore API full name(layers.SoftsignLayer->paddle_layers.SoftsignLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/matching/bow.py has been written sucess[0m

[1;32mNo module named 'predict_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT predict_classifier.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/predict_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model.bert
NameFrom--->: ImportFrom
module_name---> model.classifier
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> utils.init
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader.cls', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='BertConfig', asname=None)]
ImportFrom(module='model.bert', names=[alias(name='BertConfig', asname=None)], level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertConfig model.bert
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='model.classifier', names=[alias(name='create_model', asname=None)], level=0)
module_name---> model.classifier
[1;33mfunc_name.name, and module name are[0m create_model model.classifier
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None)]
ImportFrom(module='utils.init', names=[alias(name='init_pretraining_params', asname=None)], level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None multiprocessing
key,value import_dict:  reader reader.cls
key, v, from_dict:  BertConfig model.bert.BertConfig
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  create_model model.classifier.create_model
key, v, from_dict:  print_arguments utils.args.print_arguments
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/predict_classifier.py has been written sucess[0m

[1;34mStart upgrading model dygraph/mobilenet/run_mul_v1.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_mul_v1.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_sing_v1.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_sing_v1.sh has been written sucess[0m
[1;32mNo module named 'mobilenet_v2', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet mobilenet_v2.py
[1;34mStart upgrading model dygraph/mobilenet/mobilenet_v2.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/shared_modules/models/neural_machine_translation/transformer model.py
[1;34mStart upgrading model PaddleNLP/shared_modules/models/neural_machine_translation/transformer/model.py[0m
NameFrom--->: ImportFrom
module_name---> functools
NameFrom--->: ImportFrom
module_name---> desc
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='desc', names=[alias(name='*', asname=None)], level=0)
module_name---> desc
[1;33mfunc_name.name, and module name are[0m * desc
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  partial functools.partial
key, v, from_dict:  * desc.*
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.py_reader->paddle.fluid.layers.py_reader)[0m
[3;32mRestore API full name(layers.read_file->paddle.fluid.layers.read_file)[0m
[3;32mRestore API full name(layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(layers.label_smooth->paddle.fluid.layers.label_smooth)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(layers.While->paddle.fluid.layers.While)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(layers.beam_search->paddle.fluid.layers.beam_search)[0m
[3;32mRestore API full name(layers.increment->paddle.fluid.layers.increment)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(layers.is_empty->paddle.fluid.layers.is_empty)[0m
[3;32mRestore API full name(layers.logical_not->paddle.fluid.layers.logical_not)[0m
[3;32mRestore API full name(layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(layers.beam_search_decode->paddle.fluid.layers.beam_search_decode)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
NameFrom--->: ImportFrom
[alias(name='VAE', asname=None)]
ImportFrom(module='model', names=[alias(name='VAE', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m VAE model
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None pickle
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  VAE model.VAE
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  * args.*
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/seq2seq/variational_seq2seq/train.py has been written sucess[0m

[1;32mNo module named 'pretraining', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/reader pretraining.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/reader/pretraining.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> batching
[1;34mfuture count is 2 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='types', asname=None)]
ImportName--->: Import
[alias(name='gzip', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='tokenization', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='prepare_batch_data', asname=None)]
ImportFrom(module='batching', names=[alias(name='prepare_batch_data', asname=None)], level=0)
module_name---> batching
[1;33mfunc_name.name, and module name are[0m prepare_batch_data batching
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  prepare_batch_data batching.prepare_batch_data
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/reader/pretraining.py has been written sucess[0m

[1;34mStart upgrading model dygraph/tsm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/README.md has been written sucess[0m
[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/tsm eval.py
[1;34mStart upgrading model dygraph/tsm/eval.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> config_utils
NameFrom--->: ImportFrom
module_name---> reader
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(layers.lstm->paddle.fluid.layers.lstm)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(basic_lstm->paddle.fluid.contrib.layers.basic_lstm)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/reader/cls.py has been written sucess[0m
[1;32mNo module named 'lm_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo lm_model.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/lm_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.dynamic_lstmp->paddle.fluid.layers.dynamic_lstmp)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.sampled_softmax_with_cross_entropy->paddle.fluid.layers.sampled_softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(fluid.layers.sequence_last_step->paddle.fluid.layers.sequence_last_step)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sampled_softmax_with_cross_entropy->paddle.nn.functional.sampled_softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/lm_model.py has been written sucess[0m

[1;34mStart upgrading model dygraph/mobilenet/run_sing_v2.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_sing_v2.sh has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet/utils utility.py
[1;34mStart upgrading model dygraph/mobilenet/utils/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='lex_net', asname=None)]
ImportFrom(module='network', names=[alias(name='lex_net', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m lex_net network
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None)]
ImportFrom(module='bilm', names=[alias(name='init_pretraining_params', asname=None)], level=0)
module_name---> bilm
[1;33mfunc_name.name, and module name are[0m init_pretraining_params bilm
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  init_pretraining_params bilm.init_pretraining_params
key, v, from_dict:  lex_net network.lex_net
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.core.Scope->paddle.fluid.core.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.chunk_eval->paddle.fluid.layers.chunk_eval)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo/train.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet train.py
[1;34mStart upgrading model dygraph/mobilenet/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> mobilenet_v1
NameFrom--->: ImportFrom
module_name---> mobilenet_v2
NameFrom--->: ImportFrom
module_name---> imagenet_dataset
NameFrom--->: ImportFrom
module_name---> paddle.io
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='framework', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='framework', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m framework paddle.fluid
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='mobilenet_v1', names=[alias(name='*', asname=None)], level=0)
module_name---> mobilenet_v1
[1;33mfunc_name.name, and module name are[0m * mobilenet_v1
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='mobilenet_v2', names=[alias(name='*', asname=None)], level=0)
module_name---> mobilenet_v2
[1;33mfunc_name.name, and module name are[0m * mobilenet_v2
NameFrom--->: ImportFrom
[alias(name='ImageNetDataset', asname=None)]
ImportFrom(module='imagenet_dataset', names=[alias(name='ImageNetDataset', asname=None)], level=0)
module_name---> imagenet_dataset
[1;33mfunc_name.name, and module name are[0m ImageNetDataset imagenet_dataset
NameFrom--->: ImportFrom
[alias(name='DataLoader', asname=None)]
ImportFrom(module='paddle.io', names=[alias(name='DataLoader', asname=None)], level=0)
module_name---> paddle.io
[1;33mfunc_name.name, and module name are[0m DataLoader paddle.io
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  framework paddle.fluid.framework
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
key, v, from_dict:  ImageNetDataset imagenet_dataset.ImageNetDataset
key, v, from_dict:  * mobilenet_v2.*
key, v, from_dict:  DataLoader paddle.io.DataLoader
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleSpeech/DeepASR/model_utils model.py
[1;34mStart upgrading model PaddleSpeech/DeepASR/model_utils/model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstmp->paddle.fluid.layers.dynamic_lstmp)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/model_utils/model.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition eval.py
[1;34mStart upgrading model dygraph/ocr_recognition/eval.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> nets
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OCRAttention', asname=None)]
ImportFrom(module='nets', names=[alias(name='OCRAttention', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m OCRAttention nets
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='get_attention_feeder_data', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='get_attention_feeder_data', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m get_attention_feeder_data utility
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None data_reader
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  get_attention_feeder_data utility.get_attention_feeder_data
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  OCRAttention nets.OCRAttention
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/eval.py has been written sucess[0m

[1;34mStart upgrading model dygraph/tsm/tsm.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/tsm.yaml has been written sucess[0m
[1;34mStart upgrading model dygraph/tsm/data/dataset/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/data/dataset/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/tsm/data/dataset/kinetics/generate_label.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/data/dataset/kinetics/generate_label.py has been written sucess[0m
[1;34mStart upgrading model dygraph/tsm/data/dataset/kinetics/video2pkl.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/data/dataset/kinetics/video2pkl.py has been written sucess[0m
[1;34mStart upgrading model dygraph/resnet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/resnet/README.md has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/resnet reader.py
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.start_profiler->paddle.fluid.profiler.start_profiler)[0m
[3;32mRestore API full name(profiler.stop_profiler->paddle.fluid.profiler.stop_profiler)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/run_classifier.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bmn/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/run.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/bmn/bmn.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/bmn.yaml has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_mul_v1_checkpoint.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_mul_v1_checkpoint.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_mul_v2_checkpoint.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_mul_v2_checkpoint.sh has been written sucess[0m
[1;32mNo module named 'optimizer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet/utils optimizer.py
[1;34mStart upgrading model dygraph/mobilenet/utils/optimizer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.ops', asname='ops')]
NameFrom--->: ImportFrom
[alias(name='_decay_step_counter', asname=None)]
ImportFrom(module='paddle.fluid.layers.learning_rate_scheduler',
    names=[alias(name='_decay_step_counter', asname=None)],
    level=0)
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;33mfunc_name.name, and module name are[0m _decay_step_counter paddle.fluid.layers.learning_rate_scheduler
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  ops paddle.fluid.layers.ops
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  _decay_step_counter paddle.fluid.layers.learning_rate_scheduler._decay_step_counter
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(ops.cos->paddle.fluid.layers.ops.cos)[0m
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(ops.cos->paddle.fluid.layers.ops.cos)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cosine_decay->paddle.fluid.layers.cosine_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m model.bert.BertModel
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/model/classifier.py has been written sucess[0m

[1;32mNo module named 'xlnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet/model xlnet.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/model/xlnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='modeling', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None modeling
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/model/xlnet.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bmn eval.py
[1;34mStart upgrading model dygraph/bmn/eval.py[0m
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> bmn_utils
NameFrom--->: ImportFrom
module_name---> config_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BMNReader', asname=None)]
ImportFrom(module='reader', names=[alias(name='BMNReader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m BMNReader reader
NameFrom--->: ImportFrom
[alias(name='BMN', asname=None), alias(name='bmn_loss_func', asname=None)]
ImportFrom(module='model', names=[alias(name='BMN', asname=None), alias(name='bmn_loss_func', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m BMN model
[1;33mfunc_name.name, and module name are[0m bmn_loss_func model
NameFrom--->: ImportFrom
[alias(name='boundary_choose', asname=None), alias(name='bmn_post_processing', asname=None)]
ImportFrom(module='bmn_utils',
    names=[alias(name='boundary_choose', asname=None), alias(name='bmn_post_processing', asname=None)],
    level=0)
module_name---> bmn_utils
[1;33mfunc_name.name, and module name are[0m boundary_choose bmn_utils
[1;33mfunc_name.name, and module name are[0m bmn_post_processing bmn_utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> config_utils
[1;33mfunc_name.name, and module name are[0m * config_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key,value import_dict:  pd pandas
key, v, from_dict:  bmn_post_processing bmn_utils.bmn_post_processing
key, v, from_dict:  BMNReader reader.BMNReader
key, v, from_dict:  * config_utils.*
key, v, from_dict:  BMN model.BMN
key, v, from_dict:  bmn_loss_func model.bmn_loss_func
key, v, from_dict:  boundary_choose bmn_utils.boundary_choose
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unstack->paddle.unstack)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/run_squad.py has been written sucess[0m

[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bmn model.py
[1;34mStart upgrading model dygraph/bmn/model.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> bmn_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_interp1d_mask', asname=None)]
ImportFrom(module='bmn_utils', names=[alias(name='get_interp1d_mask', asname=None)], level=0)
module_name---> bmn_utils
[1;33mfunc_name.name, and module name are[0m get_interp1d_mask bmn_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  get_interp1d_mask bmn_utils.get_interp1d_mask
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv3D->paddle.fluid.dygraph.Conv3D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.square_error_cost->paddle.fluid.layers.square_error_cost)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/README_cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/README_cn.md has been written sucess[0m
[1;32mNo module named 'args', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet/utils args.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/utils/args.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None argparse
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/utils/args.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition infer.py
[1;34mStart upgrading model dygraph/ocr_recognition/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> nets
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='OCRAttention', asname=None)]
ImportFrom(module='nets', names=[alias(name='OCRAttention', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m OCRAttention nets
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None functools
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  OCRAttention nets.OCRAttention
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/infer.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/resnet train.py
[1;34mStart upgrading model dygraph/resnet/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Linear', asname=None)],
    level=0)
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/score_cer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/score_cer.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/tools/_init_paths.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/tools/_init_paths.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/tools/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/tools/__init__.py has been written sucess[0m
[1;34mStart upgrading model script/deploy_doc.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/script/deploy_doc.sh has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition utility.py
[1;34mStart upgrading model dygraph/ocr_recognition/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.create_lod_tensor->paddle.fluid.create_lod_tensor)[0m
[3;32mRestore API full name(fluid.create_lod_tensor->paddle.fluid.create_lod_tensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/utility.py has been written sucess[0m

[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/tsm model.py
[1;34mStart upgrading model dygraph/tsm/model.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.temporal_shift->paddle.fluid.layers.temporal_shift)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.temporal_shift->paddle.nn.functional.temporal_shift)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/BERT/utils init.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/utils/init.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/utils/init.py has been written sucess[0m

[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/model/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/async_data_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/async_data_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/trans_splice.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/trans_splice.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/trans_delay.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/trans_delay.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/decoder/setup.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/decoder/setup.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/model_utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/model_utils/__init__.py has been written sucess[0m
[1;32mNo module named 'data_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ocr_recognition data_reader.py
[1;34mStart upgrading model dygraph/ocr_recognition/data_reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> os
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='tarfile', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='path', asname=None)]
ImportFrom(module='os', names=[alias(name='path', asname=None)], level=0)
module_name---> os
[1;33mfunc_name.name, and module name are[0m path os
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None random
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  path os.path
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/data_reader.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/__init__.py has been written sucess[0m
[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net model_check.py
[1;34mStart upgrading model dygraph/similarity_net/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/model_check.py has been written sucess[0m

[1;32mNo module named 'gru', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets gru.py
[1;34mStart upgrading model dygraph/similarity_net/nets/gru.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m model.transformer_encoder.pre_process_layer
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  encoder model.transformer_encoder.encoder
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/model/bert.py has been written sucess[0m

[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bmn predict.py
[1;34mStart upgrading model dygraph/bmn/predict.py[0m
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> eval
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> bmn_utils
NameFrom--->: ImportFrom
module_name---> config_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BMN', asname=None)]
ImportFrom(module='model', names=[alias(name='BMN', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m BMN model
NameFrom--->: ImportFrom
[alias(name='gen_props', asname=None)]
ImportFrom(module='eval', names=[alias(name='gen_props', asname=None)], level=0)
module_name---> eval
[1;33mfunc_name.name, and module name are[0m gen_props eval
NameFrom--->: ImportFrom
[alias(name='BMNReader', asname=None)]
ImportFrom(module='reader', names=[alias(name='BMNReader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m BMNReader reader
NameFrom--->: ImportFrom
[alias(name='bmn_post_processing', asname=None)]
ImportFrom(module='bmn_utils', names=[alias(name='bmn_post_processing', asname=None)], level=0)
module_name---> bmn_utils
[1;33mfunc_name.name, and module name are[0m bmn_post_processing bmn_utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> config_utils
[1;33mfunc_name.name, and module name are[0m * config_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None json
key, v, from_dict:  bmn_post_processing bmn_utils.bmn_post_processing
key, v, from_dict:  BMNReader reader.BMNReader
key, v, from_dict:  gen_props eval.gen_props
key, v, from_dict:  * config_utils.*
key, v, from_dict:  BMN model.BMN
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/predict.py has been written sucess[0m

[1;32mNo module named 'bow', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets bow.py
[1;34mStart upgrading model dygraph/similarity_net/nets/bow.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.sin->paddle.fluid.layers.sin)[0m
[3;32mRestore API full name(fluid.layers.cos->paddle.fluid.layers.cos)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.mul->paddle.fluid.layers.mul)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.mul->paddle.fluid.layers.mul)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.range->paddle.fluid.layers.range)[0m
[3;32mRestore API full name(fluid.layers.range->paddle.fluid.layers.range)[0m
[3;32mRestore API full name(fluid.layers.range->paddle.fluid.layers.range)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.range->paddle.fluid.layers.range)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.diag->paddle.fluid.layers.diag)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None argparse
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/utils/args.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/ELMo train.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.executor
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> utils.cards
NameFrom--->: ImportFrom
module_name---> utils.init
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.core', asname='core')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='paddle.fluid.executor', names=[alias(name='Executor', asname=None)], level=0)
module_name---> paddle.fluid.executor
[1;33mfunc_name.name, and module name are[0m Executor paddle.fluid.executor
ImportName--->: Import
[alias(name='data', asname=None)]
ImportName--->: Import
[alias(name='lm_model', asname=None)]
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='args', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='get_cards', asname=None)]
ImportFrom(module='utils.cards', names=[alias(name='get_cards', asname=None)], level=0)
module_name---> utils.cards
[1;33mfunc_name.name, and module name are[0m get_cards utils.cards
NameFrom--->: ImportFrom
[alias(name='init_pretraining_params', asname=None)]
ImportFrom(module='utils.init', names=[alias(name='init_pretraining_params', asname=None)], level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_pretraining_params utils.init
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None multiprocessing
key,value import_dict:  core paddle.fluid.core
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  Executor paddle.fluid.executor.Executor
key, v, from_dict:  get_cards utils.cards.get_cards
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(core.CUDAPlace->paddle.fluid.core.CUDAPlace)[0m
[3;32mRestore API full name(core.CPUPlace->paddle.fluid.core.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.core.LoDTensor->paddle.fluid.core.LoDTensor)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.core.LoDTensor->paddle.fluid.core.LoDTensor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.optimizer.RMSPropOptimizer->paddle.fluid.optimizer.RMSPropOptimizer)[0m
[3;32mRestore API full name(layers.sums->paddle.fluid.layers.sums)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_reverse->paddle.fluid.layers.sequence_reverse)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.sums->paddle.sums)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo/bilm.py has been written sucess[0m

[1;32mNo module named 'mobilenet_v1', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet mobilenet_v1.py
[1;34mStart upgrading model dygraph/mobilenet/mobilenet_v1.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='framework', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='framework', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m framework paddle.fluid
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
key, v, from_dict:  framework paddle.fluid.framework
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/mobilenet_v1.py has been written sucess[0m

[1;32mNo module named 'paddle_layers', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets paddle_layers.py
[1;34mStart upgrading model dygraph/similarity_net/nets/paddle_layers.py[0m
NameFrom--->: ImportFrom
module_name---> functools
NameFrom--->: ImportFrom
module_name---> functools
NameFrom--->: ImportFrom init.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/ELMo/utils/init.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/utils/init.py has been written sucess[0m

[1;32mNo module named 'optimization', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleNLP/pretrain_language_models/XLNet optimization.py
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/optimization.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None re
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.polynomial_decay->paddle.fluid.layers.learning_rate_scheduler.polynomial_decay)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.noam_decay->paddle.fluid.layers.learning_rate_scheduler.noam_decay)[0m
[3;32mRestore API full name(fluid.unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/optimization.py has been written sucess[0m

[1;34mStart upgrading model dygraph/mobilenet/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'cache_word2vec', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/word2vec word2vec.py
[1;34mStart upgrading model dygraph/word2vec/word2vec.py[0m
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='requests', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn', names=[alias(name='Embedding', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.linear_chain_crf->paddle.fluid.layers.linear_chain_crf)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.crf_decoding->paddle.fluid.layers.crf_decoding)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/LAC_demo/network.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bmn/bmn_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/bmn_utils.py has been written sucess[0m
[1;34mStart upgrading model dygraph/bmn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bmn train.py
[1;34mStart upgrading model dygraph/bmn/train.py[0m
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> config_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BMN', asname=None), alias(name='bmn_loss_func', asname=None)]
ImportFrom(module='model', names=[alias(name='BMN', asname=None), alias(name='bmn_loss_func', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m BMN model
[1;33mfunc_name.name, and module name are[0m bmn_loss_func model
NameFrom--->: ImportFrom
[alias(name='BMNReader', asname=None)]
ImportFrom(module='reader', names=[alias(name='BMNReader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m BMNReader reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> config_utils
[1;33mfunc_name.name, and module name are[0m * config_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  bmn_loss_func model.bmn_loss_func
key, v, from_dict:  * config_utils.*
key, v, from_dict:  BMNReader reader.BMNReader
key, v, from_dict:  BMN model.BMN
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m[1;33mfunc_name.name, and module name are[0m get_cards utils.cards
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  reader reader.cls
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  pearsonr scipy.stats.pearsonr
key, v, from_dict:  XLNetConfig model.xlnet.XLNetConfig
key, v, from_dict:  optimization optimization.optimization
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  init_checkpoint utils.init.init_checkpoint
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  check_cuda utils.args.check_cuda
key, v, from_dict:  create_model model.classifier.create_model
key, v, from_dict:  get_cards utils.cards.get_cards
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/run_classifier.py has been written sucess[0m

[1;32mNo module named 'mm_dnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets mm_dnn.py
[1;34mStart upgrading model dygraph/similarity_net/nets/mm_dnn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Linear', asname=None),
    alias(name='to_variable', asname=None),
    alias(name='Layer', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='Conv2D', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Linear', asname=None),
        alias(name='to_variable', asname=None),
        alias(name='Layer', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='Conv2D', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph
ImportName--->: Import
[alias(name='paddle_layers', asname='pd_layers')]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
key,value import_dict:  pd_layers paddle_layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  Pool2D paddle.fluid.dygraph.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.Conv2D
[3;32mRestore API full name(pd_layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(pd_layers.DynamicLSTMLayer->paddle_layers.DynamicLSTMLayer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(pd_layers.DynamicLSTMLayer->paddle_layers.DynamicLSTMLayer)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.Pool2D)[0m
[3;32mRestore API full name(pd_layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(pd_layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sums->paddle.sums)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/reading_comprehension/bidaf_model.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/reader.py has been written sucess[0m
[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net run_classifier.py
[1;34mStart upgrading model dygraph/similarity_net/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> model_check
NameFrom--->: ImportFrom
module_name---> model_check
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='config', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='nets.paddle_layers', asname='layers')]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ArgConfig', asname=None)]
ImportFrom(module='utils', names=[alias(name='ArgConfig', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m ArgConfig utils
NameFrom--->: ImportFrom
[alias(name='load_dygraph', asname=None)]
ImportFrom(module='utils', names=[alias(name='load_dygraph', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m load_dygraph utils
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_version', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_version model_check
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='model_check', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> model_check
[1;33mfunc_name.name, and module name are[0m check_cuda model_check
key,value import_dict:  layers nets.paddle_layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  load_dygraph utils.load_dygraph
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ArgConfig utils.ArgConfig
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda model_check.check_cuda
key, v, from_dict:  check_version model_check.check_version
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.SGDOptimizer->paddle.fluid.optimizer.SGDOptimizer)[0m
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  write_predictions reader.squad.write_predictions
key, v, from_dict:  XLNetConfig model.xlnet.XLNetConfig
key, v, from_dict:  optimization optimization.optimization
key, v, from_dict:  print_arguments utils.args.print_arguments
key, v, from_dict:  XLNetModel model.xlnet.XLNetModel
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  init_checkpoint utils.init.init_checkpoint
key, v, from_dict:  init_pretraining_params utils.init.init_pretraining_params
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  log_softmax modeling.log_softmax
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/model.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/sentiment reader.py
[1;34mStart upgrading model dygraph/sentiment/reader.py[0m
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='load_vocab', asname=None)]
ImportFrom(module='utils', names=[alias(name='load_vocab', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m load_vocab utils
NameFrom--->: ImportFrom
[alias(name='data_reader', asname=None)]
ImportFrom(module='utils', names=[alias(name='data_reader', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m data_reader utils
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  load_vocab utils.load_vocab
key, v, from_dict:  data_reader utils.data_reader
NameFrom--->: ImportFrom
module_name---> paddle.fluid.wrapped_decorator
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
ImportName--->: Import
[alias(name='signal', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='signature_safe_contextmanager', asname=None)]
ImportFrom(module='paddle.fluid.wrapped_decorator',
    names=[alias(name='signature_safe_contextmanager', asname=None)],
    level=0)
module_name---> paddle.fluid.wrapped_decorator
[1;33mfunc_name.name, and module name are[0m signature_safe_contextmanager paddle.fluid.wrapped_decorator
NameFrom--->: ImportFrom
[alias(name='Program', asname=None),
    alias(name='program_guard', asname=None),
    alias(name='name_scope', asname=None),
    alias(name='default_main_program', asname=None)]
ImportFrom(module='paddle.fluid.framework',
    names=[alias(name='Program', asname=None),
        alias(name='program_guard', asname=None),
        alias(name='name_scope', asname=None),
        alias(name='default_main_program', asname=None)],
    level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Program paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m program_guard paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m name_scope paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m default_main_program paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='unique_name', asname=None), alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid',
    names=[alias(name='unique_name', asname=None), alias(name='layers', asname=None)],
    level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m unique_name paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='dist_utils', asname=None)]
ImportFrom(module='utils', names=[alias(name='dist_utils', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m dist_utils utils
ImportName--->: Import
[alias(name='models', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  Program paddle.fluid.framework.Program
key, v, from_dict:  signature_safe_contextmanager paddle.fluid.wrapped_decorator.signature_safe_contextmanager
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  name_scope paddle.fluid.framework.name_scope
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  default_main_program paddle.fluid.framework.default_main_program
key, v, from_dict:  dist_utils utils.dist_utils
key, v, from_dict:  unique_name paddle.fluid.unique_name
key, v, from_dict:  program_guard paddle.fluid.framework.program_guard
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[3;32mRestore API full name(unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[3;32mRestore API full name(layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(layers.elementwise_pow->paddle.fluid.layers.elementwise_pow)[0m
[3;32mRestore API full name(unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_mean_variance_norm', asname='trans_mean_variance_norm')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_add_delta', asname='trans_add_delta')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_splice', asname='trans_splice')]
ImportName--->: Import
[alias(name='data_utils.augmentor.trans_delay', asname='trans_delay')]
ImportName--->: Import
[alias(name='data_utils.async_data_reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='stacked_lstmp_model', asname=None)]
ImportFrom(module='model_utils.model', names=[alias(name='stacked_lstmp_model', asname=None)], level=0)
module_name---> model_utils.model
[1;33mfunc_name.name, and module name are[0m stacked_lstmp_model model_utils.model
key,value import_dict:  reader data_utils.async_data_reader
key,value import_dict:  None time
key,value import_dict:  trans_add_delta data_utils.augmentor.trans_add_delta
key,value import_dict:  trans_delay data_utils.augmentor.trans_delay
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  trans_mean_variance_norm data_utils.augmentor.trans_mean_variance_norm
key,value import_dict:  trans_splice data_utils.augmentor.trans_splice
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  stacked_lstmp_model model_utils.model.stacked_lstmp_model
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/train.py has been written sucess[0m

[1;34mStart upgrading model dygraph/seq2seq/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/args.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/seq2seq infer.py
[1;34mStart upgrading model dygraph/seq2seq/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> attention_model
NameFrom--->: ImportFrom
module_name---> base_model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='AttentionModel', asname=None)]
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(DataLoader->paddle.io.DataLoader)[0m
[3;32mRestore API full name(DataLoader->paddle.io.DataLoader)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/train.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/downloads.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/downloads.py has been written sucess[0m
[1;34mStart upgrading model dygraph/lac/predict.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/predict.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/lac/eval.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/eval.sh has been written sucess[0m
[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac predict.py
[1;34mStart upgrading model dygraph/lac/predict.py[0m
NameFrom--->: ImportFrom
module_name---> sequence_labeling
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)]
ImportFrom(module='sequence_labeling',
    names=[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)],
    level=0)
module_name---> sequence_labeling
[1;33mfunc_name.name, and module name are[0m lex_net sequence_labeling
[1;33mfunc_name.name, and module name are[0m Chunk_eval sequence_labeling
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  Chunk_eval sequence_labeling.Chunk_eval
key, v, from_dict:  lex_net sequence_labeling.lex_net
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/predict.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/downloads.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/downloads.sh has been written sucess[0m
[1;32mNo module named 'rnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/seq2seq rnn.py
[1;34mStart upgrading model dygraph/seq2seq/rnn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Layer', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='Layer', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
key,value import_dict:  None paddle
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='inspect', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
NameFrom--->: ImportFrom
[alias(name='reduce', asname=None)]
ImportFrom(module='functools', names=[alias(name='reduce', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m reduce functools
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
ImportName--->: Import
[alias(name='paddle.fluid.param_attr', asname='attr')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.utils', asname='utils')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None),
    alias(name='Conv2D', asname=None),
    alias(name='GRUUnit', asname=None),
    alias(name='Layer', asname=None),
    alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Embedding', asname=None),
        alias(name='Conv2D', asname=None),
        alias(name='GRUUnit', asname=None),
        alias(name='Layer', asname=None),
        alias(name='to_variable', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m GRUUnit paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='map_structure', asname=None),
    alias(name='flatten', asname=None),
    alias(name='pack_sequence_as', asname=None)]
ImportFrom(module='paddle.fluid.layers.utils',
    names=[alias(name='map_structure', asname=None),
        alias(name='flatten', asname=None),
        alias(name='pack_sequence_as', asname=None)],
    level=0)
module_name---> paddle.fluid.layers.utils
[1;33mfunc_name.name, and module name are[0m map_structure paddle.fluid.layers.utils
[1;33mfunc_name.name, and module name are[0m flatten paddle.fluid.layers.utils
[1;33mfunc_name.name, and module name are[0m pack_sequence_as paddle.fluid.layers.utils
key,value import_dict:  attr paddle.fluid.param_attr
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  utils paddle.fluid.layers.utils
key, v, from_dict:  Embedding paddle.fluid.dygraph.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  flatten paddle.fluid.layers.utils.flatten
key, v, from_dict:  GRUUnit paddle.fluid.dygraph.GRUUnit
key, v, from_dict:  reduce functools.reduce
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  pack_sequence_as paddle.fluid.layers.utils.pack_sequence_as
key, v, from_dict:  partial functools.partial
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  Conv2D paddle.fluid.dygraph.Conv2D
key, v, from_dict:  map_structure paddle.fluid.layers.utils.map_structure
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.elementwise_max->paddle.fluid.layers.elementwise_max)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.softsign->paddle.fluid.layers.softsign)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(GRUUnit->paddle.fluid.dygraph.GRUUnit)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(flatten->paddle.fluid.layers.utils.flatten)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(flatten->paddle.fluid.layers.utils.flatten)[0m
[3;32mRestore API full name(flatten->paddle.fluid.layers.utils.flatten)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(fluid.layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.in_dygraph_mode->paddle.fluid.in_dygraph_mode)[0m
[3;32mRestore API full name(transforms.Normalize->paddle.incubate.hapi.vision.transforms.transforms.Normalize)[0m
[3;32mRestore API full name(transforms.RandomResizedCrop->paddle.incubate.hapi.vision.transforms.transforms.RandomResizedCrop)[0m
[3;32mRestore API full name(transforms.RandomHorizontalFlip->paddle.incubate.hapi.vision.transforms.transforms.RandomHorizontalFlip)[0m
[3;32mRestore API full name(transforms.Permute->paddle.incubate.hapi.vision.transforms.transforms.Permute)[0m
[3;32mRestore API full name(transforms.Compose->paddle.incubate.hapi.vision.transforms.transforms.Compose)[0m
[3;32mRestore API full name(transforms.Resize->paddle.incubate.hapi.vision.transforms.transforms.Resize)[0m
[3;32mRestore API full name(transforms.CenterCrop->paddle.incubate.hapi.vision.transforms.transforms.CenterCrop)[0m
[3;32mRestore API full name(transforms.Permute->paddle.incubate.hapi.vision.transforms.transforms.Permute)[0m
[3;32mRestore API full name(transforms.Compose->paddle.incubate.hapi.vision.transforms.transforms.Compose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/imagenet_dataset.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/download.py has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/run.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/download_data.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/evaluate_ecom.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/evaluate_ecom.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/unicom_compute_pos_neg.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/unicom_compute_pos_neg.py has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/unicom_split.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/unicom_split.py has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/evaluate_qqsim.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/evaluate_qqsim.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/evaluate_zhidao.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/evaluate_zhidao.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/evaluate/evaluate_unicom.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/evaluate/evaluate_unicom.sh has been written sucess[0m
[1;32mNo module named 'cnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets cnn.py
[1;34mStart upgrading model dygraph/similarity_net/nets/cnn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='Layer', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='Layer', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.SimpleConvPool->paddle_layers.SimpleConvPool)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/cnn.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac eval.py
[1;34mStart upgrading model dygraph/lac/eval.py[0m
NameFrom--->: ImportFrom
module_name---> sequence_labeling
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)]
ImportFrom(module='sequence_labeling',
    names=[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)],
    level=0)
module_name---> sequence_labeling
[1;33mfunc_name.name, and module name are[0m lex_net sequence_labeling
[1;33mfunc_name.name, and module name are[0m Chunk_eval sequence_labeling
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  Chunk_eval sequence_labeling.Chunk_eval
key, v, from_dict:  lex_net sequence_labeling.lex_net
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/eval.py has been written sucess[0m

[1;34mStart upgrading model dygraph/ptb_lm/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/reader.py has been written sucess[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.fill_constant_batch_size_like->paddle.fluid.layers.fill_constant_batch_size_like)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(fluid.layers.logical_not->paddle.fluid.layers.logical_not)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.softmax_cross_entropy_with_logits->paddle.fluid.layers.softmax_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.mul)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.mul)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.range)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.range)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.range)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.range)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sin->paddle.tensor.sin)[0m
[1;33mUpgrade API (paddle.fluid.layers.cos->paddle.cos)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mul->paddle.tensor.mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.mul->paddle.tensor.mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(GRUUnit->paddle.fluid.dygraph.nn.GRUUnit)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.framework.in_dygraph_mode->paddle.fluid.framework.in_dygraph_mode)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(GRUUnit->paddle.fluid.dygraph.nn.GRUUnit)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.framework.in_dygraph_mode->paddle.in_imperative_mode)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/nets.py has been written sucess[0m

[1;32mNo module named 'test_reinforce_load', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/reinforcement_learning test_reinforce_load.py
[1;34mStart upgrading model dygraph/reinforcement_learning/test_reinforce_load.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='gym', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='count', asname=None)]
ImportFrom(module='itertools', names=[alias(name='count', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m count itertools
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
key,value import_dict: 
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='framework', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='framework', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m framework paddle.fluid
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
key, v, from_dict:  framework paddle.fluid.framework
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.relu6->paddle.fluid.layers.relu6)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu6->paddle.nn.functional.relu6)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/mobilenet_v2.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/run.sh has been written sucess[0m
[1;32mNo module named 'sequence_labeling', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac sequence_labeling.py
[1;34mStart upgrading model dygraph/lac/sequence_labeling.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='NormalInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='NormalInitializer', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NormalInitializer paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None), alias(name='Linear', asname=None), alias(name='GRUUnit', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Embedding', asname=None), alias(name='Linear', asname=None), alias(name='GRUUnit', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m GRUUnit paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  NormalInitializer paddle.fluid.initializer.NormalInitializer
key, v, from_dict:  GRUUnit paddle.fluid.dygraph.nn.GRUUnit
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
[3;32mRestore API full name(GRUUnit->paddle.fluid.dygraph.nn.GRUUnit)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m ImportFrom
module_name---> paddle.fluid.dygraph
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='Layer', asname=None), alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Layer', asname=None), alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
ImportName--->: Import
[alias(name='paddle.fluid.param_attr', asname='attr')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  attr paddle.fluid.param_attr
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.SoftsignLayer->paddle_layers.SoftsignLayer)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/bow.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/conf/ernie_args.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/conf/ernie_args.yaml has been written sucess[0m
[1;34mStart upgrading model dygraph/seq2seq/infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/infer.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/seq2seq/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/run.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/seq2seq train.py
[1;34mStart upgrading model dygraph/seq2seq/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.clip
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> base_model
NameFrom--->: ImportFrom
module_name---> attention_model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='GradientClipByGlobalNorm', asname=None)]
ImportFrom(module='paddle.fluid.clip', names=[alias(name='GradientClipByGlobalNorm', asname=None)], level=0)
module_name---> paddle.fluid.clip
[1;33mfunc_name.name, and module name are[0m GradientClipByGlobalNorm paddle.fluid.clip
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
NameFrom--->: ImportFrom
[alias(name='BaseModel', asname=None)]
ImportFrom(module='base_model', names=[alias(name='BaseModel', asname=None)], level=0)
module_name---> base_model
[1;33mfunc_name.name, and module name are[0m BaseModel base_model
NameFrom--->: ImportFrom
[alias(name='AttentionModel', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='AttentionModel', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m AttentionModel attention_model
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BaseModel base_model.BaseModel
key, v, from_dict:  AttentionModel attention_model.AttentionModel
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  GradientClipByGlobalNorm paddle.fluid.clip.GradientClipByGlobalNorm
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.layers.polynomial_decay->paddle.fluid.layers.polynomial_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.cosine_decay->paddle.fluid.layers.cosine_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cosine_decay->paddle.nn.functional.cosine_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.polynomial_decay->paddle.nn.functional.polynomial_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.cosine_decay->paddle.nn.functional.cosine_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/utils/optimizer.py has been written sucess[0m

[1;32mNo module named 'lstm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets lstm.py
[1;34mStart upgrading model dygraph/similarity_net/nets/lstm.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle_layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='Layer', asname=None), alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Layer', asname=None), alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
key,value import_dict:  layers paddle_layers
key,value import_dict:  None paddle
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.DynamicLSTMLayer->paddle_layers.DynamicLSTMLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/lstm.py has been written sucess[0m

[1;32mNo module named 'attention_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/seq2seq attention_model.py
[1;34mStart upgrading model dygraph/seq2seq/attention_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> rnn
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn', names=[alias(name='Linear', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='Layer', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='Layer', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  layers paddle_layers
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
[3;32mRestore API full name(layers.EmbeddingLayer->paddle_layers.EmbeddingLayer)[0m
[3;32mRestore API full name(layers.DynamicGRULayer->paddle_layers.DynamicGRULayer)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(layers.FCLayer->paddle_layers.FCLayer)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(layers.CosSimLayer->paddle_layers.CosSimLayer)[0m
[3;32mRestore API full name(layers.ConcatLayer->paddle_layers.ConcatLayer)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/gru.py has been written sucess[0m

[1;34mStart upgrading model dygraph/seq2seq/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/README.md has been written sucess[0m
[1;32mNo module named 'base_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/seq2seq base_model.py
[1;34mStart upgrading model dygraph/seq2seq/base_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> rnn
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None), alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Embedding', asname=None), alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='BasicLSTMUnit', asname=None)]
ImportFrom(module='rnn', names=[alias(name='BasicLSTMUnit', asname=None)], level=0)
module_name---> rnn
[1;33mfunc_name.name, and module name are[0m BasicLSTMUnit rnn
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BasicLSTMUnit rnn.BasicLSTMUnit
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='TSM_ResNet', asname=None)]
ImportFrom(module='model', names=[alias(name='TSM_ResNet', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m TSM_ResNet model
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> config_utils
[1;33mfunc_name.name, and module name are[0m * config_utils
NameFrom--->: ImportFrom
[alias(name='KineticsReader', asname=None)]
ImportFrom(module='reader', names=[alias(name='KineticsReader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m KineticsReader reader
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  TSM_ResNet model.TSM_ResNet
key, v, from_dict:  KineticsReader reader.KineticsReader
key, v, from_dict:  * config_utils.*
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/eval.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/nets/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/__init__.py has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/nets/losses/hinge_loss.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/losses/hinge_loss.py has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/nets/losses/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/losses/__init__.py has been written sucess[0m
[1;34mStart upgrading model dygraph/reinforcement_learning/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/reinforcement_learning/README.md has been written sucess[0m
[1;32mNo module named 'reinforce', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/reinforcement_learning reinforce.py
[1;34mStart upgrading model dygraph/reinforcement_learning/reinforce.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='gym', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='count', asname=None)]
ImportFrom(module='itertools', names=[alias(name='count', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m count itertools
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  count itertools.count
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/language_model/lm_model.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac utils.py
[1;34mStart upgrading model dygraph/lac/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='yaml', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/utils.py has been written sucess[0m

[1;34mStart upgrading model dygraph/yolov3/data_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/data_utils.py has been written sucess[0m
[1;34mStart upgrading model dygraph/yolov3/edict.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/edict.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 infer.py
[1;34mStart upgrading model dygraph/yolov3/infer.py[0m
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> models.yolov3
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> pycocotools.coco
NameFrom--->: ImportFrom
module_name---> pycocotools.cocoeval
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='box_utils', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None),
    alias(name='parse_args', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='print_arguments', asname=None),
        alias(name='parse_args', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.layer_norm->paddle.fluid.layers.layer_norm)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/model/transformer_encoder.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/tsm reader.py
[1;34mStart upgrading model dygraph/tsm/reader.py[0m
NameFrom--->: ImportFrom
module_name---> cStringIO
NameFrom--->: ImportFrom
module_name---> io
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
NameFrom--->: ImportFrom
[alias(name='StringIO', asname=None)]
ImportFrom(module='cStringIO', names=[alias(name='StringIO', asname=None)], level=0)
module_name---> cStringIO
[1;33mfunc_name.name, and module name are[0m StringIO cStringIO
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BytesIO', asname=None)]
ImportFrom(module='io', names=[alias(name='BytesIO', asname=None)], level=0)
module_name---> io
[1;33mfunc_name.name, and module name are[0m BytesIO io
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  pickle cPickle
key,value import_dict:  None logging
key,value import_dict:  np numpy
key, v, from_dict:  StringIO cStringIO.StringIO
key, v, from_dict:  BytesIO io.BytesIO
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/reader.py has been written sucess[0m

[1;34mStart upgrading model dygraph/yolov3/box_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/box_utils.py has been written sucess[0m
[1;34mStart upgrading model dygraph/yolov3/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/config.py has been written sucess[0m
[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 dist_utils.py
[1;34mStart upgrading model dygraph/yolov3/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/model.py has been written sucess[0m

[1;32mNo module named 'test_actor_critic_load', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/reinforcement_learning test_actor_critic_load.py
[1;34mStart upgrading model dygraph/reinforcement_learning/test_actor_critic_load.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='gym', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='count', asname=None)]
ImportFrom(module='itertools', names=[alias(name='count', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m count itertools
NameFrom--->: ImportFrom
[alias(name='namedtuple', asname=None)]
ImportFrom(module='collections', names=[alias(name='namedtuple', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m namedtuple collections
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  count itertools.count
key, v, from_dict:  namedtuple collections.namedtuple
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/reinforcement_learning/test_actor_critic_load.py has been written sucess[0m

[1;34mStart upgrading model dygraph/cycle_gan/test.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  None paddle
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/test.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan train.py
[1;34mStart upgrading model dygraph/cycle_gan/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> scipy.misc
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> trainer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m

[1;34mStart upgrading model dygraph/tsm/config_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/config_utils.py has been written sucess[0m
[1;34mStart upgrading model dygraph/tsm/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/run.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/tsm train.py
[1;34mStart upgrading model dygraph/tsm/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> config_utils
NameFrom--->: ImportFrom
module_name---> reader
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='TSM_ResNet', asname=None)]
ImportFrom(module='model', names=[alias(name='TSM_ResNet', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m TSM_ResNet model
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> config_utils
[1;33mfunc_name.name, and module name are[0m * config_utils
NameFrom--->: ImportFrom
[alias(name='KineticsReader', asname=None)]
ImportFrom(module='reader', names=[alias(name='KineticsReader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m KineticsReader reader
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  TSM_ResNet model.TSM_ResNet
key, v, from_dict:  KineticsReader reader.KineticsReader
key, v, from_dict:  * config_utils.*
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/tsm/train.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 train.py
[1;34mStart upgrading model dygraph/yolov3/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> models.yolov3
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
NameFrom--->: 
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m get_attention_feeder_data utility
NameFrom--->: ImportFrom
[alias(name='OCRAttention', asname=None)]
ImportFrom(module='nets', names=[alias(name='OCRAttention', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m OCRAttention nets
NameFrom--->: ImportFrom
[alias(name='evaluate', asname=None)]
ImportFrom(module='eval', names=[alias(name='evaluate', asname=None)], level=0)
module_name---> eval
[1;33mfunc_name.name, and module name are[0m evaluate eval
key,value import_dict:  profiler paddle.fluid.profiler
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None functools
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  evaluate eval.evaluate
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  get_attention_feeder_data utility.get_attention_feeder_data
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  OCRAttention nets.OCRAttention
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.BackwardStrategy->paddle.fluid.dygraph.BackwardStrategy)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(profiler.cuda_profiler->paddle.fluid.profiler.cuda_profiler)[0m
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ocr_recognition/train.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/nets/losses/log_loss.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/losses/log_loss.py has been written sucess[0m
[1;32mNo module named 'softmax_cross_entropy_loss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net/nets/losses softmax_cross_entropy_loss.py
[1;34mStart upgrading model dygraph/similarity_net/nets/losses/softmax_cross_entropy_loss.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='nets.paddle_layers', asname='layers')]
key,value import_dict:  layers nets.paddle_layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
[3;32mRestore API full name(layers.ReduceMeanLayer->nets.paddle_layers.ReduceMeanLayer)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/losses/softmax_cross_entropy_loss.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/README.md has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac reader.py
[1;34mStart upgrading model dygraph/lac/reader.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='__future__', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='glob', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None glob
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/reader.py has been written sucess[0m

[1;34mStart upgrading model dygraph/yolov3/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/models/__init__.py has been written sucess[0m
[1;34mStart upgrading model dygraph/yolov3/weights/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/weights/download.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/run_classifier_predict.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/run_classifier_predict.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/batching.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/batching.py has been written sucess[0m
[1;32mNo module named 'cache_bert', so we use another strategy to dynamically import module[0m
-->module name and package name:
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/utils/init.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bmn/eval_anet_prop.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/eval_anet_prop.py has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet reader.py
[1;34mStart upgrading model dygraph/mobilenet/reader.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> utils.autoaugment
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='ImageNetPolicy', asname=None)]
ImportFrom(module='utils.autoaugment', names=[alias(name='ImageNetPolicy', asname=None)], level=0)
module_name---> utils.autoaugment
[1;33mfunc_name.name, and module name are[0m ImageNetPolicy utils.autoaugment
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  ImageNetPolicy utils.autoaugment.ImageNetPolicy
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/reader.py has been written sucess[0m

[1;32mNo module named 'actor_critic', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/reinforcement_learning actor_critic.py
[1;34mStart upgrading model dygraph/reinforcement_learning/actor_critic.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='gym', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='count', asname=None)]
ImportFrom(module='itertools', names=[alias(name='count', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m count itertools
NameFrom--->: ImportFrom
[alias(name='namedtuple', asname=None)]
ImportFrom(module='collections', names=[alias(name='namedtuple', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m namedtuple collections
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  count itertools.count
key, v, from_dict:  namedtuple collections.namedtuple
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/reinforcement_learning/actor_critic.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/shared_modules/models/neural_machine_translation/transformer/desc.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/neural_machine_translation/transformer/desc.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/dialogue_domain_classification/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_domain_classification/run.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/test_local_dist.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/test_local_dist.sh has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/BERT/utils/cards.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/BERT/utils/cards.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/data_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/data_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleNLP/pretrain_language_models/XLNet/reader/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/reader/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/score_error_rate.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/score_error_rate.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/trans_add_delta.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/trans_add_delta.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/data_utils/augmentor/tests/test_data_trans.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/data_utils/augmentor/tests/test_data_trans.py has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/download_pretrained_model.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/download_pretrained_model.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/examples/aishell/infer_by_ckpt.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/examples/aishell/infer_by_ckpt.sh has been written sucess[0m
[1;34mStart upgrading model PaddleSpeech/DeepASR/tools/profile.py[0m
NameFrom--->: ImportFrom
module_name---> optparse
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='marshal', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OptionParser', asname=None)]
ImportFrom(module='optparse', names=[alias(name='OptionParser', asname=None)], level=0)
module_name---> optparse
[1;33mfunc_name.name, and module name are[0m OptionParser optparse
ImportName--->: Import
[alias(name='pstats', asname=None)]
ImportName--->: Import
[alias(name='__main__', asname=None)]
key,value import_dict:  None __main__
key, v, from_dict:  OptionParser optparse.OptionParser
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/tools/profile.py has been written sucess[0m

[1;34mStart upgrading model dygraph/ptb_lm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/ptb_lm/debug.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/debug.sh has been written sucess[0m
[1;32mNo module named 'ptb_d', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ptb_lm ptb_dy.py
[1;34mStart upgrading model dygraph/ptb_lm/ptb_dy.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.optimizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.core', asname='core')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn', names=[alias(name='Embedding', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='SGDOptimizer', asname=None)]
ImportFrom(module='paddle.fluid.optimizer', names=[alias(name='SGDOptimizer', asname=None)], level=0)
module_name---> paddle.fluid.optimizer
[1;33mfunc_name.name, and module name are[0m SGDOptimizer paddle.fluid.optimizer
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='model_check', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None sys
key,value import_dict:  core paddle.fluid.core
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  SGDOptimizer paddle.fluid.optimizer.SGDOptimizer
key, v, from_dict:  * args.*
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='framework', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='framework', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m framework paddle.fluid
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  framework paddle.fluid.framework
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(fluid.in_dygraph_mode->paddle.fluid.in_dygraph_mode)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/resnet/train.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bert/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/README.md has been written sucess[0m
[1;32mNo module named 'optimization', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert optimization.py
[1;34mStart upgrading model dygraph/bert/optimization.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.learning_rate_scheduler
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.label_smooth->paddle.nn.functional.label_smooth)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search->paddle.nn.beam_search)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_not->paddle.logical_not)[0m
[1;33mUpgrade API (paddle.fluid.layers.is_empty->paddle.is_empty)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search_decode->paddle.nn.beam_search_decode)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/shared_modules/models/neural_machine_translation/transformer/model.py has been written sucess[0m

[1;32mNo module named 'trainer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan trainer.py
[1;34mStart upgrading model dygraph/cycle_gan/trainer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='model', names=[alias(name='*', asname=None)], level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m * model
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * model.*
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;34mStart upgrading model dygraph/resnet/reader.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/resnet/reader.py has been written sucess[0m

[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan utility.py
[1;34mStart upgrading model dygraph/cycle_gan/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='glob', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
key,value import_dict:  np numpy
key,value import_dict:  None glob
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  core paddle.fluid.core
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/utility.py has been written sucess[0m

[1;32mNo module named 'cache_yolov3', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3/models yolov3.py
[1;34mStart upgrading model dygraph/yolov3/models/yolov3.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.regularizer
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> darknet
NameFrom--->: ImportFrom
module_name---> darknet
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 2 [0m
insert paddle into 3
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Normal', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='L2Decay', asname=None)]
ImportFrom(module='paddle.fluid.regularizer', names=[alias(name='L2Decay', asname=None)], level=0)
module_name---> paddle.fluid.regularizer
[1;33mfunc_name.name, and module name are[0m L2Decay paddle.fluid.regularizer
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None), alias(name='BatchNorm', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None), alias(name='BatchNorm', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='DarkNet53_conv_body', asname=None)]
ImportFrom(module='darknet', names=[alias(name='DarkNet53_conv_body', asname=None)], level=1)
module_name---> darknet
[1;33mfunc_name.name, and module name are[0m DarkNet53_conv_body darknet
NameFrom--->: ImportFrom
[alias(name='ConvBNLayer', asname=None)]
ImportFrom(module='darknet', names=[alias(name='ConvBNLayer', asname=None)], level=1)
module_name---> darknet
[1;33mfunc_name.name, and module name are[0m ConvBNLayer darknet
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict: 
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/run_squad.py has been written sucess[0m

[1;32mNo module named 'run_classifier', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert run_classifier.py
[1;34mStart upgrading model dygraph/bert/run_classifier.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> model.bert
NameFrom--->: ImportFrom
module_name---> model.cls
NameFrom--->: ImportFrom
module_name---> optimization
NameFrom--->: ImportFrom
module_name---> utils.args
NameFrom--->: ImportFrom
module_name---> utils.init
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
ImportName--->: Import
[alias(name='reader.cls', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='BertConfig', asname=None)]
ImportFrom(module='model.bert', names=[alias(name='BertConfig', asname=None)], level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertConfig model.bert
NameFrom--->: ImportFrom
[alias(name='ClsModelLayer', asname=None)]
ImportFrom(module='model.cls', names=[alias(name='ClsModelLayer', asname=None)], level=0)
module_name---> model.cls
[1;33mfunc_name.name, and module name are[0m ClsModelLayer model.cls
NameFrom--->: ImportFrom
[alias(name='Optimizer', asname=None)]
ImportFrom(module='optimization', names=[alias(name='Optimizer', asname=None)], level=0)
module_name---> optimization
[1;33mfunc_name.name, and module name are[0m Optimizer optimization
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.args',
    names=[alias(name='ArgumentGroup', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_pow->paddle.elementwise_pow)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/utils/utility.py has been written sucess[0m

[1;34mStart upgrading model dygraph/cycle_gan/generate_txt.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/generate_txt.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan infer.py
[1;34mStart upgrading model dygraph/cycle_gan/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> scipy.misc
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> trainer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='glob', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='imsave', asname=None)]
ImportFrom(module='scipy.misc', names=[alias(name='imsave', asname=None)], level=0)
module_name---> scipy.misc
[1;33mfunc_name.name, and module name are[0m imsave scipy.misc
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
ImportName--->: Import
[alias(name='data_reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='ImagePool', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='ImagePool', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m ImagePool utility
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='trainer', names=[alias(name='*', asname=None)], level=0)
module_name---> trainer
[1;33mfunc_name.name, and module name are[0m * trainer
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  core paddle.fluid.core
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ImagePool utility.ImagePool
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  imsave scipy.misc.imsave
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  * trainer.*
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/infer.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bert/run_classifier_multi_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/run_classifier_multi_gpu.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/utils/convert_static_to_dygraph.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/convert_static_to_dygraph.py has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/reader/cls.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/reader/cls.py has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/reader/squad.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/reader/squad.py has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/reader/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/reader/__init__.py has been written sucess[0m
[1;34mStart upgrading model dygraph/transformer/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/README.md has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.range->paddle.tensor.arange)[0m
[1;33mUpgrade API (paddle.fluid.layers.range->paddle.tensor.arange)[0m
[1;33mUpgrade API (paddle.fluid.layers.range->paddle.tensor.arange)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.range->paddle.tensor.arange)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.diag->paddle.diag)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_not->paddle.logical_not)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/XLNet/modeling.py has been written sucess[0m

[1;32mNo module named 'transformer_encoder', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/model transformer_encoder.py
[1;34mStart upgrading model dygraph/bert/model/transformer_encoder.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None),
    alias(name='LayerNorm', asname=None),
    alias(name='Linear', asname=None),
    alias(name='Layer', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Embedding', asname=None),
        alias(name='LayerNorm', asname=None),
        alias(name='Linear', asname=None),
        alias(name='Layer', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m LayerNorm paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.Embedding
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  LayerNorm paddle.fluid.dygraph.LayerNorm
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/eval.py has been written sucess[0m

[1;34mStart upgrading model dygraph/lac/conf/args.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/conf/args.yaml has been written sucess[0m
[1;34mStart upgrading model dygraph/seq2seq/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/reader.py has been written sucess[0m
[1;34mStart upgrading model dygraph/seq2seq/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/download.py has been written sucess[0m
[1;34mStart upgrading model dygraph/seq2seq/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/__init__.py has been written sucess[0m
[1;34mStart upgrading model dygraph/sentiment/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/sentiment/README.md has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/sentiment nets.py
[1;34mStart upgrading model dygraph/sentiment/nets.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='Linear', asname=None),
    alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='Linear', asname=None),
        alias(name='Embedding', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='GRUUnit', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='GRUUnit', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m GRUUnit paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  GRUUnit paddle.fluid.dygraph.GRUUnit
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(GRUUnit->paddle.fluid.dygraph.GRUUnit)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/word2vec/word2vec.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 eval.py
[1;34mStart upgrading model dygraph/yolov3/eval.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> models.yolov3
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> pycocotools.coco
NameFrom--->: ImportFrom
module_name---> pycocotools.cocoeval
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='YOLOv3', asname=None)]
ImportFrom(module='models.yolov3', names=[alias(name='YOLOv3', asname=None)], level=0)
module_name---> models.yolov3
[1;33mfunc_name.name, and module name are[0m YOLOv3 models.yolov3
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None),
    alias(name='parse_args', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='print_arguments', asname=None),
        alias(name='parse_args', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
NameFrom--->: ImportFrom
[alias(name='COCO', asname=None)]
ImportFrom(module='pycocotools.coco', names=[alias(name='COCO', asname=None)], level=0)
module_name---> pycocotools.coco
[1;33mfunc_name.name, and module name are[0m COCO pycocotools.coco
NameFrom--->: ImportFrom
[alias(name='COCOeval', asname=None), alias(name='Params', asname=None)]
ImportFrom(module='pycocotools.cocoeval',
    names=[alias(name='COCOeval', asname=None), alias(name='Params', asname=None)],
    level=0)
module_name---> pycocotools.cocoeval
[1;33mfunc_name.name, and module name are[0m COCOeval pycocotools.cocoeval
[1;33mfunc_name.name, and module name are[0m Params pycocotools.cocoeval
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  COCOeval pycocotools.cocoeval.COCOeval
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  COCO pycocotools.coco.COCO
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  Params pycocotools.cocoeval.Params
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  YOLOv3 models.yolov3.YOLOv3
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/eval.py has been written sucess[0m

[1;34mStart upgrading model dygraph/transformer/transformer.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/transformer.yaml has been written sucess[0m
[1;32mNo module named 'check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer/utilsdata_utils.augmentor.trans_splice
key,value import_dict:  trans_mean_variance_norm data_utils.augmentor.trans_mean_variance_norm
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  lodtensor_to_ndarray data_utils.util.lodtensor_to_ndarray
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  split_infer_result data_utils.util.split_infer_result
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleSpeech/DeepASR/infer.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bmn/config_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/config_utils.py has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bmn reader.py
[1;34mStart upgrading model dygraph/bmn/reader.py[0m
NameFrom--->: ImportFrom
module_name---> bmn_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='platform', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)]
ImportFrom(module='bmn_utils',
    names=[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)],
    level=0)
module_name---> bmn_utils
[1;33mfunc_name.name, and module name are[0m iou_with_anchors bmn_utils
[1;33mfunc_name.name, and module name are[0m ioa_with_anchors bmn_utils
key,value import_dict:  np numpy
key,value import_dict:  None os
key, v, from_dict:  ioa_with_anchors bmn_utils.ioa_with_anchors
key, v, from_dict:  iou_with_anchors bmn_utils.iou_with_anchors
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/reader.py has been written sucess[0m

[1;32mNo module named 'layers', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan layers.py
[1;34mStart upgrading model dygraph/cycle_gan/layers.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Conv2DTranspose', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Pool2D', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Conv2DTranspose', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Pool2D', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2DTranspose paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  division __future__.division
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
key, v, from_dict:  Conv2DTranspose paddle.fluid.dygraph.nn.Conv2DTranspose
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Conv2DTranspose->paddle.fluid.dygraph.nn.Conv2DTranspose)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/layers.py has been written sucess[0m

[1;32mNo module named 'load', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer/utils load.py
[1;34mStart upgrading model dygraph/transformer/utils/load.py[0m
NameFrom--->:
ImportFrom(module='attention_model', names=[alias(name='AttentionModel', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m AttentionModel attention_model
NameFrom--->: ImportFrom
[alias(name='BaseModel', asname=None)]
ImportFrom(module='base_model', names=[alias(name='BaseModel', asname=None)], level=0)
module_name---> base_model
[1;33mfunc_name.name, and module name are[0m BaseModel base_model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BaseModel base_model.BaseModel
key, v, from_dict:  AttentionModel attention_model.AttentionModel
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/infer.py has been written sucess[0m

[1;34mStart upgrading model dygraph/yolov3/start_paral.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/start_paral.sh has been written sucess[0m
[1;32mNo module named 'download', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3/dataset/coco download.py
[1;34mStart upgrading model dygraph/yolov3/dataset/coco/download.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.dataset.common
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os.path', asname='osp')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='zipfile', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='download', asname=None)]
ImportFrom(module='paddle.dataset.common', names=[alias(name='download', asname=None)], level=0)
module_name---> paddle.dataset.common
[1;33mfunc_name.name, and module name are[0m download paddle.dataset.common
key,value import_dict:  None logging
key,value import_dict:  osp os.path
key, v, from_dict:  download paddle.dataset.common.download
[3;32mRestore API full name(download->paddle.dataset.common.download)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/dataset/coco/download.py has been written sucess[0m

[1;32mNo module named 'cls', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/model cls.py
[1;34mStart upgrading model dygraph/bert/model/cls.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> model.bert
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Linear', asname=None), alias(name='Layer', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Linear', asname=None), alias(name='Layer', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='BertModelLayer', asname=None)]
ImportFrom(module='model.bert', names=[alias(name='BertModelLayer', asname=None)], level=0)
module_name---> model.bert
[1;33mfunc_name.name, and module name are[0m BertModelLayer model.bert
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  BertModelLayer model.bert.BertModelLayer
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/model/cls.py has been written sucess[0m

[1;34mStart upgrading model dygraph/transformer/utils/configure.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/utils/configure.py has been written sucess[0m
[1;34mStart upgrading model dygraph/mnist/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mnist/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleST/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleST/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleST/Research/CIKM2019-MONOPOLY/README.md[0m framework paddle.fluid.framework
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  count itertools.count
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.dygraph.base.to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/reinforcement_learning/test_reinforce_load.py has been written sucess[0m

[1;32mNo module named 'args', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/utils args.py
[1;34mStart upgrading model dygraph/bert/utils/args.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None argparse
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/args.py has been written sucess[0m

[1;34mStart upgrading model dygraph/transformer/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mnist train.py
[1;34mStart upgrading model dygraph/mnist/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> paddle.fluid.optimizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='AdamOptimizer', asname=None)]
ImportFrom(module='paddle.fluid.optimizer', names=[alias(name='AdamOptimizer', asname=None)], level=0)
module_name---> paddle.fluid.optimizer
[1;33mfunc_name.name, and module name are[0m AdamOptimizer paddle.fluid.optimizer
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None), alias(name='Pool2D', asname=None), alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None), alias(name='Pool2D', asname=None), alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/dist_utils.py has been written sucess[0m

[1;32mNo module named 'darknet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3/models darknet.py
[1;34mStart upgrading model dygraph/yolov3/models/darknet.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.regularizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='L2Decay', asname=None)]
ImportFrom(module='paddle.fluid.regularizer', names=[alias(name='L2Decay', asname=None)], level=0)
module_name---> paddle.fluid.regularizer
[1;33mfunc_name.name, and module name are[0m L2Decay paddle.fluid.regularizer
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None), alias(name='BatchNorm', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None), alias(name='BatchNorm', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  L2Decay paddle.fluid.regularizer.L2Decay
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/models/darknet.py has been written sucess[0m

[1;34mStart upgrading model PaddleKG/CoKE/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleKG/CoKE/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleST/Research/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleST/Research/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleST/Research/KDD2020-P3AC/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleST/Research/KDD2020-P3AC/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/ocr_recognition/run_attention.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/run_attention.sh has been written sucess[0m
[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition eval.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/eval.py[0m
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> attention_model
NameFrom--->: ImportFrom
module_name---> crnn_ctc_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='to_lodtensor', asname=None),
    alias(name='get_ctc_feeder_data', asname=None),
    alias(name='get_attention_feeder_data', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='to_lodtensor', asname=None),
        alias(name='get_ctc_feeder_data', asname=None),
        alias(name='get_attention_feeder_data', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m to_lodtensor utility
[1;33mfunc_name.name, and module name are[0m get_ctc_feeder_data utility
[1;33mfunc_name.name, and module name are[0m get_attention_feeder_data utility
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None)]
ImportFrom(module='utility', names=[alias(name='check_gpu', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
NameFrom--->: ImportFrom
[alias(name='attention_eval', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='attention_eval', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m attention_eval attention_model
NameFrom--->: ImportFrom
[alias(name='ctc_eval', asname=None)]
ImportFrom(module='crnn_ctc_model', names=[alias(name='ctc_eval', asname=None)], level=0)
module_name---> crnn_ctc_model
[1;33mfunc_name.name, and module name are[0m ctc_eval crnn_ctc_model
ImportName--->: Import
[alias(name='data_reader', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bmn/train.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/lac train.py
[1;34mStart upgrading model dygraph/lac/train.py[0m
NameFrom--->: ImportFrom
module_name---> sequence_labeling
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)]
ImportFrom(module='sequence_labeling',
    names=[alias(name='lex_net', asname=None), alias(name='Chunk_eval', asname=None)],
    level=0)
module_name---> sequence_labeling
[1;33mfunc_name.name, and module name are[0m lex_net sequence_labeling
[1;33mfunc_name.name, and module name are[0m Chunk_eval sequence_labeling
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  Chunk_eval sequence_labeling.Chunk_eval
key, v, from_dict:  lex_net sequence_labeling.lex_net
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.metrics.ChunkEvaluator->paddle.fluid.metrics.ChunkEvaluator)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.metrics.ChunkEvaluator->paddle.metric.ChunkEvaluator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/train.py has been written sucess[0m

[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer predict.py
[1;34mStart upgrading model dygraph/transformer/predict.py[0m
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> utils.check
NameFrom--->: ImportFrom
module_name---> utils.load
NameFrom--->: ImportFrom
module_name---> model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)]
ImportFrom(module='utils.check',
    names=[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.check
[1;33mfunc_name.name, and module name are[0m check_gpu utils.check
[1;33mfunc_name.name, and module name are[0m check_version utils.check
NameFrom--->: ImportFrom
[alias(name='load_dygraph', asname=None)]
ImportFrom(module='utils.load', names=[alias(name='load_dygraph', asname=None)], level=0)
module_name---> utils.load
[1;33mfunc_name.name, and module name are[0m load_dygraph utils.load
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Transformer', asname=None), alias(name='position_encoding_init', asname=None)]
ImportFrom(module='model',
    names=[alias(name='Transformer', asname=None), alias(name='position_encoding_init', asname=None)],
    level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m Transformer model
[1;33mfunc_name.name, and module name are[0m position_encoding_init model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  position_encoding_init model.position_encoding_init
key, v, from_dict:  Transformer model.Transformer
key, v, from_dict:  load_dygraph utils.load.load_dygraph
key, v, from_dict:  PDConfig utils.configure.PDConfig
key, v, from_dict:  check_gpu utils.check.check_gpu
key, v, from_dict:  check_version utils.check.check_version
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/predict.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition train.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom

[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGDOptimizer->paddle.optimizer.SGDOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/run_classifier.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/ocr_recognition/scripts/train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/scripts/train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/ocr_recognition/scripts/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/scripts/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/ocr_recognition/scripts/infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/scripts/infer.sh has been written sucess[0m
[1;32mNo module named 'inference_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video inference_model.py
[1;34mStart upgrading model PaddleCV/video/inference_model.py[0m
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/rnn.py has been written sucess[0m

[1;34mStart upgrading model dygraph/ptb_lm/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/args.py has been written sucess[0m
[1;34mStart upgrading model dygraph/ptb_lm/data/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/data/download_data.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/cycle_gan/data_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/data_reader.py has been written sucess[0m
[1;34mStart upgrading model dygraph/cycle_gan/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/README.md has been written sucess[0m
[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/cycle_gan model.py
[1;34mStart upgrading model dygraph/cycle_gan/model.py[0m
NameFrom--->: ImportFrom
module_name---> layers
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='layers', names=[alias(name='*', asname=None)], level=0)
module_name---> layers
[1;33mfunc_name.name, and module name are[0m * layers
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  * layers.*
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/model.py has been written sucess[0m

[1;32mNo module named 'crnn_ctc_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition crnn_ctc_model.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/crnn_ctc_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='_decay_step_counter', asname=None)]
ImportFrom(module='paddle.fluid.layers.learning_rate_scheduler',
    names=[alias(name='_decay_step_counter', asname=None)],
    level=0)
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;33mfunc_name.name, and module name are[0m _decay_step_counter paddle.fluid.layers.learning_rate_scheduler
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  _decay_step_counter paddle.fluid.layers.learning_rate_scheduler._decay_step_counter
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.im2sequence->paddle.fluid.layers.im2sequence)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/model bert.py
[1;34mStart upgrading model dygraph/bert/model/bert.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> model.transformer_encoder
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None),
    alias(name='LayerNorm', asname=None),
    alias(name='Linear', asname=None),
    alias(name='to_variable', asname=None),
    alias(name='Layer', asname=None),
    alias(name='guard', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Embedding', asname=None),
        alias(name='LayerNorm', asname=None),
        alias(name='Linear', asname=None),
        alias(name='to_variable', asname=None),
        alias(name='Layer', asname=None),
        alias(name='guard', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m LayerNorm paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m guard paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='EncoderLayer', asname=None), alias(name='PrePostProcessLayer', asname=None)]
ImportFrom(module='model.transformer_encoder',
    names=[alias(name='EncoderLayer', asname=None), alias(name='PrePostProcessLayer', asname=None)],
    level=0)
module_name---> model.transformer_encoder
[1;33mfunc_name.name, and module name are[0m EncoderLayer model.transformer_encoder
[1;33mfunc_name.name, and module name are[0m PrePostProcessLayer model.transformer_encoder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  guard paddle.fluid.dygraph.guard
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
key, v, from_dict:  EncoderLayer model.transformer_encoder.EncoderLayer
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  PrePostProcessLayer model.transformer_encoder.PrePostProcessLayer
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  LayerNorm paddle.fluid.dygraph.LayerNorm
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/dialogue_domain_classification/run_classifier.py has been written sucess[0m

[1;34mStart upgrading model dygraph/mobilenet/run_cpu_v2.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_cpu_v2.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_mul_v2.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_mul_v2.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/word2vec/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/word2vec/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/se_resnet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/se_resnet/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/se_resnet train.py
[1;34mStart upgrading model dygraph/se_resnet/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None),
    alias(name='Pool2D', asname=None),
    alias(name='BatchNorm', asname=None),
    alias(name='Linear', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Conv2D', asname=None),
        alias(name='Pool2D', asname=None),
        alias(name='BatchNorm', asname=None),
        alias(name='Linear', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Conv2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Pool2D paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m BatchNorm paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None ast
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  core paddle.fluid.core
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(fluid.layers.cosine_decay->paddle.fluid.layers.cosine_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(flatten->paddle.fluid.layers.utils.flatten)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(flatten->paddle.fluid.layers.utils.flatten)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reverse->paddle.fluid.layers.reverse)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(fluid.layers.reverse->paddle.fluid.layers.reverse)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(fluid.layers.reverse->paddle.fluid.layers.reverse)[0m
[3;32mRestore API full name(map_structure->paddle.fluid.layers.utils.map_structure)[0m
[3;32mRestore API full name(fluid.layers.rnn->paddle.fluid.layers.rnn)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_max->paddle.elementwise_max)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.softsign->paddle.nn.functional.softsign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
module_name---> utils.args
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils.args
[1;33mfunc_name.name, and module name are[0m print_arguments utils.args
[1;33mfunc_name.name, and module name are[0m check_cuda utils.args
NameFrom--->: ImportFrom
[alias(name='init_from_static_model', asname=None)]
ImportFrom(module='utils.init', names=[alias(name='init_from_static_model', asname=None)], level=0)
module_name---> utils.init
[1;33mfunc_name.name, and module name are[0m init_from_static_model utils.init
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  reader reader.cls
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  BertConfig model.bert.BertConfig
key, v, from_dict:  ClsModelLayer model.cls.ClsModelLayer
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  init_from_static_model utils.init.init_from_static_model
key, v, from_dict:  ArgumentGroup utils.args.ArgumentGroup
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_cuda utils.args.check_cuda
key, v, from_dict:  Optimizer optimization.Optimizer
key, v, from_dict:  print_arguments utils.args.print_arguments
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/run_classifier.py has been written sucess[0m

[1;32mNo module named 'train_dist', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video train_dist.py
[1;34mStart upgrading model PaddleCV/video/train_dist.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.incubate.fleet.collective
NameFrom--->: ImportFrom
module_name---> utils.train_utils
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='fleet', asname=None), alias(name='DistributedStrategy', asname=None)]
ImportFrom(module='paddle.fluid.incubate.fleet.collective',
    names=[alias(name='fleet', asname=None), alias(name='DistributedStrategy', asname=None)],
    level=0)
module_name---> paddle.fluid.incubate.fleet.collective
[1;33mfunc_name.name, and module name are[0m fleet paddle.fluid.incubate.fleet.collective
[1;33mfunc_name.name, and module name are[0m DistributedStrategy paddle.fluid.incubate.fleet.collective
ImportName--->: Import
[alias(name='paddle.fluid.incubate.fleet.base.role_maker', asname='role_maker')]
NameFrom--->: ImportFrom
[alias(name='train_with_dataloader', asname=None)]
ImportFrom(module='utils.train_utils', names=[alias(name='train_with_dataloader', asname=None)], level=0)
module_name---> utils.train_utils
[1;33mfunc_name.name, and module name are[0m train_with_dataloader utils.train_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_version', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_version utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key,value import_dict:  role_maker paddle.fluid.incubate.fleet.base.role_maker
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  DistributedStrategy paddle.fluid.incubate.fleet.collective.DistributedStrategy
key, v, from_dict:  check_version utils.utility.check_version
key, v, from_dict:  fleet paddle.fluid.incubate.fleet.collective.fleet
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
key, v, from_dict:  train_with_dataloader utils.train_utils.train_with_dataloader
[3;32mRestore API full name(role_maker.PaddleCloudRoleMaker->paddle.fluid.incubate.fleet.base.role_maker.PaddleCloudRoleMaker)[0m
[3;32mRestore API full name(fleet.init->paddle.fluid.incubate.fleet.collective.fleet.init)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_sing_v1_checkpoint.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_sing_v2_checkpoint.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_sing_v2_checkpoint.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/run_cpu_v1.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/run_cpu_v1.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/mobilenet/utils/autoaugment.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/utils/autoaugment.py has been written sucess[0m
[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/mobilenet/utils dist_utils.py
[1;34mStart upgrading model dygraph/mobilenet/utils/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mobilenet/utils/dist_utils.py has been written sucess[0m

[1;34mStart upgrading model dygraph/similarity_net/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/download_pretrained_model.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/download_pretrained_model.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/similarity_net/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/config.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/similarity_net utils.py
[1;34mStart upgrading model dygraph/similarity_net/utils.py[0m
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='logging.handlers', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None warnings
key, v, from_dict:  partial functools.partial
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/utils.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bert/utils/cards.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/cards.py has been written sucess[0m
[1;32mNo module named 'fp16', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/utils fp16.py
[1;34mStart upgrading model dygraph/bert/utils/fp16.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.framework.Parameter->paddle.fluid.framework.Parameter)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/fp16.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/metrics/multicrop_test/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/multicrop_test/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bmn_metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bmn_metrics/__init__.py has been written sucess[0m
[3;32mRestore API full name(LayerNorm->paddle.fluid.dygraph.LayerNorm)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.LayerNorm->paddle.nn.LayerNorm)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/model/transformer_encoder.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/run.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video train.py
[1;34mStart upgrading model PaddleCV/video/train.py[0m
NameFrom--->: ImportFrom
module_name---> utils.train_utils
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='train_with_dataloader', asname=None)]
ImportFrom(module='utils.train_utils', names=[alias(name='train_with_dataloader', asname=None)], level=0)
module_name---> utils.train_utils
[1;33mfunc_name.name, and module name are[0m train_with_dataloader utils.train_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_version', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_version utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  check_version utils.utility.check_version
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
key, v, from_dict:  train_with_dataloader utils.train_utils.train_with_dataloader
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m check.py
[1;34mStart upgrading model dygraph/transformer/utils/check.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/utils/check.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/ocr_recognition/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/README.md has been written sucess[0m
[1;32mNo module named 'attention_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition attention_model.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/attention_model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.im2sequence->paddle.fluid.layers.im2sequence)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.DynamicRNN->paddle.fluid.layers.DynamicRNN)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.gru_unit->paddle.fluid.layers.gru_unit)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.evaluator.EditDistance->paddle.fluid.evaluator.EditDistance)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adadelta->paddle.fluid.optimizer.Adadelta)[0m
[3;32mRestore API full name(fluid.optimizer.ModelAverage->paddle.fluid.optimizer.ModelAverage)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0mImportFrom
[alias(name='parse_args', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='SmoothedValue', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='parse_args', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='SmoothedValue', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m SmoothedValue utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='YOLOv3', asname=None)]
ImportFrom(module='models.yolov3', names=[alias(name='YOLOv3', asname=None)], level=0)
module_name---> models.yolov3
[1;33mfunc_name.name, and module name are[0m YOLOv3 models.yolov3
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
ImportName--->: Import
[alias(name='dist_utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None dist_utils
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  YOLOv3 models.yolov3.YOLOv3
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  SmoothedValue utility.SmoothedValue
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.dygraph.PiecewiseDecay->paddle.fluid.dygraph.PiecewiseDecay)[0m
[3;32mRestore API full name(fluid.layers.linear_lr_warmup->paddle.fluid.layers.linear_lr_warmup)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.layers.linear_lr_warmup->paddle.nn.functional.linear_lr_warmup)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/train.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video eval.py
[1;34mStart upgrading model PaddleCV/video/eval.py[0m
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_version', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_version utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  check_version utils.utility.check_version
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='imsave', asname=None)]
ImportFrom(module='scipy.misc', names=[alias(name='imsave', asname=None)], level=0)
module_name---> scipy.misc
[1;33mfunc_name.name, and module name are[0m imsave scipy.misc
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='ImagePool', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='ImagePool', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m ImagePool utility
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='trainer', names=[alias(name='*', asname=None)], level=0)
module_name---> trainer
[1;33mfunc_name.name, and module name are[0m * trainer
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ImagePool utility.ImagePool
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  imsave scipy.misc.imsave
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  * trainer.*
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/application/video_tag/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'kinetics_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/reader kinetics_reader.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/reader/kinetics_reader.py[0m
NameFrom--->: ImportFrom
module_name---> cStringIO
NameFrom--->: ImportFrom
module_name---> io
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> reader_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
NameFrom--->: ImportFrom
[alias(name='StringIO', asname=None)]
ImportFrom(module='cStringIO', names=[alias(name='StringIO', asname=None)], level=0)
module_name---> cStringIO
[1;33mfunc_name.name, and module name are[0m StringIO cStringIO
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BytesIO', asname=None)]
ImportFrom(module='io', names=[alias(name='BytesIO', asname=None)], level=0)
module_name---> io
[1;33mfunc_name.name, and module name are[0m BytesIO io
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
key,value import_dict:  pickle cPickle
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key,value import_dict:  np numpy
key, v, from_dict:  StringIO cStringIO.StringIO
key, v, from_dict:  BytesIO io.BytesIO
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  DataReader 
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(core.CPUPlace->paddle.fluid.core.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(SGDOptimizer->paddle.fluid.optimizer.SGDOptimizer)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.dygraph.nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.elementwise_floordiv->paddle.fluid.layers.elementwise_floordiv)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mod->paddle.fluid.layers.elementwise_mod)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(fluid.layers.logical_or->paddle.fluid.layers.logical_or)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.gather_tree->paddle.fluid.layers.gather_tree)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
module_name---> utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
NameFrom--->: ImportFrom
[alias(name='YOLOv3', asname=None)]
ImportFrom(module='models.yolov3', names=[alias(name='YOLOv3', asname=None)], level=0)
module_name---> models.yolov3
[1;33mfunc_name.name, and module name are[0m YOLOv3 models.yolov3
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='COCO', asname=None)]
ImportFrom(module='pycocotools.coco', names=[alias(name='COCO', asname=None)], level=0)
module_name---> pycocotools.coco
[1;33mfunc_name.name, and module name are[0m COCO pycocotools.coco
NameFrom--->: ImportFrom
[alias(name='COCOeval', asname=None), alias(name='Params', asname=None)]
ImportFrom(module='pycocotools.cocoeval',
    names=[alias(name='COCOeval', asname=None), alias(name='Params', asname=None)],
    level=0)
module_name---> pycocotools.cocoeval
[1;33mfunc_name.name, and module name are[0m COCOeval pycocotools.cocoeval
[1;33mfunc_name.name, and module name are[0m Params pycocotools.cocoeval
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  COCO pycocotools.coco.COCO
key, v, from_dict:  COCOeval pycocotools.cocoeval.COCOeval
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  Params pycocotools.cocoeval.Params
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  YOLOv3 models.yolov3.YOLOv3
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/infer.py has been written sucess[0m

[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer model.py
[1;34mStart upgrading model dygraph/transformer/model.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.learning_rate_scheduler
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None),
    alias(name='LayerNorm', asname=None),
    alias(name='Linear', asname=None),
    alias(name='Layer', asname=None),
    alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph',
    names=[alias(name='Embedding', asname=None),
        alias(name='LayerNorm', asname=None),
        alias(name='Linear', asname=None),
        alias(name='Layer', asname=None),
        alias(name='to_variable', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m LayerNorm paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m Layer paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='LearningRateDecay', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.learning_rate_scheduler',
    names=[alias(name='LearningRateDecay', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.learning_rate_scheduler
[1;33mfunc_name.name, and module name are[0m LearningRateDecay paddle.fluid.dygraph.learning_rate_scheduler
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.to_variable
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Linear paddle.fluid.dygraph.Linear
key, v, from_dict:  Layer paddle.fluid.dygraph.Layer
key, v, from_dict:  LearningRateDecay paddle.fluid.dygraph.learning_rate_scheduler.LearningRateDecay
key, v, from_dict:  LayerNorm paddle.fluid.dygraph.LayerNorm
[3;32mRestore API full name(layers.elementwise_min->paddle.fluid.layers.elementwise_min)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(LayerNorm->paddle.fluid.dygraph.LayerNorm)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/lac/sequence_labeling.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/data/dataset/ets/generate_infer_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/ets/generate_infer_data.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/nonlocal/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/nonlocal/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/kinetics/generate_label.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/kinetics/generate_label.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/utils/config_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/utils/config_utils.py has been written sucess[0m
[1;32mNo module named 'attention_lstm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/models/attention_lstm attention_lstm.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/attention_lstm/attention_lstm.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> lstm_attention
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='LSTMAttentionModel', asname=None)]
ImportFrom(module='lstm_attention', names=[alias(name='LSTMAttentionModel', asname=None)], level=1)
module_name---> lstm_attention
[1;33mfunc_name.name, and module name are[0m LSTMAttentionModel lstm_attention
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  LSTMAttentionModel lstm_attention.LSTMAttentionModel
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[3;32mRestore API full name(core.CUDAPlace->paddle.fluid.core.CUDAPlace)[0m
[3;32mRestore API full name(core.CPUPlace->paddle.fluid.core.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(core.CUDAPlace->paddle.fluid.core.CUDAPlace)[0m
[3;32mRestore API full name(core.CPUPlace->paddle.fluid.core.CPUPlace)[0m
[3;32mRestore API full name(Executor->paddle.fluid.executor.Executor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.parallel_executor.ExecutionStrategy->paddle.fluid.parallel_executor.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.core.LoDTensor->paddle.fluid.core.LoDTensor)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.core.LoDTensor->paddle.fluid.core.LoDTensor)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;33mUpgrade API (paddle.fluid.core.CUDAPlace->paddle.CUDAPlace)[0m
[1;33mUpgrade API (paddle.fluid.core.CPUPlace->paddle.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.RMSPropOptimizer->paddle.optimizer.RMSPropOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.core.CUDAPlace->paddle.CUDAPlace)[0m
[1;33mUpgrade API (paddle.fluid.core.CPUPlace->paddle.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;33mUpgrade API (paddle.fluid.core.CUDAPlace->paddle.CUDAPlace)[0m
[1;33mUpgrade API (paddle.fluid.core.CPUPlace->paddle.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.executor.Executor->paddle.Executor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleNLP/pretrain_language_models/ELMo/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/run_dist.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/run_dist.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/run_ce.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/run_ce.sh has been written sucess[0m
[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video predict.py
[1;34mStart upgrading model PaddleCV/video/predict.py[0m
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_version', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_version utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key,value import_dict:  pickle cPickle
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  check_version utils.utility.check_version
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/predict.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/reader/nonlocal_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/nonlocal_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/reader/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/tsn.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/tsn.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/bmn.yaml[0m
module_name---> crnn_ctc_model
NameFrom--->: ImportFrom
module_name---> attention_model
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='to_lodtensor', asname=None),
    alias(name='get_ctc_feeder_data', asname=None),
    alias(name='get_attention_feeder_data', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='to_lodtensor', asname=None),
        alias(name='get_ctc_feeder_data', asname=None),
        alias(name='get_attention_feeder_data', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m to_lodtensor utility
[1;33mfunc_name.name, and module name are[0m get_ctc_feeder_data utility
[1;33mfunc_name.name, and module name are[0m get_attention_feeder_data utility
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None)]
ImportFrom(module='utility', names=[alias(name='check_gpu', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='ctc_train_net', asname=None)]
ImportFrom(module='crnn_ctc_model', names=[alias(name='ctc_train_net', asname=None)], level=0)
module_name---> crnn_ctc_model
[1;33mfunc_name.name, and module name are[0m ctc_train_net crnn_ctc_model
NameFrom--->: ImportFrom
[alias(name='attention_train_net', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='attention_train_net', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m attention_train_net attention_model
ImportName--->: Import
[alias(name='data_reader', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  profiler paddle.fluid.profiler
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key,value import_dict:  np numpy
key, v, from_dict:  attention_train_net attention_model.attention_train_net
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  to_lodtensor utility.to_lodtensor
key, v, from_dict:  get_ctc_feeder_data utility.get_ctc_feeder_data
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  get_attention_feeder_data utility.get_attention_feeder_data
key, v, from_dict:  ctc_train_net crnn_ctc_model.ctc_train_net
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.get_program_parameter->paddle.fluid.io.get_program_parameter)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(profiler.cuda_profiler->paddle.fluid.profiler.cuda_profiler)[0m
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/data/dataset/tall/gen_infer.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/tall/gen_infer.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/youtube8m/eval_util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/youtube8m/eval_util.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/youtube8m/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/youtube8m/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/__init__.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/utils utility.py
[1;34mStart upgrading model PaddleCV/video/utils/utility.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='signal', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/utils/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/nextvlad.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/nextvlad.yaml has been written sucess[0m
[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
key, v, from_dict:  DarkNet53_conv_body darknet.DarkNet53_conv_body
key, v, from_dict:  ConvBNLayer darknet.ConvBNLayer
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  L2Decay paddle.fluid.regularizer.L2Decay
key, v, from_dict:  BatchNorm paddle.fluid.dygraph.nn.BatchNorm
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.yolov3_loss->paddle.fluid.layers.yolov3_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.yolo_box->paddle.fluid.layers.yolo_box)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.multiclass_nms->paddle.fluid.layers.multiclass_nms)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.yolov3_loss->paddle.nn.functional.yolov3_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.yolo_box->paddle.nn.functional.yolo_box)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.multiclass_nms->paddle.nn.functional.multiclass_nms)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/models/yolov3.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/metrics_util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/metrics_util.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/reader/reader_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/reader/reader_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/reader/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/reader/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/attention_lstm/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/attention_lstm/__init__.py has been written sucess[0m
[1;32mNo module named 'lstm_attention', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/models/attention_lstm lstm_attention.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/attention_lstm/lstm_attention.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/attention_lstm/lstm_attention.py has been written sucess[0m

[1;32mNo module named 'tall_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tall tall_net.py
[1;34mStart upgrading model PaddleCV/video/models/tall/tall_net.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict: 
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Pool2D->paddle.nn.Pool2D)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/mm_dnn.py has been written sucess[0m

[1;34mStart upgrading model dygraph/sentiment/utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/sentiment/utils.py has been written sucess[0m
[1;32mNo module named 'main', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/sentiment main.py
[1;34mStart upgrading model dygraph/sentiment/main.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='nets', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ArgumentGroup', asname=None)]
ImportFrom(module='utils', names=[alias(name='ArgumentGroup', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m ArgumentGroup utils
NameFrom--->: ImportFrom
[alias(name='get_cards', asname=None)]
ImportFrom(module='utils', names=[alias(name='get_cards', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m get_cards utils
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None contextlib
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  ArgumentGroup utils.ArgumentGroup
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_cards utils.get_cards
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/sentiment/main.py has been written sucess[0m

[1;32mNo module named 'kinetics_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/reader kinetics_reader.py
[1;34mStart upgrading model PaddleCV/video/reader/kinetics_reader.py[0m
NameFrom--->: ImportFrom
module_name---> cStringIO
NameFrom--->: ImportFrom
module_name---> io
NameFrom--->: ImportFrom
module_name---> nvidia.dali.pipeline
NameFrom--->: ImportFrom
module_name---> nvidia.dali.plugin.paddle
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> reader_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
NameFrom--->: ImportFrom
[alias(name='StringIO', asname=None)]
ImportFrom(module='cStringIO', names=[alias(name='StringIO', asname=None)], level=0)
module_name---> cStringIO
[1;33mfunc_name.name, and module name are[0m StringIO cStringIO
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BytesIO', asname=None)] ImportFrom
module_name---> functools
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None warnings
key, v, from_dict:  partial functools.partial
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/utils/load.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/ocr_recognition/run_crnn_ctc.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/run_crnn_ctc.sh has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition infer.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> crnn_ctc_model
NameFrom--->: ImportFrom
module_name---> attention_model
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='to_lodtensor', asname=None),
    alias(name='get_ctc_feeder_data', asname=None),
    alias(name='get_attention_feeder_for_infer', asname=None),
    alias(name='get_ctc_feeder_for_infer', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='to_lodtensor', asname=None),
        alias(name='get_ctc_feeder_data', asname=None),
        alias(name='get_attention_feeder_for_infer', asname=None),
        alias(name='get_ctc_feeder_for_infer', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m to_lodtensor utility
[1;33mfunc_name.name, and module name are[0m get_ctc_feeder_data utility
[1;33mfunc_name.name, and module name are[0m get_attention_feeder_for_infer utility
[1;33mfunc_name.name, and module name are[0m get_ctc_feeder_for_infer utility
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None)]
ImportFrom(module='utility', names=[alias(name='check_gpu', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
NameFrom--->: ImportFrom
[alias(name='ctc_infer', asname=None)]
ImportFrom(module='crnn_ctc_model', names=[alias(name='ctc_infer', asname=None)], level=0)
module_name---> crnn_ctc_model
[1;33mfunc_name.name, and module name are[0m ctc_infer crnn_ctc_model
NameFrom--->: ImportFrom
[alias(name='attention_infer', asname=None)]
ImportFrom(module='attention_model', names=[alias(name='attention_infer', asname=None)], level=0)
module_name---> attention_model
[1;33mfunc_name.name, and module name are[0m attention_infer attention_model
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  profiler paddle.fluid.profiler
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  np numpy
key, v, from_dict:  attention_infer attention_model.attention_infer
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  get_ctc_feeder_data utility.get_ctc_feeder_data
key, v, from_dict:  get_attention_feeder_for_infer utility.get_attention_feeder_for_infer
key, v, from_dict:  get_ctc_feeder_for_infer utility.get_ctc_feeder_for_infer
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  ctc_infer crnn_ctc_model.ctc_infer
key, v, from_dict:  to_lodtensor utility.to_lodtensor
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.get_program_parameter->paddle.fluid.io.get_program_parameter)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(profiler.cuda_profiler->paddle.fluid.profiler.cuda_profiler)[0m
[3;32mRestore API full name(profiler.profiler->paddle.fluid.profiler.profiler)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/reader/reader_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/reader_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/attention_cluster.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/attention_cluster.yaml has been written sucess[0m
[1;32mNo module named 'tsm_res_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tsm tsm_res_model.py
[1;34mStart upgrading model PaddleCV/video/models/tsm/tsm_res_model.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.create_array->paddle.fluid.layers.create_array)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.create_array->paddle.fluid.layers.create_array)[0m
[3;32mRestore API full name(fluid.layers.create_array->paddle.fluid.layers.create_array)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.While->paddle.fluid.layers.While)[0m
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.gru_unit->paddle.fluid.layers.gru_unit)[0m
[3;32mRestore API full name(fluid.layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.beam_search->paddle.fluid.layers.beam_search)[0m
[3;32mRestore API full name(fluid.layers.increment->paddle.fluid.layers.increment)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.is_empty->paddle.fluid.layers.is_empty)[0m
[3;32mRestore API full name(fluid.layers.logical_not->paddle.fluid.layers.logical_not)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.beam_search_decode->paddle.fluid.layers.beam_search_decode)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.evaluator.EditDistance->paddle.fluid.evaluator.EditDistance)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adadelta->paddle.optimizer.Adadelta)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.ModelAverage->paddle.optimizer.ModelAverage)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/ptb_lm model_check.py
[1;34mStart upgrading model dygraph/ptb_lm/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/model_check.py has been written sucess[0m

[1;34mStart upgrading model dygraph/yolov3/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/README.md has been written sucess[0m
[1;34mStart upgrading model dygraph/yolov3/image_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/image_utils.py has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 reader.py
[1;34mStart upgrading model dygraph/yolov3/reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> pycocotools.coco
NameFrom--->: ImportFrom
module_name---> data_utils
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 4 [0m
insert paddle into 5
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='box_utils', asname=None)]
ImportName--->: Import
[alias(name='image_utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='COCO', asname=None)]
ImportFrom(module='pycocotools.coco', names=[alias(name='COCO', asname=None)], level=0)
module_name---> pycocotools.coco
[1;33mfunc_name.name, and module name are[0m COCO pycocotools.coco
NameFrom--->: ImportFrom
[alias(name='GeneratorEnqueuer', asname=None)]
ImportFrom(module='data_utils', names=[alias(name='GeneratorEnqueuer', asname=None)], level=0)
module_name---> data_utils
[1;33mfunc_name.name, and module name are[0m GeneratorEnqueuer data_utils
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None image_utils
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  GeneratorEnqueuer data_utils.GeneratorEnqueuer
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  unicode_literals __future__.unicode_literals
key, v, from_dict:  COCO pycocotools.coco.COCO
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/tsm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsm/README.md has been written sucess[0m
[1;32mNo module named 'attention_cluster', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/attention_cluster attention_cluster.py
[1;34mStart upgrading model PaddleCV/video/models/attention_cluster/attention_cluster.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> shifting_attention
NameFrom--->: ImportFrom
module_name---> logistic_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='ShiftingAttentionModel', asname=None)]
ImportFrom(module='shifting_attention', names=[alias(name='ShiftingAttentionModel', asname=None)], level=1)
module_name---> shifting_attention
[1;33mfunc_name.name, and module name are[0m ShiftingAttentionModel shifting_attention
NameFrom--->: ImportFrom
[alias(name='LogisticModel', asname=None)]
ImportFrom(module='logistic_model', names=[alias(name='LogisticModel', asname=None)], level=1)
module_name---> logistic_model
[1;33mfunc_name.name, and module name are[0m LogisticModel logistic_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ShiftingAttentionModel shifting_attention.ShiftingAttentionModel
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  LogisticModel logistic_model.LogisticModel
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn', names=[alias(name='Embedding', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
[alias(name='BasicLSTMUnit', asname=None)]
ImportFrom(module='rnn', names=[alias(name='BasicLSTMUnit', asname=None)], level=0)
module_name---> rnn
[1;33mfunc_name.name, and module name are[0m BasicLSTMUnit rnn
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  BasicLSTMUnit rnn.BasicLSTMUnit
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.dygraph.nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.dygraph.nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.dygraph.nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.sequence_mask->paddle.fluid.layers.sequence_mask)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/sentiment/reader.py has been written sucess[0m

[1;34mStart upgrading model dygraph/cycle_gan/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/download.py has been written sucess[0m
[1;34mStart upgrading model dygraph/cycle_gan/prepare_cityscapes_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/prepare_cityscapes_dataset.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/yolov3 utility.py
[1;34mStart upgrading model dygraph/yolov3/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
NameFrom--->: ImportFrom
[alias(name='deque', asname=None)]
ImportFrom(module='collections', names=[alias(name='deque', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m deque collections
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config', names=[alias(name='*', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m * config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None functools
key, v, from_dict:  deque collections.deque
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * config.*
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/yolov3/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/tsn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/tsn/__init__.py has been written sucess[0m
[1;32mNo module named 'train_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/utils train_utils.py
[1;34mStart upgrading model PaddleCV/video/utils/train_utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None shutil
key, v, from_dict:  profiler paddle.fluid.profiler
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(profiler.start_profiler->paddle.fluid.profiler.start_profiler)[0m
[3;32mRestore API full name(profiler.stop_profiler->paddle.fluid.profiler.stop_profiler)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/utils/train_utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/attention_cluster/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_cluster/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/bsn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bsn/README.md has been written sucess[0m
[1;32mNo module named 'nonlocal_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nonlocal_model nonlocal_model.py
[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/nonlocal_model.py[0m
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
NameFrom--->: ImportFrom
module_name---> nonlocal_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='resnet_video', asname=None)]
ImportFrom(module=None, names=[alias(name='resnet_video', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m resnet_video None
NameFrom--->: ImportFrom
[alias(name='load_pretrain_params_from_file', asname=None), alias(name='load_weights_params_from_file', asname=None)]
ImportFrom(module='nonlocal_utils',
    names=[alias(name='load_pretrain_params_from_file', asname=None),
        alias(name='load_weights_params_from_file', asname=None)],
    level=1)
module_name---> nonlocal_utils
[1;33mfunc_name.name, and module name are[0m load_pretrain_params_from_file nonlocal_utils
[1;33mfunc_name.name, and module name are[0m load_weights_params_from_file nonlocal_utils
ImportName--->: Import
[alias(name='logging', asname=None)]
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/reinforcement_learning/reinforce.py has been written sucess[0m

[1;34mStart upgrading model dygraph/bert/run_classifier_single_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/run_classifier_single_gpu.sh has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/tokenization.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/tokenization.py has been written sucess[0m
[1;34mStart upgrading model dygraph/bert/model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/model/__init__.py has been written sucess[0m
[1;32mNo module named 'init', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/utils init.py
[1;34mStart upgrading model dygraph/bert/utils/init.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.io.is_persistable->paddle.fluid.io.is_persistable)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/init.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/reader/ctcn_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/ctcn_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/ets.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/ets.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/bsn_pem.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/bsn_pem.yaml has been written sucess[0m
[1;32mNo module named 'ets_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/ets ets_net.py
[1;34mStart upgrading model PaddleCV/video/models/ets/ets_net.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sequence_softmax->paddle.fluid.layers.sequence_softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.gru_unit->paddle.fluid.layers.gru_unit)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.sequence_pad->paddle.fluid.layers.sequence_pad)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.StaticRNN->paddle.fluid.layers.StaticRNN)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.While->paddle.fluid.layers.While)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/cycle_gan/trainer.py has been written sucess[0m

[1;34mStart upgrading model dygraph/transformer/gen_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/gen_data.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer train.py
[1;34mStart upgrading model dygraph/transformer/train.py[0m
NameFrom--->: ImportFrom
module_name---> utils.configure
NameFrom--->: ImportFrom
module_name---> utils.check
NameFrom--->: ImportFrom
module_name---> model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PDConfig', asname=None)]
ImportFrom(module='utils.configure', names=[alias(name='PDConfig', asname=None)], level=0)
module_name---> utils.configure
[1;33mfunc_name.name, and module name are[0m PDConfig utils.configure
NameFrom--->: ImportFrom
[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)]
ImportFrom(module='utils.check',
    names=[alias(name='check_gpu', asname=None), alias(name='check_version', asname=None)],
    level=0)
module_name---> utils.check
[1;33mfunc_name.name, and module name are[0m check_gpu utils.check
[1;33mfunc_name.name, and module name are[0m check_version utils.check
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Transformer', asname=None),
    alias(name='CrossEntropyCriterion', asname=None),
    alias(name='NoamDecay', asname=None)]
ImportFrom(module='model',
    names=[alias(name='Transformer', asname=None),
        alias(name='CrossEntropyCriterion', asname=None),
        alias(name='NoamDecay', asname=None)],
    level=0)
module_name---> model
[1;33mfunc_name.name, and module name are[0m Transformer model
[1;33mfunc_name.name, and module name are[0m CrossEntropyCriterion model
[1;33mfunc_name.name, and module name are[0m NoamDecay model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  Transformer model.Transformer
key, v, from_dict:  NoamDecay model.NoamDecay
key, v, from_dict:  CrossEntropyCriterion model.CrossEntropyCriterion
key, v, from_dict:  PDConfig utils.configure.PDConfig
key, v, from_dict:  check_gpu utils.check.check_gpu
key, v, from_dict:  check_version utils.check.check_version
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/bsn_tem.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/bsn_tem.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/bmn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bmn/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/bmn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bmn/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/attention_cluster/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_cluster/README.md has been written sucess[0m
[1;32mNo module named 'bsn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bsn bsn.py
[1;34mStart upgrading model PaddleCV/video/models/bsn/bsn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(fluid.initializer.NumpyArrayInitializer->paddle.fluid.initializer.NumpyArrayInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.NumpyArrayInitializer->paddle.fluid.initializer.NumpyArrayInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.Embedding)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.Linear)[0m
[3;32mRestore API full name(layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(layers.label_smooth->paddle.fluid.layers.label_smooth)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.zeros_like->paddle.fluid.layers.zeros_like)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.range->paddle.fluid.layers.range)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reduce_min->paddle.fluid.layers.reduce_min)[0m
[3;32mRestore API full name(layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(layers.greater_than->paddle.fluid.layers.greater_than)[0m
[3;32mRestore API full name(layers.reduce_all->paddle.fluid.layers.reduce_all)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.zeros_like->paddle.fluid.layers.zeros_like)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.elementwise_floordiv->paddle.fluid.layers.elementwise_floordiv)[0m
[3;32mRestore API full name(layers.elementwise_mod->paddle.fluid.layers.elementwise_mod)[0m
[3;32mRestore API full name(layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(layers.logical_or->paddle.fluid.layers.logical_or)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reduce_all->paddle.fluid.layers.reduce_all)[0m
[3;32mRestore API full name(layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(layers.gather_tree->paddle.fluid.layers.gather_tree)[0m
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  AdamOptimizer paddle.fluid.optimizer.AdamOptimizer
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  Pool2D paddle.fluid.dygraph.nn.Pool2D
key, v, from_dict:  Conv2D paddle.fluid.dygraph.nn.Conv2D
[3;32mRestore API full name(Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.prepare_context->paddle.fluid.dygraph.parallel.prepare_context)[0m
[3;32mRestore API full name(AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.DataParallel->paddle.fluid.dygraph.parallel.DataParallel)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.dygraph.parallel.Env->paddle.fluid.dygraph.parallel.Env)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/mnist/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/configs/tsn.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/configs/tsn.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'ets_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/reader ets_reader.py
[1;34mStart upgrading model PaddleCV/video/reader/ets_reader.py[0m
NameFrom--->: ImportFrom
module_name---> reader_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pickle
key, v, from_dict:  DataReader reader_utils.DataReader
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/ets_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/__init__.py has been written sucess[0m
[1;32mNo module named 'attention_lstm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/attention_lstm attention_lstm.py
[1;34mStart upgrading model PaddleCV/video/models/attention_lstm/attention_lstm.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> lstm_attention
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[1;34mStart upgrading model PaddleCV/video/data/dataset/ets/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/ets/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/nonlocal/change_filelist.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/nonlocal/change_filelist.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/bmn/gen_infer_list.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/bmn/gen_infer_list.py has been written sucess[0m
[1;32mNo module named 'tsn_res_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/models/tsn tsn_res_model.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/tsn/tsn_res_model.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/tsn/tsn_res_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/stnet/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/stnet/__init__.py has been written sucess[0m
[1;32mNo module named 'bsn_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bsn bsn_net.py
[1;34mStart upgrading model PaddleCV/video/models/bsn/bsn_net.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.diag->paddle.fluid.layers.diag)[0m
[3;32mRestore API full name(fluid.layers.ones->paddle.fluid.layers.ones)[0m
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.ones->paddle.fluid.layers.ones)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.ones)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.ones)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.ones)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.ones)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.diag->paddle.diag)[0m
[1;33mUpgrade API (paddle.fluid.layers.ones->paddle.tensor.ones)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.ones->paddle.tensor.ones)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tall/tall_net.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/attention_lstm/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_lstm/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/tsn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsn/README.md has been written sucess[0m
[1;32mNo module named 'tsn_res_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tsn tsn_res_model.py
[1;34mStart upgrading model PaddleCV/video/models/tsn/tsn_res_model.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/similarity_net/nets/paddle_layers.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/utils/config_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/utils/config_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/reader/feature_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/feature_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/attention_lstm.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/attention_lstm.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/nonlocal.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/nonlocal.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/tall/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tall/README.md has been written sucess[0m
[1;32mNo module named 'shifting_attention', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/attention_cluster shifting_attention.py
[1;34mStart upgrading model PaddleCV/video/models/attention_cluster/shifting_attention.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_cluster/shifting_attention.py has been written sucess[0m

[1;32mNo module named 'nextvlad', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nextvlad nextvlad.py
[1;34mStart upgrading model PaddleCV/video/models/nextvlad/nextvlad.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> clf_model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.core.CPUPlace->paddle.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGDOptimizer->paddle.optimizer.SGDOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/ptb_lm/ptb_dy.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/tsm/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsm/__init__.py has been written sucess[0m
[1;32mNo module named 'stnet_res_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/stnet stnet_res_model.py
[1;34mStart upgrading model PaddleCV/video/models/stnet/stnet_res_model.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.warpctc->paddle.fluid.layers.warpctc)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.ctc_greedy_decoder->paddle.fluid.layers.ctc_greedy_decoder)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.evaluator.EditDistance->paddle.fluid.evaluator.EditDistance)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.optimizer.ModelAverage->paddle.fluid.optimizer.ModelAverage)[0m
[3;32mRestore API full name(fluid.layers.ctc_greedy_decoder->paddle.fluid.layers.ctc_greedy_decoder)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.ctc_greedy_decoder->paddle.fluid.layers.ctc_greedy_decoder)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.evaluator.EditDistance->paddle.fluid.evaluator.EditDistance)[0m
[3;32mRestore API full name(fluid.layers.warpctc->paddle.fluid.layers.warpctc)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.warpctc->paddle.nn.functional.warpctc)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.ModelAverage->paddle.optimizer.ModelAverage)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.warpctc->paddle.nn.functional.warpctc)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/crnn_ctc_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/data/dataset/kinetics/video2pkl.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/kinetics/video2pkl.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/utils utility.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/utils/utility.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='signal', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/utils/utility.py has been written sucess[0m

[1;32mNo module named 'tall_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/reader tall_reader.py
[1;34mStart upgrading model PaddleCV/video/reader/tall_reader.py[0m
NameFrom--->: ImportFrom
module_name---> reader_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='h5py', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
key,value import_dict:  np numpy
key,value import_dict:  None pickle
key,value import_dict:  pickle cPickle
key, v, from_dict:  DataReader reader_utils.DataReader
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/tall_reader.py has been written sucess[0m

[1;32mNo module named 'fpn_ctcn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/ctcn fpn_ctcn.py
[1;34mStart upgrading model PaddleCV/video/models/ctcn/fpn_ctcn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> ctcn_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  get_ctc_feeder_data utility.get_ctc_feeder_data
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  get_attention_feeder_data utility.get_attention_feeder_data
key, v, from_dict:  ctc_eval crnn_ctc_model.ctc_eval
key, v, from_dict:  to_lodtensor utility.to_lodtensor
key, v, from_dict:  attention_eval attention_model.attention_eval
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.get_program_parameter->paddle.fluid.io.get_program_parameter)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/eval.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/metrics/tall_metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/tall_metrics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/youtube8m/eval_util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/youtube8m/eval_util.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/youtube8m/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/youtube8m/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bsn_metrics/bsn_pem_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bsn_metrics/bsn_pem_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bsn_metrics/bsn_tem_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bsn_metrics/bsn_tem_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/ets_metrics/ets_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/ets_metrics/ets_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/multicrop_test/multicrop_test_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/multicrop_test/multicrop_test_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/ets/generate_train_pickle.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/ets/generate_train_pickle.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/ets/generate_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/ets/generate_data.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/nonlocal/generate_filelist.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/nonlocal/generate_filelist.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/ctcn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/ctcn/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/youtube8m/mean_average_precision_calculator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/youtube8m/mean_average_precision_calculator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/configs/attention_lstm.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/configs/attention_lstm.yaml has been written sucess[0m
[1;32mNo module named 'tsn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/models/tsn tsn.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/tsn/tsn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> tsn_res_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='TSN_ResNet', asname=None)]
ImportFrom(module='tsn_res_model', names=[alias(name='TSN_ResNet', asname=None)], level=1)
module_name---> tsn_res_model
[1;33mfunc_name.name, and module name are[0m TSN_ResNet tsn_res_model
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  TSN_ResNet tsn_res_model.TSN_ResNet
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.square_error_cost->paddle.fluid.layers.square_error_cost)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bsn/bsn_net.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/adversarial/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/README.md has been written sucess[0m
[1;32mNo module named 'mnist_tutorial_deepfool', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_deepfool.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_deepfool.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.deepfool
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='DeepFoolAttack', asname=None)]
ImportFrom(module='advbox.attacks.deepfool', names=[alias(name='DeepFoolAttack', asname=None)], level=0)
module_name---> advbox.attacks.deepfool
[1;33mfunc_name.name, and module name are[0m DeepFoolAttack advbox.attacks.deepfool
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  DeepFoolAttack advbox.attacks.deepfool.DeepFoolAttack
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cosine_decay->paddle.nn.functional.cosine_decay)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.prepare_context->paddle.imperative.prepare_context)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.parallel.DataParallel->paddle.imperative.DataParallel)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/se_resnet/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/tall.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/tall.yaml has been written sucess[0m
[1;32mNo module named 'bmn_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bmn bmn_utils.py
[1;34mStart upgrading model PaddleCV/video/models/bmn/bmn_utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Uniform', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Uniform', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Uniform paddle.fluid.initializer
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='multiprocessing', asname='mp')]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  mp multiprocessing
key,value import_dict:  np numpy
key,value import_dict:  None os
key,value import_dict:  pd pandas
key, v, from_dict:  Uniform paddle.fluid.initializer.Uniform
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bmn/bmn_utils.py has been written sucess[0m

[1;32mNo module named 'tsn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tsn tsn.py
[1;34mStart upgrading model PaddleCV/video/models/tsn/tsn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> tsn_res_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='TSN_ResNet', asname=None)]
ImportFrom(module='tsn_res_model', names=[alias(name='TSN_ResNet', asname=None)], level=1)
module_name---> tsn_res_model
[1;33mfunc_name.name, and module name are[0m TSN_ResNet tsn_res_model
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  TSN_ResNet tsn_res_model.TSN_ResNet
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsn/tsn.py has been written sucess[0m

[1;32mNo module named 'mnist_tutorial_ilcm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_ilcm.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_ilcm.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.gradient_method
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key,value import_dict:  pickle cPickle
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/inference_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/utils.py has been written sucess[0m
[1;32mNo module named 'bmn_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bmn bmn_net.py
[1;34mStart upgrading model PaddleCV/video/models/bmn/bmn_net.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NumpyArrayInitializer->paddle.fluid.initializer.NumpyArrayInitializer)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.square_error_cost->paddle.fluid.layers.square_error_cost)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.layers.temporal_shift->paddle.fluid.layers.temporal_shift)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.temporal_shift->paddle.nn.functional.temporal_shift)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsm/tsm_res_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/nextvlad/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nextvlad/README.md has been written sucess[0m
[1;32mNo module named 'clf_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nextvlad clf_model.py
[1;34mStart upgrading model PaddleCV/video/models/nextvlad/clf_model.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nextvlad/clf_model.py has been written sucess[0m

[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/face_detection utility.py
[1;34mStart upgrading model PaddleCV/face_detection/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/adversarial/tutorials/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/__init__.py has been written sucess[0m
[1;32mNo module named 'mnist_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_model.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_model.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.nets.simple_img_conv_pool->paddle.fluid.nets.simple_img_conv_pool)[0m

[1;34mStart upgrading model dygraph/bert/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'pretraining', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/bert/reader pretraining.py
[1;34mStart upgrading model dygraph/bert/reader/pretraining.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> batching
[1;34mfuture count is 2 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='types', asname=None)]
ImportName--->: Import
[alias(name='gzip', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='tokenization', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='prepare_batch_data', asname=None)]
ImportFrom(module='batching', names=[alias(name='prepare_batch_data', asname=None)], level=0)
module_name---> batching
[1;33mfunc_name.name, and module name are[0m prepare_batch_data batching
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  prepare_batch_data batching.prepare_batch_data
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/reader/pretraining.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/README.md has been written sucess[0m
[1;32mNo module named 'resnet_video', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nonlocal_model resnet_video.py
[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/resnet_video.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='resnet_helper', asname=None)]
ImportFrom(module=None, names=[alias(name='resnet_helper', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m resnet_helper None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  unicode_literals __future__.unicode_literals
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.affine_channel->paddle.fluid.layers.affine_channel)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool3d->paddle.fluid.layers.pool3d)[0m
[3;32mRestore API full name(fluid.layers.pool3d->paddle.fluid.layers.pool3d)[0m
[3;32mRestore API full name(fluid.layers.pool3d->paddle.fluid.layers.pool3d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0mreader_utils.DataReader
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/reader/kinetics_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/tsn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsn/__init__.py has been written sucess[0m
[1;32mNo module named 'nextvlad_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nextvlad nextvlad_model.py
[1;34mStart upgrading model PaddleCV/video/models/nextvlad/nextvlad_model.py[0m
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='clf_model', asname=None)]
ImportFrom(module=None, names=[alias(name='clf_model', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m clf_model None
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nextvlad/nextvlad_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/lbfgs.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleST/Research/CIKM2019-MONOPOLY/README.md has been written sucess[0m
[1;32mNo module named 'data_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition data_reader.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/data_reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> os
NameFrom--->: ImportFrom
module_name---> paddle.dataset.image
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='tarfile', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='path', asname=None)]
ImportFrom(module='os', names=[alias(name='path', asname=None)], level=0)
module_name---> os
[1;33mfunc_name.name, and module name are[0m path os
NameFrom--->: ImportFrom
[alias(name='load_image', asname=None)]
ImportFrom(module='paddle.dataset.image', names=[alias(name='load_image', asname=None)], level=0)
module_name---> paddle.dataset.image
[1;33mfunc_name.name, and module name are[0m load_image paddle.dataset.image
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None random
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  load_image paddle.dataset.image.load_image
key, v, from_dict:  path os.path
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Image PIL.Image
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/data_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/attention_lstm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_lstm/README.md has been written sucess[0m
[1;32mNo module named 'lstm_attention', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/attention_lstm lstm_attention.py
[1;34mStart upgrading model PaddleCV/video/models/attention_lstm/lstm_attention.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_lstm->paddle.fluid.layers.dynamic_lstm)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_lstm/lstm_attention.py has been written sucess[0m

[1;32mNo module named 'widerface_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/face_detection widerface_eval.py
[1;34mStart upgrading model PaddleCV/face_detection/widerface_eval.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> pyramidbox
NameFrom--->: ImportFrom
module_name---> visualize
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/lbfgs.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/models/paddle.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.check_import_scipy
NameFrom--->: ImportFrom
module_name---> paddle.version
NameFrom--->: ImportFrom
module_name---> paddle.version
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.attribute
NameFrom--->: ImportFrom
module_name---> tensor.attribute
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.creation
NameFrom--->: ImportFrom
module_name---> tensor.io
NameFrom--->: ImportFrom
module_name---> tensor.io
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.linalg
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.logic
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.manipulation
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.math
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.random
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->:[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/bmn.yaml has been written sucess[0m
[1;32mNo module named 'ets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/ets ets.py
[1;34mStart upgrading model PaddleCV/video/models/ets/ets.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='ets_net', asname=None)]
ImportFrom(module=None, names=[alias(name='ets_net', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m ets_net None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler.noam_decay->paddle.fluid.layers.learning_rate_scheduler.noam_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ets/ets.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/face_detection/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/face_detection/visualize.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/visualize.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/face_detection/data/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/data/download.sh has been written sucess[0m
[1;32mNo module named 'mnist_tutorial_jsma', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_jsma.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_jsma.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.saliency
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='JSMA', asname=None)]
ImportFrom(module='advbox.attacks.saliency', names=[alias(name='JSMA', asname=None)], level=0)
module_name---> advbox.attacks.saliency
[1;33mfunc_name.name, and module name are[0m JSMA advbox.attacks.saliency
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  JSMA advbox.attacks.saliency.JSMA
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_jsma.py has been written sucess[0m

[1;32mNo module named 'README_en', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ README_en.md
[1;32mNo module named 'train_cls', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ train_cls.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/train_cls.py[0m ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> framework.random
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> framework
NameFrom--->: ImportFrom
module_name---> tensor.search
NameFrom--->: ImportFrom
module_name---> tensor.stat
NameFrom--->: ImportFrom
module_name---> tensor.stat
NameFrom--->: ImportFrom
module_name---> tensor.stat
NameFrom--->: ImportFrom
module_name---> tensor.stat
NameFrom--->: ImportFrom
module_name---> fluid.data
NameFrom--->: ImportFrom
module_name---> None
NameFrom--->: ImportFrom
module_name---> incubate
NameFrom--->: ImportFrom
module_name---> fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> fluid.framework
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='check_import_scipy', asname=None)]
ImportFrom(module='paddle.check_import_scipy', names=[alias(name='check_import_scipy', asname=None)], level=0)
module_name---> paddle.check_import_scipy
[1;33mfunc_name.name, and module name are[0m check_import_scipy paddle.check_import_scipy
NameFrom--->: ImportFrom
[alias(name='full_version', asname='__version__')]
ImportFrom(module='paddle.version', names=[alias(name='full_version', asname='__version__')], level=0)
module_name---> paddle.version
[1;33mfunc_name.name, and module name are[0m full_version paddle.version
NameFrom--->: ImportFrom
[alias(name='commit', asname='__git_commit__')]
ImportFrom(module='paddle.version', names=[alias(name='commit', asname='__git_commit__')], level=0)
module_name---> paddle.version
[1;33mfunc_name.name, and module name are[0m commit paddle.version
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.reader', asname=None)]
ImportName--->: Import
[alias(name='paddle.dataset', asname=None)]
ImportName--->: Import
[alias(name='paddle.batch', asname=None)]
ImportName--->: Import
[alias(name='paddle.compat', asname=None)]
ImportName--->: Import
[alias(name='paddle.distributed', asname=None)]
ImportName--->: Import
[alias(name='paddle.sysconfig', asname=None)]
ImportName--->: Import
[alias(name='paddle.tensor', asname=None)]
ImportName--->: Import
[alias(name='paddle.nn', asname=None)]
ImportName--->: Import
[alias(name='paddle.framework', asname=None)]
ImportName--->: Import
[alias(name='paddle.imperative', asname=None)]
ImportName--->: Import
[alias(name='paddle.optimizer', asname=None)]
ImportName--->: Import
[alias(name='paddle.metric', asname=None)]
ImportName--->: Import
[alias(name='paddle.incubate.complex', asname='complex')]
NameFrom--->: ImportFrom
[alias(name='randperm', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='randperm', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m randperm tensor.random
NameFrom--->: ImportFrom
[alias(name='rank', asname=None)]
ImportFrom(module='tensor.attribute', names=[alias(name='rank', asname=None)], level=1)
module_name---> tensor.attribute
[1;33mfunc_name.name, and module name are[0m rank tensor.attribute
NameFrom--->: ImportFrom
[alias(name='shape', asname=None)]
ImportFrom(module='tensor.attribute', names=[alias(name='shape', asname=None)], level=1)
module_name---> tensor.attribute
[1;33mfunc_name.name, and module name are[0m shape tensor.attribute
NameFrom--->: ImportFrom
[alias(name='create_tensor', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='create_tensor', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m create_tensor tensor.creation
NameFrom--->: ImportFrom
[alias(name='crop_tensor', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='crop_tensor', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m crop_tensor tensor.creation
NameFrom--->: ImportFrom
[alias(name='diag', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='diag', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m diag tensor.creation
NameFrom--->: ImportFrom
[alias(name='eye', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='eye', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m eye tensor.creation
NameFrom--->: ImportFrom
[alias(name='fill_constant', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='fill_constant', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m fill_constant tensor.creation
NameFrom--->: ImportFrom
[alias(name='linspace', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='linspace', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m linspace tensor.creation
NameFrom--->: ImportFrom
[alias(name='ones', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='ones', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m ones tensor.creation
NameFrom--->: ImportFrom
[alias(name='ones_like', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='ones_like', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m ones_like tensor.creation
NameFrom--->: ImportFrom
[alias(name='zeros', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='zeros', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m zeros tensor.creation
NameFrom--->: ImportFrom
[alias(name='zeros_like', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='zeros_like', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m zeros_like tensor.creation
NameFrom--->: ImportFrom
[alias(name='arange', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='arange', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m arange tensor.creation
NameFrom--->: ImportFrom
[alias(name='eye', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='eye', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m eye tensor.creation
NameFrom--->: ImportFrom
[alias(name='full', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='full', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m full tensor.creation
NameFrom--->: ImportFrom
[alias(name='full_like', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='full_like', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m full_like tensor.creation
NameFrom--->: ImportFrom
[alias(name='triu', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='triu', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m triu tensor.creation
NameFrom--->: ImportFrom
[alias(name='tril', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='tril', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m tril tensor.creation
NameFrom--->: ImportFrom
[alias(name='meshgrid', asname=None)]
ImportFrom(module='tensor.creation', names=[alias(name='meshgrid', asname=None)], level=1)
module_name---> tensor.creation
[1;33mfunc_name.name, and module name are[0m meshgrid tensor.creation
NameFrom--->: ImportFrom
[alias(name='save', asname=None)]
ImportFrom(module='tensor.io', names=[alias(name='save', asname=None)], level=1)
module_name---> tensor.io
[1;33mfunc_name.name, and module name are[0m save tensor.io
NameFrom--->: ImportFrom
[alias(name='load', asname=None)]
ImportFrom(module='tensor.io', names=[alias(name='load', asname=None)], level=1)
module_name---> tensor.io
[1;33mfunc_name.name, and module name are[0m load tensor.io
NameFrom--->: ImportFrom
[alias(name='matmul', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='matmul', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m matmul tensor.linalg
NameFrom--->: ImportFrom
[alias(name='dot', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='dot', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m dot tensor.linalg
NameFrom--->: ImportFrom
[alias(name='norm', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='norm', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m norm tensor.linalg
NameFrom--->: ImportFrom
[alias(name='transpose', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='transpose', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m transpose tensor.linalg
NameFrom--->: ImportFrom
[alias(name='dist', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='dist', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m dist tensor.linalg
NameFrom--->: ImportFrom
[alias(name='t', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='t', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m t tensor.linalg
NameFrom--->: ImportFrom
[alias(name='cross', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='cross', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m cross tensor.linalg
NameFrom--->: ImportFrom
[alias(name='cholesky', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='cholesky', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m cholesky tensor.linalg
NameFrom--->: ImportFrom
[alias(name='bmm', asname=None)]
ImportFrom(module='tensor.linalg', names=[alias(name='bmm', asname=None)], level=1)
module_name---> tensor.linalg
[1;33mfunc_name.name, and module name are[0m bmm tensor.linalg
NameFrom--->: ImportFrom
[alias(name='equal', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='equal', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m equal tensor.logic
NameFrom--->: ImportFrom
[alias(name='greater_equal', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='greater_equal', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m greater_equal tensor.logic
NameFrom--->: ImportFrom
[alias(name='greater_than', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='greater_than', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m greater_than tensor.logic
NameFrom--->: ImportFrom
[alias(name='is_empty', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='is_empty', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m is_empty tensor.logic
NameFrom--->: ImportFrom
[alias(name='isfinite', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='isfinite', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m isfinite tensor.logic
NameFrom--->: ImportFrom
[alias(name='less_equal', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='less_equal', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m less_equal tensor.logic
NameFrom--->: ImportFrom
[alias(name='less_than', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='less_than', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m less_than tensor.logic
NameFrom--->: ImportFrom
[alias(name='logical_and', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='logical_and', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m logical_and tensor.logic
NameFrom--->: ImportFrom
[alias(name='logical_not', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='logical_not', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m logical_not tensor.logic
NameFrom--->: ImportFrom
[alias(name='logical_or', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='logical_or', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m logical_or tensor.logic
NameFrom--->: ImportFrom
[alias(name='logical_xor', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='logical_xor', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m logical_xor tensor.logic
NameFrom--->: ImportFrom
[alias(name='not_equal', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='not_equal', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m not_equal tensor.logic
NameFrom--->: ImportFrom
[alias(name='reduce_all', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='reduce_all', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m reduce_all tensor.logic
NameFrom--->: ImportFrom
[alias(name='reduce_any', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='reduce_any', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m reduce_any tensor.logic
NameFrom--->: ImportFrom
[alias(name='allclose', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='allclose', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m allclose tensor.logic
NameFrom--->: ImportFrom
[alias(name='elementwise_equal', asname=None)]
ImportFrom(module='tensor.logic', names=[alias(name='elementwise_equal', asname=None)], level=1)
module_name---> tensor.logic
[1;33mfunc_name.name, and module name are[0m elementwise_equal tensor.logic
NameFrom--->: ImportFrom
[alias(name='cast', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='cast', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m cast tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='concat', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='concat', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m concat tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='expand', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='expand', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m expand tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='expand_as', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='expand_as', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m expand_as tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='flatten', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='flatten', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m flatten tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='gather', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='gather', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m gather tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='gather_nd', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='gather_nd', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m gather_nd tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='reshape', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='reshape', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m reshape tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='reverse', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='reverse', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m reverse tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='scatter', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='scatter', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m scatter tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='scatter_nd_add', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='scatter_nd_add', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m scatter_nd_add tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='scatter_nd', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='scatter_nd', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m scatter_nd tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='shard_index', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='shard_index', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m shard_index tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='slice', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='slice', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m slice tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='split', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='split', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m split tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='squeeze', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='squeeze', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m squeeze tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='stack', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='stack', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m stack tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='strided_slice', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='strided_slice', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m strided_slice tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='transpose', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='transpose', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m transpose tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='unique', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='unique', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m unique tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='unique_with_counts', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='unique_with_counts', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m unique_with_counts tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='unsqueeze', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='unsqueeze', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m unsqueeze tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='unstack', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='unstack', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m unstack tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='flip', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='flip', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m flip tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='unbind', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='unbind', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m unbind tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='roll', asname=None)]
ImportFrom(module='tensor.manipulation', names=[alias(name='roll', asname=None)], level=1)
module_name---> tensor.manipulation
[1;33mfunc_name.name, and module name are[0m roll tensor.manipulation
NameFrom--->: ImportFrom
[alias(name='abs', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='abs', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m abs tensor.math
NameFrom--->: ImportFrom
[alias(name='acos', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='acos', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m acos tensor.math
NameFrom--->: ImportFrom
[alias(name='asin', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='asin', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m asin tensor.math
NameFrom--->: ImportFrom
[alias(name='atan', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='atan', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m atan tensor.math
NameFrom--->: ImportFrom
[alias(name='ceil', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='ceil', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m ceil tensor.math
NameFrom--->: ImportFrom
[alias(name='cos', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='cos', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m cos tensor.math
NameFrom--->: ImportFrom
[alias(name='cumsum', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='cumsum', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m cumsum tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_add', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_add', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_add tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_div', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_div', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_div tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_floordiv', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_floordiv', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_floordiv tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_max', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_max', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_max tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_min', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_min', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_min tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_mod', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_mod', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_mod tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_mul', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_mul', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_mul tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_pow', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_pow', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_pow tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_sub', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_sub', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_sub tensor.math
NameFrom--->: ImportFrom
[alias(name='exp', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='exp', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m exp tensor.math
NameFrom--->: ImportFrom
[alias(name='floor', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='floor', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m floor tensor.math
NameFrom--->: ImportFrom
[alias(name='increment', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='increment', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m increment tensor.math
NameFrom--->: ImportFrom
[alias(name='log', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='log', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m log tensor.math
NameFrom--->: ImportFrom
[alias(name='mul', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='mul', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m mul tensor.math
NameFrom--->: ImportFrom
[alias(name='multiplex', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='multiplex', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m multiplex tensor.math
NameFrom--->: ImportFrom
[alias(name='pow', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='pow', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m pow tensor.math
NameFrom--->: ImportFrom
[alias(name='reciprocal', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='reciprocal', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m reciprocal tensor.math
NameFrom--->: ImportFrom
[alias(name='reduce_max', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='reduce_max', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m reduce_max tensor.math
NameFrom--->: ImportFrom
[alias(name='reduce_min', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='reduce_min', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m reduce_min tensor.math
NameFrom--->: ImportFrom
[alias(name='reduce_prod', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='reduce_prod', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m reduce_prod tensor.math
NameFrom--->: ImportFrom
[alias(name='reduce_sum', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='reduce_sum', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m reduce_sum tensor.math
NameFrom--->: ImportFrom
[alias(name='round', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='round', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m round tensor.math
NameFrom--->: ImportFrom
[alias(name='rsqrt', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='rsqrt', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m rsqrt tensor.math
NameFrom--->: ImportFrom
[alias(name='scale', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='scale', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m scale tensor.math
NameFrom--->: ImportFrom
[alias(name='sign', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='sign', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m sign tensor.math
NameFrom--->: ImportFrom
[alias(name='sin', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='sin', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m sin tensor.math
NameFrom--->: ImportFrom
[alias(name='sqrt', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='sqrt', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m sqrt tensor.math
NameFrom--->: ImportFrom
[alias(name='square', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='square', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m square tensor.math
NameFrom--->: ImportFrom
[alias(name='stanh', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='stanh', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m stanh tensor.math
NameFrom--->: ImportFrom
[alias(name='sum', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='sum', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m sum tensor.math
NameFrom--->: ImportFrom
[alias(name='sums', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='sums', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m sums tensor.math
NameFrom--->: ImportFrom
[alias(name='tanh', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='tanh', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m tanh tensor.math
NameFrom--->: ImportFrom
[alias(name='elementwise_sum', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='elementwise_sum', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m elementwise_sum tensor.math
NameFrom--->: ImportFrom
[alias(name='max', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='max', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m max tensor.math
NameFrom--->: ImportFrom
[alias(name='min', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='min', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m min tensor.math
NameFrom--->: ImportFrom
[alias(name='mm', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='mm', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m mm tensor.math
NameFrom--->: ImportFrom
[alias(name='div', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='div', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m div tensor.math
NameFrom--->: ImportFrom
[alias(name='add', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='add', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m add tensor.math
NameFrom--->: ImportFrom
[alias(name='atan', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='atan', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m atan tensor.math
NameFrom--->: ImportFrom
[alias(name='logsumexp', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='logsumexp', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m logsumexp tensor.math
NameFrom--->: ImportFrom
[alias(name='inverse', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='inverse', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m inverse tensor.math
NameFrom--->: ImportFrom
[alias(name='log1p', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='log1p', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m log1p tensor.math
NameFrom--->: ImportFrom
[alias(name='erf', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='erf', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m erf tensor.math
NameFrom--->: ImportFrom
[alias(name='addcmul', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='addcmul', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m addcmul tensor.math
NameFrom--->: ImportFrom
[alias(name='addmm', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='addmm', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m addmm tensor.math
NameFrom--->: ImportFrom
[alias(name='clamp', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='clamp', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m clamp tensor.math
NameFrom--->: ImportFrom
[alias(name='trace', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='trace', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m trace tensor.math
NameFrom--->: ImportFrom
[alias(name='kron', asname=None)]
ImportFrom(module='tensor.math', names=[alias(name='kron', asname=None)], level=1)
module_name---> tensor.math
[1;33mfunc_name.name, and module name are[0m kron tensor.math
NameFrom--->: ImportFrom
[alias(name='shuffle', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='shuffle', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m shuffle tensor.random
NameFrom--->: ImportFrom
[alias(name='randn', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='randn', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m randn tensor.random
NameFrom--->: ImportFrom
[alias(name='rand', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='rand', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m rand tensor.random
NameFrom--->: ImportFrom
[alias(name='randint', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='randint', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m randint tensor.random
NameFrom--->: ImportFrom
[alias(name='randperm', asname=None)]
ImportFrom(module='tensor.random', names=[alias(name='randperm', asname=None)], level=1)
module_name---> tensor.random
[1;33mfunc_name.name, and module name are[0m randperm tensor.random
NameFrom--->: ImportFrom
[alias(name='argmax', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='argmax', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m argmax tensor.search
NameFrom--->: ImportFrom
[alias(name='argmin', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='argmin', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m argmin tensor.search
NameFrom--->: ImportFrom
[alias(name='argsort', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='argsort', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m argsort tensor.search
NameFrom--->: ImportFrom
[alias(name='has_inf', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='has_inf', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m has_inf tensor.search
NameFrom--->: ImportFrom
[alias(name='has_nan', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='has_nan', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m has_nan tensor.search
NameFrom--->: ImportFrom
[alias(name='topk', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='topk', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m topk tensor.search
NameFrom--->: ImportFrom
[alias(name='where', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='where', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m where tensor.search
NameFrom--->: ImportFrom
[alias(name='index_select', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='index_select', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m index_select tensor.search
NameFrom--->: ImportFrom
[alias(name='nonzero', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='nonzero', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m nonzero tensor.search
NameFrom--->: ImportFrom
[alias(name='sort', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='sort', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m sort tensor.search
NameFrom--->: ImportFrom
[alias(name='manual_seed', asname=None)]
ImportFrom(module='framework.random', names=[alias(name='manual_seed', asname=None)], level=1)
module_name---> framework.random
[1;33mfunc_name.name, and module name are[0m manual_seed framework.random
NameFrom--->: ImportFrom
[alias(name='append_backward', asname=None)]
ImportFrom(module='framework', names=[alias(name='append_backward', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m append_backward framework
NameFrom--->: ImportFrom
[alias(name='gradients', asname=None)]
ImportFrom(module='framework', names=[alias(name='gradients', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m gradients framework
NameFrom--->: ImportFrom
[alias(name='Executor', asname=None)]
ImportFrom(module='framework', names=[alias(name='Executor', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m Executor framework
NameFrom--->: ImportFrom
[alias(name='global_scope', asname=None)]
ImportFrom(module='framework', names=[alias(name='global_scope', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m global_scope framework
NameFrom--->: ImportFrom
[alias(name='scope_guard', asname=None)]
ImportFrom(module='framework', names=[alias(name='scope_guard', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m scope_guard framework
NameFrom--->: ImportFrom
[alias(name='BuildStrategy', asname=None)]
ImportFrom(module='framework', names=[alias(name='BuildStrategy', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m BuildStrategy framework
NameFrom--->: ImportFrom
[alias(name='CompiledProgram', asname=None)]
ImportFrom(module='framework', names=[alias(name='CompiledProgram', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m CompiledProgram framework
NameFrom--->: ImportFrom
[alias(name='default_main_program', asname=None)]
ImportFrom(module='framework', names=[alias(name='default_main_program', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m default_main_program framework
NameFrom--->: ImportFrom
[alias(name='default_startup_program', asname=None)]
ImportFrom(module='framework', names=[alias(name='default_startup_program', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m default_startup_program framework
NameFrom--->: ImportFrom
[alias(name='create_global_var', asname=None)]
ImportFrom(module='framework', names=[alias(name='create_global_var', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m create_global_var framework
NameFrom--->: ImportFrom
[alias(name='create_parameter', asname=None)]
ImportFrom(module='framework', names=[alias(name='create_parameter', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m create_parameter framework
NameFrom--->: ImportFrom
[alias(name='Print', asname=None)]
ImportFrom(module='framework', names=[alias(name='Print', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m Print framework
NameFrom--->: ImportFrom
[alias(name='py_func', asname=None)]
ImportFrom(module='framework', names=[alias(name='py_func', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m py_func framework
NameFrom--->: ImportFrom
[alias(name='ExecutionStrategy', asname=None)]
ImportFrom(module='framework', names=[alias(name='ExecutionStrategy', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m ExecutionStrategy framework
NameFrom--->: ImportFrom
[alias(name='name_scope', asname=None)]
ImportFrom(module='framework', names=[alias(name='name_scope', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m name_scope framework
NameFrom--->: ImportFrom
[alias(name='ParallelExecutor', asname=None)]
ImportFrom(module='framework', names=[alias(name='ParallelExecutor', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m ParallelExecutor framework
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='framework', names=[alias(name='ParamAttr', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m ParamAttr framework
NameFrom--->: ImportFrom
[alias(name='Program', asname=None)]
ImportFrom(module='framework', names=[alias(name='Program', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m Program framework
NameFrom--->: ImportFrom
[alias(name='program_guard', asname=None)]
ImportFrom(module='framework', names=[alias(name='program_guard', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m program_guard framework
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None)]
ImportFrom(module='framework', names=[alias(name='Variable', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m Variable framework
NameFrom--->: ImportFrom
[alias(name='WeightNormParamAttr', asname=None)]
ImportFrom(module='framework', names=[alias(name='WeightNormParamAttr', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m WeightNormParamAttr framework
NameFrom--->: ImportFrom
[alias(name='CPUPlace', asname=None)]
ImportFrom(module='framework', names=[alias(name='CPUPlace', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m CPUPlace framework
NameFrom--->: ImportFrom
[alias(name='CUDAPlace', asname=None)]
ImportFrom(module='framework', names=[alias(name='CUDAPlace', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m CUDAPlace framework
NameFrom--->: ImportFrom
[alias(name='CUDAPinnedPlace', asname=None)]
ImportFrom(module='framework', names=[alias(name='CUDAPinnedPlace', asname=None)], level=1)
module_name---> framework
[1;33mfunc_name.name, and module name are[0m CUDAPinnedPlace framework
NameFrom--->: ImportFrom
[alias(name='index_sample', asname=None)]
ImportFrom(module='tensor.search', names=[alias(name='index_sample', asname=None)], level=1)
module_name---> tensor.search
[1;33mfunc_name.name, and module name are[0m index_sample tensor.search
NameFrom--->: ImportFrom
[alias(name='mean', asname=None)]
ImportFrom(module='tensor.stat', names=[alias(name='mean', asname=None)], level=1)
module_name---> tensor.stat
[1;33mfunc_name.name, and module name are[0m mean tensor.stat
NameFrom--->: ImportFrom
[alias(name='reduce_mean', asname=None)]
ImportFrom(module='tensor.stat', names=[alias(name='reduce_mean', asname=None)], level=1)
module_name---> tensor.stat
[1;33mfunc_name.name, and module name are[0m reduce_mean tensor.stat
NameFrom--->: ImportFrom
[alias(name='std', asname=None)]
ImportFrom(module='tensor.stat', names=[alias(name='std', asname=None)], level=1)
module_name---> tensor.stat
[1;33mfunc_name.name, and module name are[0m std tensor.stat
NameFrom--->: ImportFrom
[alias(name='var', asname=None)]
ImportFrom(module='tensor.stat', names=[alias(name='var', asname=None)], level=1)
module_name---> tensor.stat
[1;33mfunc_name.name, and module name are[0m var tensor.stat
NameFrom--->: ImportFrom
[alias(name='data', asname=None)]
ImportFrom(module='fluid.data', names=[alias(name='data', asname=None)], level=1)
module_name---> fluid.data
[1;33mfunc_name.name, and module name are[0m data fluid.data
NameFrom--->: ImportFrom
[alias(name='incubate', asname=None)]
ImportFrom(module=None, names=[alias(name='incubate', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m incubate None
NameFrom--->: ImportFrom
[alias(name='hapi', asname=None)]
ImportFrom(module='incubate', names=[alias(name='hapi', asname=None)], level=1)
module_name---> incubate
[1;33mfunc_name.name, and module name are[0m hapi incubate
NameFrom--->: ImportFrom
[alias(name='enable_dygraph', asname='enable_imperative')]
ImportFrom(module='fluid.dygraph.base', names=[alias(name='enable_dygraph', asname='enable_imperative')], level=1)
module_name---> fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m enable_dygraph fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='disable_dygraph', asname='disable_imperative')]
ImportFrom(module='fluid.dygraph.base', names=[alias(name='disable_dygraph', asname='disable_imperative')], level=1)
module_name---> fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m disable_dygraph fluid.dygraph.base
NameFrom--->: ImportFrom
[alias(name='in_dygraph_mode', asname='in_imperative_mode')]
ImportFrom(module='fluid.framework', names=[alias(name='in_dygraph_mode', asname='in_imperative_mode')], level=1)
module_name---> fluid.framework
[1;33mfunc_name.name, and module name are[0m in_dygraph_mode fluid.framework
key,value import_dict:  None paddle.metric
key,value import_dict:  complex paddle.incubate.complex
key, v, from_dict:  CPUPlace framework.CPUPlace
key, v, from_dict:  clamp tensor.math.clamp
key, v, from_dict:  log tensor.math.log
key, v, from_dict:  Executor framework.Executor
key, v, from_dict:  unique tensor.manipulation.unique
key, v, from_dict:  full_like tensor.creation.full_like
key, v, from_dict:  add tensor.math.add
key, v, from_dict:  has_inf tensor.search.has_inf
key, v, from_dict:  rank tensor.attribute.rank
key, v, from_dict:  round tensor.math.round
key, v, from_dict:  roll tensor.manipulation.roll
key, v, from_dict:  mm tensor.math.mm
key, v, from_dict:  scale tensor.math.scale
key, v, from_dict:  CUDAPinnedPlace framework.CUDAPinnedPlace
key, v, from_dict:  greater_equal tensor.logic.greater_equal
key, v, from_dict:  Variable framework.Variable
key, v, from_dict:  scatter tensor.manipulation.scatter
key, v, from_dict:  ExecutionStrategy framework.ExecutionStrategy
key, v, from_dict:  manual_seed framework.random.manual_seed
key, v, from_dict:  where tensor.search.where
key, v, from_dict:  trace tensor.math.trace
key, v, from_dict:  flip tensor.manipulation.flip
key, v, from_dict:  concat tensor.manipulation.concat
key, v, from_dict:  reshape tensor.manipulation.reshape
key, v, from_dict:  elementwise_min tensor.math.elementwise_min
key, v, from_dict:  default_startup_program framework.default_startup_program
key, v, from_dict:  cholesky tensor.linalg.cholesky
key, v, from_dict:  expand tensor.manipulation.expand
key, v, from_dict:  has_nan tensor.search.has_nan
key, v, from_dict:  argsort tensor.search.argsort
key, v, from_dict:  cast tensor.manipulation.cast
key, v, from_dict:  bmm tensor.linalg.bmm
key, v, from_dict:  var tensor.stat.var
key, v, from_dict:  index_sample tensor.search.index_sample
key, v, from_dict:  disable_dygraph fluid.dygraph.base.disable_dygraph
key, v, from_dict:  greater_than tensor.logic.greater_than
key, v, from_dict:  erf tensor.math.erf
key, v, from_dict:  transpose tensor.manipulation.transpose
key, v, from_dict:  ones_like tensor.creation.ones_like
key, v, from_dict:  reciprocal tensor.math.reciprocal
key, v, from_dict:  scatter_nd tensor.manipulation.scatter_nd
key, v, from_dict:  gradients framework.gradients
key, v, from_dict:  logical_not tensor.logic.logical_not
key, v, from_dict:  enable_dygraph fluid.dygraph.base.enable_dygraph
key, v, from_dict:  logical_or tensor.logic.logical_or
key, v, from_dict:  zeros tensor.creation.zeros
key, v, from_dict:  reverse tensor.manipulation.reverse
key, v, from_dict:  ParallelExecutor framework.ParallelExecutor
key, v, from_dict:  reduce_any tensor.logic.reduce_any
key, v, from_dict:  dist tensor.linalg.dist
key, v, from_dict:  increment tensor.math.increment
key, v, from_dict:  append_backward framework.append_backward
key, v, from_dict:  ones tensor.creation.ones
key, v, from_dict:  eye tensor.creation.eye
key, v, from_dict:  dot tensor.linalg.dot
key, v, from_dict:  elementwise_sum tensor.math.elementwise_sum
key, v, from_dict:  Program framework.Program
key, v, from_dict:  multiplex tensor.math.multiplex
key, v, from_dict:  addmm tensor.math.addmm
key, v, from_dict:  elementwise_add tensor.math.elementwise_add
key, v, from_dict:  allclose tensor.logic.allclose
key, v, from_dict:  kron tensor.math.kron
key, v, from_dict:  save tensor.io.save
key, v, from_dict:  logsumexp tensor.math.logsumexp
key, v, from_dict:  shard_index tensor.manipulation.shard_index
key, v, from_dict:  unique_with_counts tensor.manipulation.unique_with_counts
key, v, from_dict:  max tensor.math.max
key, v, from_dict:  stanh tensor.math.stanh
key, v, from_dict:  reduce_mean tensor.stat.reduce_mean
key, v, from_dict:  CUDAPlace framework.CUDAPlace
key, v, from_dict:  floor tensor.math.floor
key, v, from_dict:  slice tensor.manipulation.slice
key, v, from_dict:  reduce_min tensor.math.reduce_min
key, v, from_dict:  acos tensor.math.acos
key, v, from_dict:  CompiledProgram framework.CompiledProgram
key, v, from_dict:  isfinite tensor.logic.isfinite
key, v, from_dict:  tanh tensor.math.tanh
key, v, from_dict:  elementwise_pow tensor.math.elementwise_pow
key, v, from_dict:  abs tensor.math.abs
key, v, from_dict:  tril tensor.creation.tril
key, v, from_dict:  nonzero tensor.search.nonzero
key, v, from_dict:  argmin tensor.search.argmin
key, v, from_dict:  asin tensor.math.asin
key, v, from_dict:  global_scope framework.global_scope
key, v, from_dict:  min tensor.math.min
key, v, from_dict:  elementwise_mul tensor.math.elementwise_mul
key, v, from_dict:  is_empty tensor.logic.is_empty
key, v, from_dict:  sort tensor.search.sort
key, v, from_dict:  div tensor.math.div
key, v, from_dict:  fill_constant tensor.creation.fill_constant
key, v, from_dict:  strided_slice tensor.manipulation.strided_slice
key, v, from_dict:  scope_guard framework.scope_guard
key, v, from_dict:  reduce_max tensor.math.reduce_max
key, v, from_dict:  mean tensor.stat.mean
key, v, from_dict:  load tensor.io.load
key, v, from_dict:  zeros_like tensor.creation.zeros_like
key, v, from_dict:  std tensor.stat.std
key, v, from_dict:  addcmul tensor.math.addcmul
key, v, from_dict:  elementwise_div tensor.math.elementwise_div
key, v, from_dict:  create_parameter framework.create_parameter
key, v, from_dict:  full tensor.creation.full
key, v, from_dict:  hapi incubate.hapi
key, v, from_dict:  gather tensor.manipulation.gather
key, v, from_dict:  randint tensor.random.randint
key, v, from_dict:  less_equal tensor.logic.less_equal
key, v, from_dict:  full_version paddle.version.full_version
key, v, from_dict:  reduce_sum tensor.math.reduce_sum
key, v, from_dict:  equal tensor.logic.equal
key, v, from_dict:  expand_as tensor.manipulation.expand_as
key, v, from_dict:  name_scope framework.name_scope
key, v, from_dict:  arange tensor.creation.arange
key, v, from_dict:  crop_tensor tensor.creation.crop_tensor
key, v, from_dict:  logical_xor tensor.logic.logical_xor
key, v, from_dict:  unbind tensor.manipulation.unbind
key, v, from_dict:  exp tensor.math.exp
key, v, from_dict:  randn tensor.random.randn
key, v, from_dict:  elementwise_sub tensor.math.elementwise_sub
key, v, from_dict:  rsqrt tensor.math.rsqrt
key, v, from_dict:  cos tensor.math.cos
key, v, from_dict:  elementwise_floordiv tensor.math.elementwise_floordiv
key, v, from_dict:  unstack tensor.manipulation.unstack
key, v, from_dict:  elementwise_mod tensor.math.elementwise_mod
key, v, from_dict:  sign tensor.math.sign
key, v, from_dict:  reduce_all tensor.logic.reduce_all
key, v, from_dict:  ParamAttr framework.ParamAttr
key, v, from_dict:  ceil tensor.math.ceil
key, v, from_dict:  matmul tensor.linalg.matmul
key, v, from_dict:  data fluid.data.data
key, v, from_dict:  logical_and tensor.logic.logical_and
key, v, from_dict:  meshgrid tensor.creation.meshgrid
key, v, from_dict:  split tensor.manipulation.split
key, v, from_dict:  reduce_prod tensor.math.reduce_prod
key, v, from_dict:  inverse tensor.math.inverse
key, v, from_dict:  shuffle tensor.random.shuffle
key, v, from_dict:  default_main_program framework.default_main_program
key, v, from_dict:  gather_nd tensor.manipulation.gather_nd
key, v, from_dict:  argmax tensor.search.argmax
key, v, from_dict:  shape tensor.attribute.shape
key, v, from_dict:  sqrt tensor.math.sqrt
key, v, from_dict:  atan tensor.math.atan
key, v, from_dict:  linspace tensor.creation.linspace
key, v, from_dict:  index_select tensor.search.index_select
key, v, from_dict:  stack tensor.manipulation.stack
key, v, from_dict:  square tensor.math.square
key, v, from_dict:  topk tensor.search.topk
key, v, from_dict:  elementwise_equal tensor.logic.elementwise_equal
key, v, from_dict:  flatten tensor.manipulation.flatten
key, v, from_dict:  unsqueeze tensor.manipulation.unsqueeze
key, v, from_dict:  diag tensor.creation.diag
key, v, from_dict:  py_func framework.py_func
key, v, from_dict:  WeightNormParamAttr framework.WeightNormParamAttr
key, v, from_dict:  less_than tensor.logic.less_than
key, v, from_dict:  BuildStrategy framework.BuildStrategy
key, v, from_dict:  cross tensor.linalg.cross
key, v, from_dict:  
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(layers.logical_or->paddle.fluid.layers.logical_or)[0m
[3;32mRestore API full name(layers.reduce_all->paddle.fluid.layers.reduce_all)[0m
[3;32mRestore API full name(layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.zeros_like)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.zeros_like)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (dtype) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.range)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_min)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (dtype) to API (paddle.fluid.layers.zeros_like)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_min->paddle.elementwise_min)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.LayerNorm->paddle.nn.LayerNorm)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Embedding->paddle.nn.Embedding)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.Linear->paddle.nn.Linear)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.label_smooth->paddle.nn.functional.label_smooth)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros_like->paddle.tensor.zeros_like)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.range->paddle.tensor.arange)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_min->paddle.tensor.min)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_all->paddle.reduce_all)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fleet.distributed_optimizer->paddle.fluid.incubate.fleet.collective.fleet.distributed_optimizer)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/train_dist.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/ctcn.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/ctcn.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/configs/stnet.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/stnet.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/ets/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ets/__init__.py has been written sucess[0m
[1;32mNo module named 'tsm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tsm tsm.py
[1;34mStart upgrading model PaddleCV/video/models/tsm/tsm.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> tsm_res_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='TSM_ResNet', asname=None)]
ImportFrom(module='tsm_res_model', names=[alias(name='TSM_ResNet', asname=None)], level=1)
module_name---> tsm_res_model
[1;33mfunc_name.name, and module name are[0m TSM_ResNet tsm_res_model
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  TSM_ResNet tsm_res_model.TSM_ResNet
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsm/tsm.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/face_detection/README_cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/README_cn.md has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/face_detection reader.py
[1;34mStart upgrading model PaddleCV/face_detection/reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> itertools
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='ImageDraw', asname=None)]
ImportFrom(module='PIL', names=[alias(name='ImageDraw', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m ImageDraw PIL
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='xml.etree.ElementTree', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='islice', asname=None)]
ImportFrom(module='itertools', names=[alias(name='islice', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m islice itertools
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='image_util', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None image_util
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/sentiment/nets.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/data/dataset/tall/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/tall/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/youtube8m/tf2pkl.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/youtube8m/tf2pkl.py has been written sucess[0m
[1;32mNo module named 'model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag/models model.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/model.py[0m
NameFrom--->: ImportFrom
module_name---> configparser
NameFrom--->: ImportFrom
module_name---> ConfigParser
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='wget', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ConfigParser', asname=None)]
ImportFrom(module='configparser', names=[alias(name='ConfigParser', asname=None)], level=0)
module_name---> configparser
[1;33mfunc_name.name, and module name are[0m ConfigParser configparser
NameFrom--->: ImportFrom
[alias(name='ConfigParser', asname=None)]
ImportFrom(module='ConfigParser', names=[alias(name='ConfigParser', asname=None)], level=0)
module_name---> ConfigParser
[1;33mfunc_name.name, and module name are[0m ConfigParser ConfigParser
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='download', asname=None), alias(name='AttrDict', asname=None)]
ImportFrom(module='utils', names=[alias(name='download', asname=None), alias(name='AttrDict', asname=None)], level=1)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m download utils
[1;33mfunc_name.name, and module name are[0m AttrDict utils
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  download utils.download
key, v, from_dict:  ConfigParser ConfigParser.ConfigParser
key, v, from_dict:  AttrDict utils.AttrDict
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/model.py has been written sucess[0m

[1;32mNo module named 'resnet_helper', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nonlocal_model resnet_helper.py
[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/resnet_helper.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.elementwise_floordiv->paddle.fluid.layers.elementwise_floordiv)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mod->paddle.fluid.layers.elementwise_mod)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(fluid.layers.logical_or->paddle.fluid.layers.logical_or)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(fluid.layers.gather_tree->paddle.fluid.layers.gather_tree)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.stack)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_floordiv->paddle.elementwise_floordiv)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mod->paddle.elementwise_mod)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  load_weights_params_from_file nonlocal_utils.load_weights_params_from_file
key, v, from_dict:  load_pretrain_params_from_file nonlocal_utils.load_pretrain_params_from_file
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/nonlocal_model.py has been written sucess[0m

[1;32mNo module named 'pyramidbox', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/face_detection pyramidbox.py
[1;34mStart upgrading model PaddleCV/face_detection/pyramidbox.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.regularizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Xavier', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Xavier', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Xavier paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Bilinear', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Bilinear', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Bilinear paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='L2Decay', asname=None)]
ImportFrom(module='paddle.fluid.regularizer', names=[alias(name='L2Decay', asname=None)], level=0)
module_name---> paddle.fluid.regularizer
[1;33mfunc_name.name, and module name are[0m L2Decay paddle.fluid.regularizer
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  Xavier paddle.fluid.initializer.Xavier
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  L2Decay paddle.fluid.regularizer.L2Decay
key, v, from_dict:  Bilinear paddle.fluid.initializer.Bilinear
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(Bilinear->paddle.fluid.initializer.Bilinear)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.resize_bilinear->paddle.fluid.layers.resize_bilinear)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.crop->paddle.fluid.layers.crop)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/train.py has been written sucess[0m

[1;32mNo module named 'bmn_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/reader bmn_reader.py
[1;34mStart upgrading model PaddleCV/video/reader/bmn_reader.py[0m
NameFrom--->: ImportFrom
module_name---> reader_utils
NameFrom--->: ImportFrom
module_name---> models.bmn.bmn_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='platform', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
NameFrom--->: ImportFrom
[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)]
ImportFrom(module='models.bmn.bmn_utils',
    names=[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)],
    level=0)
module_name---> models.bmn.bmn_utils
[1;33mfunc_name.name, and module name are[0m iou_with_anchors models.bmn.bmn_utils
[1;33mfunc_name.name, and module name are[0m ioa_with_anchors models.bmn.bmn_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  DataReader reader_utils.DataReader
key, v, from_dict:  ioa_with_anchors models.bmn.bmn_utils.ioa_with_anchors
key, v, from_dict:  iou_with_anchors models.bmn.bmn_utils.iou_with_anchors
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/bmn_reader.py has been written sucess[0m

[1;32mNo module named 'mnist_tutorial_fgsm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_fgsm.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_fgsm.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.gradient_method
NameFrom--->: ImportFrom
module_name---> advbox.attacks.gradient_method
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='FGSM', asname=None)]
ImportFrom(module='advbox.attacks.gradient_method', names=[alias(name='FGSM', asname=None)], level=0)
module_name---> advbox.attacks.gradient_method
[1;33mfunc_name.name, and module name are[0m FGSM advbox.attacks.gradient_method
NameFrom--->: ImportFrom
[alias(name='FGSMT', asname=None)]
ImportFrom(module='advbox.attacks.gradient_method', names=[alias(name='FGSMT', asname=None)], level=0)
module_name---> advbox.attacks.gradient_method
[1;33mfunc_name.name, and module name are[0m FGSMT advbox.attacks.gradient_method
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  FGSMT advbox.attacks.gradient_method.FGSMT
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
key, v, from_dict:  FGSM advbox.attacks.gradient_method.FGSM
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_fgsm.py has been written sucess[0m

[1;32mNo module named 'test_query_ball_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_query_ball_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_query_ball_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='get_ctcn_conv_initializer', asname='get_init')]
ImportFrom(module='ctcn_utils', names=[alias(name='get_ctcn_conv_initializer', asname='get_init')], level=1)
module_name---> ctcn_utils
[1;33mfunc_name.name, and module name are[0m get_ctcn_conv_initializer ctcn_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  get_ctcn_conv_initializer ctcn_utils.get_ctcn_conv_initializer
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.image_resize->paddle.fluid.layers.image_resize)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.argsort->paddle.fluid.layers.argsort)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.argsort->paddle.fluid.layers.argsort)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.logical_or->paddle.fluid.layers.logical_or)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.argsort)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.argsort)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.image_resize->paddle.nn.functional.image_resize)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/attention_lstm/attention_lstm.py has been written sucess[0m

[1;32mNo module named 'stnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/stnet stnet.py
[1;34mStart upgrading model PaddleCV/video/models/stnet/stnet.py[0m
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> stnet_res_model
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='StNet_ResNet', asname=None)]
ImportFrom(module='stnet_res_model', names=[alias(name='StNet_ResNet', asname=None)], level=1)
module_name---> stnet_res_model
[1;33mfunc_name.name, and module name are[0m StNet_ResNet stnet_res_model
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  StNet_ResNet stnet_res_model.StNet_ResNet
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/stnet/stnet.py has been written sucess[0m

[1;32mNo module named 'mnist_tutorial_lbfgs', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_lbfgs.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_lbfgs.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.lbfgs
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='LBFGS', asname=None)]
ImportFrom(module='advbox.attacks.lbfgs', names=[alias(name='LBFGS', asname=None)], level=0)
module_name---> advbox.attacks.lbfgs
[1;33mfunc_name.name, and module name are[0m LBFGS advbox.attacks.lbfgs
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  LBFGS advbox.attacks.lbfgs.LBFGS
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_lbfgs.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/data/modelnet40_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/data/modelnet40_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/data/indoor3d_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/data/indoor3d_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/dataset/Indoor3DSemSeg/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/dataset/Indoor3DSemSeg/download.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/dataset/ModelNet40/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/dataset/ModelNet40/download.sh has been written sucess[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/dygraph/transformer reader.py
[1;34mStart upgrading model dygraph/transformer/reader.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='glob', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='tarfile', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None tarfile
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/reader.py has been written sucess[0m

[1;32mNo module named 'mnist_tutorial_bim', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_bim.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_bim.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.gradient_method
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='BIM', asname=None)]
ImportFrom(module='advbox.attacks.gradient_method', names=[alias(name='BIM', asname=None)], level=0)
module_name---> advbox.attacks.gradient_method
[1;33mfunc_name.name, and module name are[0m BIM advbox.attacks.gradient_method
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  BIM advbox.attacks.gradient_method.BIM
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_bim.py has been written sucess[0m

[1;32mNo module named 'train_seg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ train_seg.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/train_seg.py[0m
NameFrom--->: ImportFrom
module_name---> models
NameFrom--->: ImportFrom
module_name---> data.indoor3d_reader
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models', names=[alias(name='*', asname=None)], level=0)
module_name---> models
[1;33mfunc_name.name, and module name are[0m * models
NameFrom--->: ImportFrom
[alias(name='Indoor3DReader', asname=None)]
ImportFrom(module='data.indoor3d_reader', names=[alias(name='Indoor3DReader', asname=None)], level=0)
module_name---> data.indoor3d_reader
[1;33mfunc_name.name, and module name are[0m Indoor3DReader data.indoor3d_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  Indoor3DReader data.indoor3d_reader.Indoor3DReader
key, v, from_dict:  * utils.*
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search->paddle.nn.beam_search)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_not->paddle.logical_not)[0m
[1;33mUpgrade API (paddle.fluid.layers.is_empty->paddle.is_empty)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search_decode->paddle.nn.beam_search_decode)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/attention_model.py has been written sucess[0m

[1;32mNo module named 'nonlocal_helper', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nonlocal_model nonlocal_helper.py
[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/nonlocal_helper.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  unicode_literals __future__.unicode_literals
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.layers.pool3d->paddle.fluid.layers.pool3d)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.affine_channel->paddle.fluid.layers.affine_channel)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='bsn_net', asname=None)]
ImportFrom(module=None, names=[alias(name='bsn_net', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m bsn_net None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bsn/bsn.py has been written sucess[0m

[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op README.md
[1;32mNo module named 'pointnet_lib', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op pointnet_lib.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/pointnet_lib.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
[3;32mRestore API full name(fluid.load_op_library->paddle.fluid.load_op_library)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/pointnet_lib.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/data/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/data/__init__.py has been written sucess[0m
[1;32mNo module named 'pointnet2_cls', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/models pointnet2_cls.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/models/pointnet2_cls.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> pointnet2_modules
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleKG/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleKG/README.md has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/ocr_recognition utility.py
[1;34mStart upgrading model PaddleCV/ocr_recognition/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='six', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None six
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.create_lod_tensor->paddle.fluid.create_lod_tensor)[0m
[3;32mRestore API full name(fluid.create_lod_tensor->paddle.fluid.create_lod_tensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/ocr_recognition/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/tsm.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/tsm.yaml has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/ets/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ets/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/tall/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tall/__init__.py has been written sucess[0m
[1;32mNo module named 'logistic_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/attention_cluster logistic_model.py
[1;34mStart upgrading model PaddleCV/video/models/attention_cluster/logistic_model.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_cluster/logistic_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/bsn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bsn/__init__.py has been written sucess[0m
[1;32mNo module named 'nonlocal_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/nonlocal_model nonlocal_utils.py
[1;34mStart upgrading model PaddleCV/video/models/nonlocal_model/nonlocal_utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/nonlocal_utils.py has been written sucess[0m

[1;32mNo module named 'ctcn_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/ctcn ctcn_utils.py
[1;34mStart upgrading model PaddleCV/video/models/ctcn/ctcn_utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Uniform', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Uniform', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Uniform paddle.fluid.initializer
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  Uniform paddle.fluid.initializer.Uniform print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='LearningRateDecay', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.learning_rate_scheduler',
    names=[alias(name='LearningRateDecay', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.learning_rate_scheduler
[1;33mfunc_name.name, and module name are[0m LearningRateDecay paddle.fluid.dygraph.learning_rate_scheduler
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  LearningRateDecay paddle.fluid.dygraph.learning_rate_scheduler.LearningRateDecay
[3;32mRestore API full name(fluid.layers.ceil->paddle.fluid.layers.ceil)[0m
[3;32mRestore API full name(fluid.dygraph.NoamDecay->paddle.fluid.dygraph.NoamDecay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.ceil->paddle.ceil)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/optimization.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/metrics/detections/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/detections/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/detections/detection_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/detections/detection_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bmn_metrics/eval_anet_prop.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bmn_metrics/eval_anet_prop.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/data/dataset/bmn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/data/dataset/bmn/README.md has been written sucess[0m
[1;32mNo module named 'videotag_main', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/application/video_tag videotag_main.py
[1;34mStart upgrading model PaddleCV/video/application/video_tag/videotag_main.py[0m
NameFrom--->: ImportFrom
module_name---> utils.config_utils
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> metrics
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.config_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.config_utils
[1;33mfunc_name.name, and module name are[0m * utils.config_utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_reader', asname=None)]
ImportFrom(module='reader', names=[alias(name='get_reader', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m get_reader reader
NameFrom--->: ImportFrom
[alias(name='get_metrics', asname=None)]
ImportFrom(module='metrics', names=[alias(name='get_metrics', asname=None)], level=0)
module_name---> metrics
[1;33mfunc_name.name, and module name are[0m get_metrics metrics
NameFrom--->: ImportFrom
[alias(name='check_cuda', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_cuda', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_cuda utils.utility
NameFrom--->: ImportFrom
[alias(name='check_version', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='check_version', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m check_version utils.utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  get_reader reader.get_reader
key, v, from_dict:  check_version utils.utility.check_version
key, v, from_dict:  * utils.config_utils.*
key, v, from_dict:  check_cuda utils.utility.check_cuda
key, v, from_dict:  get_metrics metrics.get_metrics
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/videotag_main.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/stnet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/stnet/README.md has been written sucess[0m
[1;32mNo module named 'bsn_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bsn bsn_utils.py
[1;34mStart upgrading model PaddleCV/video/models/bsn/bsn_utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> scipy.interpolate
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
in_dygraph_mode fluid.framework.in_dygraph_mode
key, v, from_dict:  not_equal tensor.logic.not_equal
key, v, from_dict:  create_global_var framework.create_global_var
key, v, from_dict:  check_import_scipy paddle.check_import_scipy.check_import_scipy
key, v, from_dict:  cumsum tensor.math.cumsum
key, v, from_dict:  create_tensor tensor.creation.create_tensor
key, v, from_dict:  Print framework.Print
key, v, from_dict:  scatter_nd_add tensor.manipulation.scatter_nd_add
key, v, from_dict:  norm tensor.linalg.norm
key, v, from_dict:  t tensor.linalg.t
key, v, from_dict:  mul tensor.math.mul
key, v, from_dict:  elementwise_max tensor.math.elementwise_max
key, v, from_dict:  pow tensor.math.pow
key, v, from_dict:  randperm tensor.random.randperm
key, v, from_dict:  log1p tensor.math.log1p
key, v, from_dict:  commit paddle.version.commit
key, v, from_dict:  program_guard framework.program_guard
key, v, from_dict:  sum tensor.math.sum
key, v, from_dict:  sin tensor.math.sin
key, v, from_dict:  sums tensor.math.sums
key, v, from_dict:  triu tensor.creation.triu
key, v, from_dict:  squeeze tensor.manipulation.squeeze
key, v, from_dict:  rand tensor.random.rand
[3;32mRestore API full name(check_import_scipy->paddle.check_import_scipy.check_import_scipy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/models/paddle.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/__init__.py has been written sucess[0m
[1;32mNo module named 'test_group_points_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_group_points_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_group_points_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_group_points_op.py has been written sucess[0m

[1;32mNo module named 'test_three_nn_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_three_nn_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_three_nn_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_three_nn_op.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/data/KITTI/object/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/data/KITTI/object/download.sh has been written sucess[0m
[1;32mNo module named 'optimizer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/utils optimizer.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/optimizer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.learning_rate_scheduler', asname='lr_scheduler')]
NameFrom--->: ImportFrom
[alias(name='control_flow', asname=None)]
ImportFrom(module='paddle.fluid.layers', names=[alias(name='control_flow', asname=None)], level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m control_flow paddle.fluid.layers
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  lr_scheduler paddle.fluid.layers.learning_rate_scheduler
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  control_flow paddle.fluid.layers.control_flow
[3;32mRestore API full name(fluid.layers.cos->paddle.fluid.layers.cos)[0m
[3;32mRestore API full name(lr_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_deepfool.py has been written sucess[0m

[1;32mNo module named 'eval_seg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ eval_seg.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/eval_seg.py[0m
NameFrom--->: ImportFrom
module_name---> models
NameFrom--->: ImportFrom
module_name---> data.indoor3d_reader
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models', names=[alias(name='*', asname=None)], level=0)
module_name---> models
[1;33mfunc_name.name, and module name are[0m * models
NameFrom--->: ImportFrom
[alias(name='Indoor3DReader', asname=None)]
ImportFrom(module='data.indoor3d_reader', names=[alias(name='Indoor3DReader', asname=None)], level=0)
module_name---> data.indoor3d_reader
[1;33mfunc_name.name, and module name are[0m Indoor3DReader data.indoor3d_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  Indoor3DReader data.indoor3d_reader.Indoor3DReader
key, v, from_dict:  * utils.*
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/eval_seg.py has been written sucess[0m

[1;32mNo module named 'test_three_interp_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_three_interp_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_three_interp_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_three_interp_op.py has been written sucess[0m

[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN README.md
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/data/kitti_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/data/kitti_dataset.py has been written sucess[0m
[1;32mNo module named 'run_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/utils run_utils.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/run_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict: 
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='ILCM', asname=None)]
ImportFrom(module='advbox.attacks.gradient_method', names=[alias(name='ILCM', asname=None)], level=0)
module_name---> advbox.attacks.gradient_method
[1;33mfunc_name.name, and module name are[0m ILCM advbox.attacks.gradient_method
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
key, v, from_dict:  ILCM advbox.attacks.gradient_method.ILCM
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_ilcm.py has been written sucess[0m

[1;32mNo module named 'eval_cls', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ eval_cls.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/eval_cls.py[0m
NameFrom--->: ImportFrom
module_name---> models
NameFrom--->: ImportFrom
module_name---> data.data_utils
NameFrom--->: ImportFrom
module_name---> data.modelnet40_reader
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models', names=[alias(name='*', asname=None)], level=0)
module_name---> models
[1;33mfunc_name.name, and module name are[0m * models
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='data.data_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> data.data_utils
[1;33mfunc_name.name, and module name are[0m * data.data_utils
NameFrom--->: ImportFrom
[alias(name='ModelNet40ClsReader', asname=None)]
ImportFrom(module='data.modelnet40_reader', names=[alias(name='ModelNet40ClsReader', asname=None)], level=0)
module_name---> data.modelnet40_reader
[1;33mfunc_name.name, and module name are[0m ModelNet40ClsReader data.modelnet40_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  * utils.*
key, v, from_dict:  ModelNet40ClsReader data.modelnet40_reader.ModelNet40ClsReader
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/eval_cls.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/models/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/scripts/train_seg.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/scripts/train_seg.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/scripts/eval_cls.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/scripts/eval_cls.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/scripts/eval_seg.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/scripts/eval_seg.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/scripts/train_cls.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/scripts/train_cls.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/build_and_install.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/build_and_install.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN train.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/train.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
NameFrom--->: ImportFrom
module_name---> models.point_rcnn
NameFrom--->: ImportFrom
module_name---> data.kitti_rcnn_reader
NameFrom--->: ImportFrom
module_name--->
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='LogisticModel', asname=None)]
ImportFrom(module='clf_model', names=[alias(name='LogisticModel', asname=None)], level=1)
module_name---> clf_model
[1;33mfunc_name.name, and module name are[0m LogisticModel clf_model
NameFrom--->: ImportFrom
[alias(name='nextvlad_model', asname=None)]
ImportFrom(module=None, names=[alias(name='nextvlad_model', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m nextvlad_model None
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  LogisticModel clf_model.LogisticModel
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NumpyArrayInitializer->paddle.fluid.initializer.NumpyArrayInitializer)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nextvlad/nextvlad.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN eval.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/eval.py[0m
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> models.point_rcnn
NameFrom--->: ImportFrom
module_name---> data.kitti_rcnn_reader
NameFrom--->: ImportFrom
module_name---> utils.run_utils
NameFrom--->: ImportFrom
module_name---> utils.config
NameFrom--->: ImportFrom
module_name---> utils.metric_utils
NameFrom--->: ImportFrom
module_name---> tools.kitti_object_eval_python.evaluate
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PointRCNN', asname=None)]
ImportFrom(module='models.point_rcnn', names=[alias(name='PointRCNN', asname=None)], level=0)
module_name---> models.point_rcnn
[1;33mfunc_name.name, and module name are[0m PointRCNN models.point_rcnn
NameFrom--->: ImportFrom
[alias(name='KittiRCNNReader', asname=None)]
ImportFrom(module='data.kitti_rcnn_reader', names=[alias(name='KittiRCNNReader', asname=None)], level=0)
module_name---> data.kitti_rcnn_reader
[1;33mfunc_name.name, and module name are[0m KittiRCNNReader data.kitti_rcnn_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.run_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.run_utils
[1;33mfunc_name.name, and module name are[0m * utils.run_utils
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None),
    alias(name='load_config', asname=None),
    alias(name='set_config_from_list', asname=None)]
ImportFrom(module='utils.config',
    names=[alias(name='cfg', asname=None),
        alias(name='load_config', asname=None),
        alias(name='set_config_from_list', asname=None)],
    level=0)
module_name---> utils.config
[1;33mfunc_name.name, and module name are[0m cfg utils.config
[1;33mfunc_name.name, and module name are[0m load_config utils.config
[1;33mfunc_name.name, and module name are[0m set_config_from_list utils.config
NameFrom--->: ImportFrom
[alias(name='calc_iou_recall', asname=None),
    alias(name='rpn_metric', asname=None),
    alias(name='rcnn_metric', asname=None)]
ImportFrom(module='utils.metric_utils',
    names=[alias(name='calc_iou_recall', asname=None),
        alias(name='rpn_metric', asname=None),
        alias(name='rcnn_metric', asname=None)],
    level=0)
module_name---> utils.metric_utils
[1;33mfunc_name.name, and module name are[0m calc_iou_recall utils.metric_utils
[1;33mfunc_name.name, and module name are[0m rpn_metric utils.metric_utils
[1;33mfunc_name.name, and module name are[0m rcnn_metric utils.metric_utils
NameFrom--->: ImportFrom
[alias(name='evaluate', asname='kitti_evaluate')]
ImportFrom(module='tools.kitti_object_eval_python.evaluate',
    names=[alias(name='evaluate', asname='kitti_evaluate')],
    level=0)
module_name---> tools.kitti_object_eval_python.evaluate
[1;33mfunc_name.name, and module name are[0m evaluate tools.kitti_object_eval_python.evaluate
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  PointRCNN models.point_rcnn.PointRCNN
key, v, from_dict:  calc_iou_recall utils.metric_utils.calc_iou_recall
key, v, from_dict:  * utils.run_utils.*
key, v, from_dict:  evaluate tools.kitti_object_eval_python.evaluate.evaluate
key, v, from_dict:  set_config_from_list utils.config.set_config_from_list
key, v, from_dict: 
[1;33mUpgrade API (paddle.fluid.layers.greater_than->paddle.greater_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros_like->paddle.tensor.zeros_like)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_floordiv->paddle.elementwise_floordiv)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mod->paddle.elementwise_mod)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_or->paddle.logical_or)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_all->paddle.reduce_all)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_tree->paddle.nn.gather_tree)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_or->paddle.logical_or)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_all->paddle.reduce_all)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/transformer/model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/object3d.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/object3d.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/pts_utils/setup.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/pts_utils/setup.py has been written sucess[0m
[1;32mNo module named 'pointnet2_msg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models pointnet2_msg.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/pointnet2_msg.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> models.pointnet2_modules
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/tsn/tsn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/adversarial/advbox/adversary.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/adversary.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/base.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/base.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/saliency.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/saliency.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/gradient_method.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/gradient_method.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/attacks/deepfool.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/attacks/deepfool.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/models/base.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/models/base.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/adversarial/advbox/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/advbox/models/__init__.py has been written sucess[0m
[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ README.md
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++ utils.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/utils.py has been written sucess[0m

[1;32mNo module named 'test_farthest_point_sampling_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_farthest_point_sampling_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_farthest_point_sampling_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_farthest_point_sampling_op.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/cyops/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/cyops/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/generate_gt_database.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/generate_gt_database.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/cfgs/default.yml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/cfgs/default.yml has been written sucess[0m
[1;32mNo module named 'run_training', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr run_training.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/run_training.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='importlib', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname='cv')]
ImportName--->: Import
[alias(name='ltr.admin.settings', asname='ws_settings')]
key,value import_dict:  ws_settings ltr.admin.settings
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='LSTMAttentionModel', asname=None)]
ImportFrom(module='lstm_attention', names=[alias(name='LSTMAttentionModel', asname=None)], level=1)
module_name---> lstm_attention
[1;33mfunc_name.name, and module name are[0m LSTMAttentionModel lstm_attention
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
key, v, from_dict:  LSTMAttentionModel lstm_attention.LSTMAttentionModel
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_lstm/attention_lstm.py has been written sucess[0m

[1;32mNo module named 'test_gather_point_o', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/ext_op/tests test_gather_point_op.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/tests/test_gather_point_op.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_gather_point_op.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/data/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/data/__init__.py has been written sucess[0m
[1;32mNo module named 'box_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/utils box_utils.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/box_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils.config
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='utils.config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> utils.config
[1;33mfunc_name.name, and module name are[0m cfg utils.config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  cfg utils.config.cfg
key, v, from_dict: 
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models model.py
[1;34mStart upgrading model PaddleCV/video/models/model.py[0m
NameFrom--->: ImportFrom
module_name---> configparser
NameFrom--->: ImportFrom
module_name---> ConfigParser
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='wget', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ConfigParser', asname=None)]
ImportFrom(module='configparser', names=[alias(name='ConfigParser', asname=None)], level=0)
module_name---> configparser
[1;33mfunc_name.name, and module name are[0m ConfigParser configparser
NameFrom--->: ImportFrom
[alias(name='ConfigParser', asname=None)]
ImportFrom(module='ConfigParser', names=[alias(name='ConfigParser', asname=None)], level=0)
module_name---> ConfigParser
[1;33mfunc_name.name, and module name are[0m ConfigParser ConfigParser
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='download', asname=None), alias(name='AttrDict', asname=None)]
ImportFrom(module='utils', names=[alias(name='download', asname=None), alias(name='AttrDict', asname=None)], level=1)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m download utils
[1;33mfunc_name.name, and module name are[0m AttrDict utils
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  download utils.download
key, v, from_dict:  ConfigParser ConfigParser.ConfigParser
key, v, from_dict:  AttrDict utils.AttrDict
[3;32mRestore API full name(fluid.load_program_state->paddle.fluid.load_program_state)[0m
[3;32mRestore API full name(fluid.set_program_state->paddle.fluid.set_program_state)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/models/nextvlad/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nextvlad/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/ctcn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ctcn/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/models/ctcn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ctcn/__init__.py has been written sucess[0m
[1;32mNo module named 'ctcn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/ctcn ctcn.py
[1;34mStart upgrading model PaddleCV/video/models/ctcn/ctcn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='fpn_ctcn', asname=None)]
ImportFrom(module=None, names=[alias(name='fpn_ctcn', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m fpn_ctcn None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ctcn/ctcn.py has been written sucess[0m

[1;32mNo module named 'loss_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models loss_utils.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/loss_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bmn/bmn_net.py has been written sucess[0m

[1;32mNo module named 'rpn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models rpn.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/rpn.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> utils.proposal_utils
NameFrom--->: ImportFrom
module_name---> models.pointnet2_msg
NameFrom--->: ImportFrom
module_name---> models.pointnet2_modules
NameFrom--->: ImportFrom
module_name---> models.loss_utils
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> 
[3;32mRestore API full name(fluid.nets.simple_img_conv_pool->paddle.fluid.nets.simple_img_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.average.WeightedAverage->paddle.fluid.average.WeightedAverage)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save_params->paddle.fluid.io.save_params)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/ext_op/src/make.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/src/make.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/data/data_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/data/data_utils.py has been written sucess[0m
[1;32mNo module named 'pointnet2_seg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/models pointnet2_seg.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/models/pointnet2_seg.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> pointnet2_modules
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='pointnet2_modules', names=[alias(name='*', asname=None)], level=1)
module_name---> pointnet2_modules
[1;33mfunc_name.name, and module name are[0m * pointnet2_modules
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * pointnet2_modules.*
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
ImportFrom(module='io', names=[alias(name='BytesIO', asname=None)], level=0)
module_name---> io
[1;33mfunc_name.name, and module name are[0m BytesIO io
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Pipeline', asname=None)]
ImportFrom(module='nvidia.dali.pipeline', names=[alias(name='Pipeline', asname=None)], level=0)
module_name---> nvidia.dali.pipeline
[1;33mfunc_name.name, and module name are[0m Pipeline nvidia.dali.pipeline
ImportName--->: Import
[alias(name='nvidia.dali.ops', asname='ops')]
ImportName--->: Import
[alias(name='nvidia.dali.types', asname='types')]
ImportName--->: Import
[alias(name='tempfile', asname=None)]
NameFrom--->: ImportFrom
[alias(name='DALIGenericIterator', asname=None)]
ImportFrom(module='nvidia.dali.plugin.paddle', names=[alias(name='DALIGenericIterator', asname=None)], level=0)
module_name---> nvidia.dali.plugin.paddle
[1;33mfunc_name.name, and module name are[0m DALIGenericIterator nvidia.dali.plugin.paddle
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
key,value import_dict:  pickle cPickle
key,value import_dict:  types nvidia.dali.types
key,value import_dict:  None logging
key,value import_dict:  ops nvidia.dali.ops
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  BytesIO io.BytesIO
key, v, from_dict:  DataReader reader_utils.DataReader
key, v, from_dict:  StringIO cStringIO.StringIO
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  Pipeline nvidia.dali.pipeline.Pipeline
key, v, from_dict:  DALIGenericIterator nvidia.dali.plugin.paddle.DALIGenericIterator
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[3;32mRestore API full name(DALIGenericIterator->nvidia.dali.plugin.paddle.DALIGenericIterator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/kinetics_reader.py has been written sucess[0m

[1;32mNo module named 'rcnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models rcnn.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/rcnn.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> models.pointnet2_modules
NameFrom--->: ImportFrom
module_name---> models.loss_utils
NameFrom--->: ImportFrom
module_name---> utils.proposal_target
NameFrom--->: ImportFrom
module_name---> utils.cyops.kitti_utils
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='MLP', asname=None), alias(name='pointnet_sa_module', asname=None), alias(name='conv_bn', asname=None)]
ImportFrom(module='models.pointnet2_modules',
    names=[alias(name='MLP', asname=None),
        alias(name='pointnet_sa_module', asname=None),
        alias(name='conv_bn', asname=None)],
    level=0)
module_name---> models.pointnet2_modules
[1;33mfunc_name.name, and module name are[0m MLP models.pointnet2_modules
[1;33mfunc_name.name, and module name are[0m pointnet_sa_module models.pointnet2_modules
[1;33mfunc_name.name, and module name are[0m conv_bn models.pointnet2_modules
NameFrom--->: ImportFrom
[alias(name='sigmoid_focal_loss', asname=None), alias(name='get_reg_loss', asname=None)]
ImportFrom(module='models.loss_utils',
    names=[alias(name='sigmoid_focal_loss', asname=None), alias(name='get_reg_loss', asname=None)],
    level=0)
module_name---> models.loss_utils
[1;33mfunc_name.name, and module name are[0m sigmoid_focal_loss models.loss_utils
[1;33mfunc_name.name, and module name are[0m get_reg_loss models.loss_utils
NameFrom--->: ImportFrom
[alias(name='get_proposal_target_func', asname=None)]
ImportFrom(module='utils.proposal_target', names=[alias(name='get_proposal_target_func', asname=None)], level=0)
module_name---> utils.proposal_target
[1;33mfunc_name.name, and module name are[0m get_proposal_target_func utils.proposal_target
NameFrom--->: ImportFrom
[alias(name='rotate_pc_along_y', asname=None)]
ImportFrom(module='utils.cyops.kitti_utils', names=[alias(name='rotate_pc_along_y', asname=None)], level=0)
module_name---> utils.cyops.kitti_utils
[1;33mfunc_name.name, and module name are[0m rotate_pc_along_y utils.cyops.kitti_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  MLP models.pointnet2_modules.MLP
key, v, from_dict:  pointnet_sa_module models.pointnet2_modules.pointnet_sa_module
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  conv_bn models.pointnet2_modules.conv_bn
key, v, from_dict:  get_reg_loss models.loss_utils.get_reg_loss
key, v, from_dict:  sigmoid_focal_loss models.loss_utils.sigmoid_focal_loss
key, v, from_dict:  get_proposal_target_func utils.proposal_target.get_proposal_target_func
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  rotate_pc_along_y utils.cyops.kitti_utils.rotate_pc_along_y
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.py_func->paddle.fluid.layers.py_func)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='pointnet2_modules', names=[alias(name='*', asname=None)], level=1)
module_name---> pointnet2_modules
[1;33mfunc_name.name, and module name are[0m * pointnet2_modules
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * pointnet2_modules.*
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/models/pointnet2_cls.py has been written sucess[0m

[1;32mNo module named 'pointnet2_modules', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models pointnet2_modules.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/pointnet2_modules.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> ext_op
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None), alias(name='Normal', asname=None)]
ImportFrom(module='paddle.fluid.initializer',
    names=[alias(name='Constant', asname=None), alias(name='Normal', asname=None)],
    level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='ext_op', names=[alias(name='*', asname=None)], level=0)
module_name---> ext_op
[1;33mfunc_name.name, and module name are[0m * ext_op
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * ext_op.*
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tsn/tsn_res_model.py has been written sucess[0m

[1;32mNo module named 'mnist_tutorial_mifgsm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/adversarial/tutorials mnist_tutorial_mifgsm.py
[1;34mStart upgrading model PaddleCV/adversarial/tutorials/mnist_tutorial_mifgsm.py[0m
NameFrom--->: ImportFrom
module_name---> advbox.adversary
NameFrom--->: ImportFrom
module_name---> advbox.attacks.gradient_method
NameFrom--->: ImportFrom
module_name---> advbox.models.paddle
NameFrom--->: ImportFrom
module_name---> tutorials.mnist_model
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Adversary', asname=None)]
ImportFrom(module='advbox.adversary', names=[alias(name='Adversary', asname=None)], level=0)
module_name---> advbox.adversary
[1;33mfunc_name.name, and module name are[0m Adversary advbox.adversary
NameFrom--->: ImportFrom
[alias(name='MIFGSM', asname=None)]
ImportFrom(module='advbox.attacks.gradient_method', names=[alias(name='MIFGSM', asname=None)], level=0)
module_name---> advbox.attacks.gradient_method
[1;33mfunc_name.name, and module name are[0m MIFGSM advbox.attacks.gradient_method
NameFrom--->: ImportFrom
[alias(name='PaddleModel', asname=None)]
ImportFrom(module='advbox.models.paddle', names=[alias(name='PaddleModel', asname=None)], level=0)
module_name---> advbox.models.paddle
[1;33mfunc_name.name, and module name are[0m PaddleModel advbox.models.paddle
NameFrom--->: ImportFrom
[alias(name='mnist_cnn_model', asname=None)]
ImportFrom(module='tutorials.mnist_model', names=[alias(name='mnist_cnn_model', asname=None)], level=0)
module_name---> tutorials.mnist_model
[1;33mfunc_name.name, and module name are[0m mnist_cnn_model tutorials.mnist_model
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  PaddleModel advbox.models.paddle.PaddleModel
key, v, from_dict:  MIFGSM advbox.attacks.gradient_method.MIFGSM
key, v, from_dict:  Adversary advbox.adversary.Adversary
key, v, from_dict:  mnist_cnn_model tutorials.mnist_model.mnist_cnn_model
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_params->paddle.fluid.io.load_params)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(PaddleModel->advbox.models.paddle.PaddleModel)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/adversarial/tutorials/mnist_tutorial_mifgsm.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/processing.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/processing.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/actors/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/actors/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/lasot.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/lasot.py has been written sucess[0m
[1;32mNo module named 'atom_res50_vid_lasot_coco', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/train_settings/bbreg atom_res50_vid_lasot_coco.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/train_settings/bbreg/atom_res50_vid_lasot_coco.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.data
NameFrom--->: ImportFrom
module_name---> ltr.dataset
NameFrom--->: ImportFrom
module_name---> ltr.models.bbreg.atom
NameFrom--->: ImportFrom
module_name---> ltr.trainers
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='ltr.actors', asname='actors')]
ImportName--->: Import
[alias(name='ltr.data.transforms', asname='dltransforms')]
NameFrom--->: ImportFrom
[alias(name='processing', asname=None), alias(name='sampler', asname=None), alias(name='loader', asname=None)]
ImportFrom(module='ltr.data',
    names=[alias(name='processing', asname=None),
        alias(name='sampler', asname=None),
        alias(name='loader', asname=None)],
    level=0)
module_name---> ltr.data
[1;33mfunc_name.name, and module name are[0m processing ltr.data
[1;33mfunc_name.name, and module name are[0m sampler ltr.data
[1;33mfunc_name.name, and module name are[0m loader ltr.data
NameFrom--->: ImportFrom
[alias(name='ImagenetVID', asname=None),
    alias(name='MSCOCOSeq', asname=None),
    alias(name='Lasot', asname=None),
    alias(name='Got10k', asname=None)]
ImportFrom(module='ltr.dataset',
    names=[alias(name='ImagenetVID', asname=None),
        alias(name='MSCOCOSeq', asname=None),
        alias(name='Lasot', asname=None),
        alias(name='Got10k', asname=None)],
    level=0)
module_name---> ltr.dataset
[1;33mfunc_name.name, and module name are[0m ImagenetVID ltr.dataset
[1;33mfunc_name.name, and module name are[0m MSCOCOSeq ltr.dataset
[1;33mfunc_name.name, and module name are[0m Lasot ltr.dataset
[1;33mfunc_name.name, and module name are[0m Got10k ltr.dataset
NameFrom--->: ImportFrom
[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)]
ImportFrom(module='ltr.models.bbreg.atom',
    names=[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)],
    level=0)
module_name---> ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet50 ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet18 ltr.models.bbreg.atom
NameFrom--->: ImportFrom
[alias(name='LTRTrainer', asname=None)]
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.argsort->paddle.tensor.sort)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.argsort->paddle.tensor.sort)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_or->paddle.logical_or)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ctcn/fpn_ctcn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/save_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/save_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/cyops/object3d.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/cyops/object3d.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/generate_aug_scene.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/generate_aug_scene.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/rotate_iou.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/rotate_iou.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/loader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/loader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/vot.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/vot.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/trainers/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/trainers/__init__.py has been written sucess[0m
[1;32mNo module named 'siamfc_alexnet_vid', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/train_settings/siamfc siamfc_alexnet_vid.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/train_settings/siamfc/siamfc_alexnet_vid.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.data
NameFrom--->: ImportFrom
module_name---> ltr.dataset
NameFrom--->: ImportFrom
module_name---> ltr.models.siamese.siam
NameFrom--->: ImportFrom
module_name---> ltr.trainers
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='ltr.actors', asname='actors')]
ImportName--->: Import
[alias(name='ltr.data.transforms', asname='dltransforms')]
NameFrom--->: ImportFrom
[alias(name='processing', asname=None), alias(name='sampler', asname=None), alias(name='loader', asname=None)]
ImportFrom(module='ltr.data',
    names=[alias(name='processing', asname=None),
        alias(name='sampler', asname=None),
        alias(name='loader', asname=None)],
    level=0)
module_name---> ltr.data
[1;33mfunc_name.name, and module name are[0m processing ltr.data
[1;33mfunc_name.name, and module name are[0m sampler ltr.data
[1;33mfunc_name.name, and module name are[0m loader ltr.data
NameFrom--->: ImportFrom
[alias(name='ImagenetVID', asname=None), alias(name='Got10k', asname=None)]
ImportFrom(module='ltr.dataset',
    names=[alias(name='ImagenetVID', asname=None), alias(name='Got10k', asname=None)],
    level=0)
module_name---> ltr.dataset
[1;33mfunc_name.name, and module name are[0m ImagenetVID ltr.dataset
[1;33mfunc_name.name, and module name are[0m Got10k ltr.dataset
NameFrom--->: ImportFrom
[alias(name='siamfc_alexnet', asname=None)]
ImportFrom(module='ltr.models.siamese.siam', names=[alias(name='siamfc_alexnet', asname=None)], level=0)
module_name---> ltr.models.siamese.siam
[1;33mfunc_name.name, and module name are[0m siamfc_alexnet ltr.models.siamese.siam
NameFrom--->: ImportFrom
[alias(name='LTRTrainer', asname=None)]
ImportFrom(module='ltr.trainers', names=[alias(name='LTRTrainer', asname=None)], level=0)
module_name---> ltr.trainers
[1;33mfunc_name.name, and module name are[0m LTRTrainer ltr.trainers
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname='cv')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
key,value import_dict:  None paddle
key,value import_dict:  dygraph paddle.fluid.dygraph
key,value import_dict:  cv cv2
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  dltransforms ltr.data.transforms
key,value import_dict:  actors ltr.actors
key, v, from_dict:  sampler ltr.data.sampler
key, v, from_dict:  siamfc_alexnet ltr.models.siamese.siam.siamfc_alexnet
key, v, from_dict:  ImagenetVID ltr.dataset.ImagenetVID
key, v, from_dict:  loader ltr.data.loader
key, v, from_dict:  processing ltr.data.processing
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  LTRTrainer ltr.trainers.LTRTrainer
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.array_read->paddle.fluid.layers.array_read)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.lod_reset->paddle.fluid.layers.lod_reset)[0m
[3;32mRestore API full name(fluid.layers.beam_search->paddle.fluid.layers.beam_search)[0m
[3;32mRestore API full name(fluid.layers.increment->paddle.fluid.layers.increment)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.array_write->paddle.fluid.layers.array_write)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.is_empty->paddle.fluid.layers.is_empty)[0m
[3;32mRestore API full name(fluid.layers.logical_not->paddle.fluid.layers.logical_not)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.beam_search_decode->paddle.fluid.layers.beam_search_decode)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search->paddle.nn.beam_search)[0m
[1;33mUpgrade API (paddle.fluid.layers.increment->paddle.increment)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_not->paddle.logical_not)[0m
[1;33mUpgrade API (paddle.fluid.layers.is_empty->paddle.is_empty)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.beam_search_decode->paddle.nn.beam_search_decode)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ets/ets_net.py has been written sucess[0m

[1;32mNo module named 'siamfc', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/actors siamfc.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/actors/siamfc.py[0m
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='BaseActor', asname=None)]
ImportFrom(module=None, names=[alias(name='BaseActor', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m BaseActor None
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/actors/siamfc.py has been written sucess[0m

[1;32mNo module named 'siam', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/siamese siam.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/siamese/siam.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> ltr.models.backbone.sfc_alexnet
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/attention_cluster/attention_cluster.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/face_detection/image_util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/image_util.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/face_detection train.py
[1;34mStart upgrading model PaddleCV/face_detection/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> pyramidbox
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PyramidBox', asname=None)]
ImportFrom(module='pyramidbox', names=[alias(name='PyramidBox', asname=None)], level=0)
module_name---> pyramidbox
[1;33mfunc_name.name, and module name are[0m PyramidBox pyramidbox
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m check_cuda utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  check_cuda utility.check_cuda
key, v, from_dict:  PyramidBox pyramidbox.PyramidBox
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.py_reader->paddle.fluid.layers.py_reader)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.read_file->paddle.fluid.layers.read_file)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/train.py has been written sucess[0m

[1;32mNo module named 'atom_iou_net', so we use another strategy to dynamically import module[0m
-->module name and package name:
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool3d->paddle.nn.functional.pool3d)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.affine_channel->paddle.nn.functional.affine_channel)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/nonlocal_helper.py has been written sucess[0m

[1;32mNo module named 'point_rcnn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/models point_rcnn.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/point_rcnn.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> models.rpn
NameFrom--->: ImportFrom
module_name---> models.rcnn
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='RPN', asname=None)]
ImportFrom(module='models.rpn', names=[alias(name='RPN', asname=None)], level=0)
module_name---> models.rpn
[1;33mfunc_name.name, and module name are[0m RPN models.rpn
NameFrom--->: ImportFrom
[alias(name='RCNN', asname=None)]
ImportFrom(module='models.rcnn', names=[alias(name='RCNN', asname=None)], level=0)
module_name---> models.rcnn
[1;33mfunc_name.name, and module name are[0m RCNN models.rcnn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  RCNN models.rcnn.RCNN
key, v, from_dict:  RPN models.rpn.RPN
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.prior_box->paddle.fluid.layers.prior_box)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.prior_box->paddle.fluid.layers.prior_box)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.prior_box->paddle.fluid.layers.prior_box)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.prior_box->paddle.fluid.layers.prior_box)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.ssd_loss->paddle.fluid.layers.ssd_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.ssd_loss->paddle.fluid.layers.ssd_loss)[0m
[3;32mRestore API full name(fluid.layers.ssd_loss->paddle.fluid.layers.ssd_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.detection_output->paddle.fluid.layers.detection_output)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Bilinear->paddle.nn.initializer.Bilinear)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_bilinear->paddle.nn.functional.resize_bilinear)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='nonlocal_helper', asname=None)]
ImportFrom(module=None, names=[alias(name='nonlocal_helper', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m nonlocal_helper None
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  unicode_literals __future__.unicode_literals
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.affine_channel->paddle.fluid.layers.affine_channel)[0m
[3;32mRestore API full name(fluid.initializer.MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv3d->paddle.fluid.layers.conv3d)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.affine_channel->paddle.nn.functional.affine_channel)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/resnet_helper.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/parameter/siamfc/default.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/parameter/siamfc/default.py has been written sucess[0m
[1;32mNo module named 'Fconv2d_static', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs Fconv2d_static.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/Fconv2d_static.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.layer_object_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='LayerObjectHelper', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.layer_object_helper',
    names=[alias(name='LayerObjectHelper', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.layer_object_helper
[1;33mfunc_name.name, and module name are[0m LayerObjectHelper paddle.fluid.dygraph.layer_object_helper
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None),
    alias(name='Constant', asname=None),
    alias(name='NumpyArrayInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer',
    names=[alias(name='Normal', asname=None),
        alias(name='Constant', asname=None),
        alias(name='NumpyArrayInitializer', asname=None)],
    level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NumpyArrayInitializer paddle.fluid.initializer
[1;33mUpgrade API (paddle.fluid.layers.logical_or->paddle.logical_or)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_tree->paddle.nn.gather_tree)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/attention_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/metric_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/metric_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/proposal_target.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/proposal_target.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/cyops/setup.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/cyops/setup.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_eval.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_eval.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/evaluate.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/evaluate.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/processing_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/processing_utils.py has been written sucess[0m
[1;32mNo module named 'bbreg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/actors bbreg.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/actors/bbreg.py[0m
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='BaseActor', asname=None)]
ImportFrom(module=None, names=[alias(name='BaseActor', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m BaseActor None
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/actors/bbreg.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/model_constructor.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/model_constructor.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/settings.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/settings.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/bbreg/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/bbreg/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/base/basetracker.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/base/basetracker.py has been written sucess[0m
[1;32mNo module named 'siamfc', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/tracker/siamfc siamfc.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/siamfc/siamfc.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.tracker.base.basetracker
NameFrom--->: ImportFrom
module_name---> ltr.models.siamese.siam
NameFrom--->: ImportFrom
module_name---> pytracking.parameter.siamfc.default
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
NameFrom--->: ImportFrom
[alias(name='BaseTracker', asname=None)]
ImportFrom(module='pytracking.tracker.base.basetracker', names=[alias(name='BaseTracker', asname=None)], level=0)
module_name---> pytracking.tracker.base.basetracker
[1;33mfunc_name.name, and module name are[0m BaseTracker pytracking.tracker.base.basetracker
NameFrom--->: ImportFrom
[alias(name='siamfc_alexnet', asname=None)]
ImportFrom(module='ltr.models.siamese.siam', names=[alias(name='siamfc_alexnet', asname=None)], level=0)
module_name---> ltr.models.siamese.siam
[1;33mfunc_name.name, and module name are[0m siamfc_alexnet ltr.models.siamese.siam
ImportName--->: Import
[alias(name='cv2', asname=None)]
NameFrom--->: ImportFrom
[alias(name='parameters', asname=None)]
ImportFrom(module='pytracking.parameter.siamfc.default', names=[alias(name='parameters', asname=None)], level=0)
module_name---> pytracking.parameter.siamfc.default
[1;33mfunc_name.name, and module name are[0m parameters pytracking.parameter.siamfc.default
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  parameters pytracking.parameter.siamfc.default.parameters
key, v, from_dict:  siamfc_alexnet ltr.models.siamese.siam.siamfc_alexnet
key, v, from_dict:  dygraph paddle.fluid.dygraph
key, v, from_dict:  BaseTracker pytracking.tracker.base.basetracker.BaseTracker
[3;32mRestore API full name(dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ImageDraw PIL.ImageDraw
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  islice itertools.islice
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/reader.py has been written sucess[0m

[1;32mNo module named 'Fconv2d', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs Fconv2d.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/Fconv2d.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.layer_object_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='LayerObjectHelper', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.layer_object_helper',
    names=[alias(name='LayerObjectHelper', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.layer_object_helper
[1;33mfunc_name.name, and module name are[0m LayerObjectHelper paddle.fluid.dygraph.layer_object_helper
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None),
    alias(name='Constant', asname=None),
    alias(name='NumpyArrayInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer',
    names=[alias(name='Normal', asname=None),
        alias(name='Constant', asname=None),
        alias(name='NumpyArrayInitializer', asname=None)],
    level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NumpyArrayInitializer paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None),
    alias(name='OpProtoHolder', asname=None),
    alias(name='in_dygraph_mode', asname=None)]
ImportFrom(module='paddle.fluid.framework',
    names=[alias(name='Variable', asname=None),
        alias(name='OpProtoHolder', asname=None),
        alias(name='in_dygraph_mode', asname=None)],
    level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m OpProtoHolder paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m in_dygraph_mode paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='utils', asname=None)]
ImportFrom(module='paddle.fluid.layers', names=[alias(name='utils', asname=None)], level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m utils paddle.fluid.layers
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None),
    alias(name='Constant', asname=None),
    alias(name='NumpyArrayInitializer', asname=None)]
ImportFrom(module='paddle.fluid.initializer',
    names=[alias(name='Normal', asname=None),
        alias(name='Constant', asname=None),
        alias(name='NumpyArrayInitializer', asname=None)],
    level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m NumpyArrayInitializer paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='dygraph_utils', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='dygraph_utils', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m dygraph_utils paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None),
    alias(name='OpProtoHolder', asname=None),
    alias(name='in_dygraph_mode', asname=None)]
ImportFrom(module='paddle.fluid.framework',
    names=[alias(name='Variable', asname=None),
        alias(name='OpProtoHolder', asname=None),
        alias(name='in_dygraph_mode', asname=None)],
    level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m OpProtoHolder paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m in_dygraph_mode paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='utils', asname=None)]
ImportFrom(module='paddle.fluid.layers', names=[alias(name='utils', asname=None)], level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m utils paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  dygraph_utils paddle.fluid.dygraph.dygraph_utils
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  OpProtoHolder paddle.fluid.framework.OpProtoHolder
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  in_dygraph_mode paddle.fluid.framework.in_dygraph_mode
key, v, from_dict:  Variable paddle.fluid.framework.Variable
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  utils paddle.fluid.layers.utils
key, v, from_dict:  core paddle.fluid.core
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  NumpyArrayInitializer paddle.fluid.initializer.NumpyArrayInitializer
key, v, from_dict:  LayerObjectHelper paddle.fluid.dygraph.layer_object_helper.LayerObjectHelper
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_floordiv->paddle.elementwise_floordiv)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mod->paddle.elementwise_mod)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_or->paddle.logical_or)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_tree->paddle.nn.gather_tree)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/seq2seq/base_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/configs/tsn_dist_and_dali.yaml[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/configs/tsn_dist_and_dali.yaml has been written sucess[0m
[1;32mNo module named 'bmn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/bmn bmn.py
[1;34mStart upgrading model PaddleCV/video/models/bmn/bmn.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='bmn_net', asname=None)]
ImportFrom(module=None, names=[alias(name='bmn_net', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m bmn_net None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bmn/bmn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/image_loader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/image_loader.py has been written sucess[0m
[1;32mNo module named 'transforms', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/data transforms.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/data/transforms.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname='cv')]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='PTensor', asname=None)], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None math
key,value import_dict:  cv cv2
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
[3;32mRestore API full name(layers.reverse->paddle.fluid.layers.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/transforms.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/tensordict.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/tensordict.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/utils/plotting.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/utils/plotting.py has been written sucess[0m
[1;32mNo module named 'preprocessing', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features preprocessing.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/preprocessing.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->:
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.pow->paddle.fluid.layers.pow)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.logical_and->paddle.fluid.layers.logical_and)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (factor->exponent) in API (paddle.fluid.layers.pow)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.pow)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.pow)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.pow->paddle.tensor.pow)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/dygraph/bert/model/bert.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/video/metrics/metrics_util.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/metrics_util.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/tall_metrics/tall_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/tall_metrics/tall_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/youtube8m/average_precision_calculator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/youtube8m/average_precision_calculator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/youtube8m/mean_average_precision_calculator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/youtube8m/mean_average_precision_calculator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bsn_metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bsn_metrics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/detections/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/detections/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/ets_metrics/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/ets_metrics/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/ets_metrics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/ets_metrics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bmn_metrics/bmn_proposal_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bmn_metrics/bmn_proposal_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/bmn_metrics/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/bmn_metrics/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/kinetics/accuracy_metrics.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/kinetics/accuracy_metrics.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/metrics/kinetics/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/metrics/kinetics/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/run_TSN_LSTM.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/run_TSN_LSTM.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/metrics/youtube8m/average_precision_calculator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/metrics/youtube8m/average_precision_calculator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/video/application/video_tag/models/utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/application/video_tag/models/utils.py has been written sucess[0m
[1;32mNo module named 'bsn_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/reader bsn_reader.py
[1;34mStart upgrading model PaddleCV/video/reader/bsn_reader.py[0m
NameFrom--->: ImportFrom
module_name---> reader_utils
NameFrom--->: ImportFrom
module_name---> models.bsn.bsn_utils
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='platform', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='DataReader', asname=None)]
ImportFrom(module='reader_utils', names=[alias(name='DataReader', asname=None)], level=1)
module_name---> reader_utils
[1;33mfunc_name.name, and module name are[0m DataReader reader_utils
NameFrom--->: ImportFrom
[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)]
ImportFrom(module='models.bsn.bsn_utils',
    names=[alias(name='iou_with_anchors', asname=None), alias(name='ioa_with_anchors', asname=None)],
    level=0)
module_name---> models.bsn.bsn_utils
[1;33mfunc_name.name, and module name are[0m iou_with_anchors models.bsn.bsn_utils
[1;33mfunc_name.name, and module name are[0m ioa_with_anchors models.bsn.bsn_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  pd pandas
key, v, from_dict:  DataReader reader_utils.DataReader
key, v, from_dict:  ioa_with_anchors models.bsn.bsn_utils.ioa_with_anchors
key, v, from_dict:  iou_with_anchors models.bsn.bsn_utils.iou_with_anchors
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/reader/bsn_reader.py has been written sucess[0m

[1;32mNo module named 'featurebase', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features featurebase.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/featurebase.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.libs
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)__future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None), alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer',
    names=[alias(name='Normal', asname=None), alias(name='Constant', asname=None)],
    level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='get_proposal_func', asname=None)]
ImportFrom(module='utils.proposal_utils', names=[alias(name='get_proposal_func', asname=None)], level=0)
module_name---> utils.proposal_utils
[1;33mfunc_name.name, and module name are[0m get_proposal_func utils.proposal_utils
NameFrom--->: ImportFrom
[alias(name='PointNet2MSG', asname=None)]
ImportFrom(module='models.pointnet2_msg', names=[alias(name='PointNet2MSG', asname=None)], level=0)
module_name---> models.pointnet2_msg
[1;33mfunc_name.name, and module name are[0m PointNet2MSG models.pointnet2_msg
NameFrom--->: ImportFrom
[alias(name='conv_bn', asname=None)]
ImportFrom(module='models.pointnet2_modules', names=[alias(name='conv_bn', asname=None)], level=0)
module_name---> models.pointnet2_modules
[1;33mfunc_name.name, and module name are[0m conv_bn models.pointnet2_modules
NameFrom--->: ImportFrom
[alias(name='sigmoid_focal_loss', asname=None), alias(name='get_reg_loss', asname=None)]
ImportFrom(module='models.loss_utils',
    names=[alias(name='sigmoid_focal_loss', asname=None), alias(name='get_reg_loss', asname=None)],
    level=0)
module_name---> models.loss_utils
[1;33mfunc_name.name, and module name are[0m sigmoid_focal_loss models.loss_utils
[1;33mfunc_name.name, and module name are[0m get_reg_loss models.loss_utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  get_reg_loss models.loss_utils.get_reg_loss
key, v, from_dict:  PointNet2MSG models.pointnet2_msg.PointNet2MSG
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  conv_bn models.pointnet2_modules.conv_bn
key, v, from_dict:  get_proposal_func utils.proposal_utils.get_proposal_func
key, v, from_dict:  sigmoid_focal_loss models.loss_utils.sigmoid_focal_loss
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.py_func->paddle.fluid.layers.py_func)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/eval.py has been written sucess[0m

[1;32mNo module named 'tall', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/video/models/tall tall.py
[1;34mStart upgrading model PaddleCV/video/models/tall/tall.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> model
NameFrom--->: ImportFrom
module_name---> None
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='ModelBase', asname=None)]
ImportFrom(module='model', names=[alias(name='ModelBase', asname=None)], level=2)
module_name---> model
[1;33mfunc_name.name, and module name are[0m ModelBase model
NameFrom--->: ImportFrom
[alias(name='tall_net', asname=None)]
ImportFrom(module=None, names=[alias(name='tall_net', asname=None)], level=1)
module_name---> None
[1;33mfunc_name.name, and module name are[0m tall_net None
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  ParamAttr paddle.fluid.ParamAttr
key, v, from_dict:  ModelBase model.ModelBase
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.set_gradient_clip->paddle.fluid.clip.set_gradient_clip)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/tall/tall.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/face_detection/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/face_detection/profile.py[0m
NameFrom--->: ImportFrom
module_name---> optparse
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='marshal', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OptionParser', asname=None)]
ImportFrom(module='optparse', names=[alias(name='OptionParser', asname=None)], level=0)
module_name---> optparse
[1;33mfunc_name.name, and module name are[0m OptionParser optparse
ImportName--->: Import
[alias(name='pstats', asname=None)]
ImportName--->: Import
[alias(name='__main__', asname=None)]
key,value import_dict:  None __main__
key, v, from_dict:  OptionParser optparse.OptionParser
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/profile.py has been written sucess[0m

[1;32mNo module named 'color', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features color.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/color.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.features.featurebase
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='FeatureBase', asname=None)]
ImportFrom(module='pytracking.features.featurebase', names=[alias(name='FeatureBase', asname=None)], level=0)
module_name---> pytracking.features.featurebase
[1;33mfunc_name.name, and module name are[0m FeatureBase pytracking.features.featurebase
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='PTensor', asname=None)], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
key, v, from_dict:  FeatureBase pytracking.features.featurebase.FeatureBase
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/color.py has been written sucess[0m

[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn README.md
[1;34mStart upgrading model PaddleCV/rrpn/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/rrpn/data_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/data_utils.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn infer.py
[1;34mStart upgrading model PaddleCV/rrpn/infer.py[0m
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> data_utils
NameFrom--->: ImportFrom
module_name---> eval_helper
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.roi_pool_3d->paddle.fluid.layers.roi_pool_3d)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models.pointnet2_modules', names=[alias(name='*', asname=None)], level=0)
module_name---> models.pointnet2_modules
[1;33mfunc_name.name, and module name are[0m * models.pointnet2_modules
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * models.pointnet2_modules.*
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/pointnet2_msg.py has been written sucess[0m

[1;32mNo module named 'target_estimator_net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/siamese target_estimator_net.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/siamese/target_estimator_net.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
NameFrom--->: ImportFrom
module_name---> pytracking.libs.Fconv2d
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
NameFrom--->: ImportFrom
[alias(name='nn', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='nn', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m nn paddle.fluid.dygraph
NameFrom--->: ImportFrom
[alias(name='Conv2D', asname=None)]
ImportFrom(module='pytracking.libs.Fconv2d', names=[alias(name='Conv2D', asname=None)], level=0)
module_name---> pytracking.libs.Fconv2d
[1;33mfunc_name.name, and module name are[0m Conv2D pytracking.libs.Fconv2d
key,value import_dict:  None paddle
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  nn paddle.fluid.dygraph.nn
key, v, from_dict:  dygraph paddle.fluid.dygraph
key, v, from_dict:  Conv2D pytracking.libs.Fconv2d.Conv2D
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/siamese/target_estimator_net.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/parameter/atom/default_vot.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/parameter/atom/default_vot.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/dcf.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/dcf.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/utils/params.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/utils/params.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/admin/local.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/admin/local.py has been written sucess[0m
[1;32mNo module named 'dee', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features deep.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/deep.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> ltr.models.bbreg.atom
NameFrom--->: ImportFrom
module_name---> ltr.models.siamese.siam
NameFrom--->: ImportFrom
module_name---> pytracking.admin.environment
NameFrom--->: ImportFrom
module_name---> pytracking.features.featurebase
NameFrom--->: ImportFrom
module_name---> pytracking.libs
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)]
ImportFrom(module='ltr.models.bbreg.atom',
    names=[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)],
    level=0)
module_name---> ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet50 ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet18 ltr.models.bbreg.atom
NameFrom--->: ImportFrom
[alias(name='siamfc_alexnet', asname=None)]
ImportFrom(module='ltr.models.siamese.siam', names=[alias(name='siamfc_alexnet', asname=None)], level=0)
module_name---> ltr.models.siamese.siam
[1;33mfunc_name.name, and module name are[0m siamfc_alexnet ltr.models.siamese.siam
NameFrom--->: ImportFrom
[alias(name='env_settings', asname=None)]
ImportFrom(module='pytracking.admin.environment', names=[alias(name='env_settings', asname=None)], level=0)
module_name---> pytracking.admin.environment
[1;33mfunc_name.name, and module name are[0m env_settings pytracking.admin.environment
NameFrom--->: ImportFrom
[alias(name='MultiFeatureBase', asname=None)]
ImportFrom(module='pytracking.features.featurebase', names=[alias(name='MultiFeatureBase', asname=None)], level=0)
module_name---> pytracking.features.featurebase
[1;33mfunc_name.name, and module name are[0m MultiFeatureBase pytracking.features.featurebase
NameFrom--->: ImportFrom
[alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs', names=[alias(name='TensorList', asname=None)], level=0)
module_name---> pytracking.libs
[1;33mfunc_name.name, and module name are[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/train_seg.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/got10k.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/got10k.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/__init__.py has been written sucess[0m
[1;32mNo module named 'atom_res18_vid_lasot_coco', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/train_settings/bbreg atom_res18_vid_lasot_coco.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/train_settings/bbreg/atom_res18_vid_lasot_coco.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.data
NameFrom--->: ImportFrom
module_name---> ltr.dataset
NameFrom--->: ImportFrom
module_name---> ltr.models.bbreg.atom
NameFrom--->: ImportFrom
module_name---> ltr.trainers
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='ltr.actors', asname='actors')]
ImportName--->: Import
[alias(name='ltr.data.transforms', asname='dltransforms')]
NameFrom--->: ImportFrom
[alias(name='processing', asname=None), alias(name='sampler', asname=None), alias(name='loader', asname=None)]
ImportFrom(module='ltr.data',
    names=[alias(name='processing', asname=None),
        alias(name='sampler', asname=None),
        alias(name='loader', asname=None)],
    level=0)
module_name---> ltr.data
[1;33mfunc_name.name, and module name are[0m processing ltr.data
[1;33mfunc_name.name, and module name are[0m sampler ltr.data
[1;33mfunc_name.name, and module name are[0m loader ltr.data
NameFrom--->: ImportFrom
[alias(name='ImagenetVID', asname=None),
    alias(name='MSCOCOSeq', asname=None),
    alias(name='Lasot', asname=None),
    alias(name='Got10k', asname=None)]
ImportFrom(module='ltr.dataset',
    names=[alias(name='ImagenetVID', asname=None),
        alias(name='MSCOCOSeq', asname=None),
        alias(name='Lasot', asname=None),
        alias(name='Got10k', asname=None)],
    level=0)
module_name---> ltr.dataset
[1;33mfunc_name.name, and module name are[0m ImagenetVID ltr.dataset
[1;33mfunc_name.name, and module name are[0m MSCOCOSeq ltr.dataset
[1;33mfunc_name.name, and module name are[0m Lasot ltr.dataset
[1;33mfunc_name.name, and module name are[0m Got10k ltr.dataset
NameFrom--->: ImportFrom
[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)]
ImportFrom(module='ltr.models.bbreg.atom',
    names=[alias(name='atom_resnet50', asname=None), alias(name='atom_resnet18', asname=None)],
    level=0)
module_name---> ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet50 ltr.models.bbreg.atom
[1;33mfunc_name.name, and module name are[0m atom_resnet18 ltr.models.bbreg.atom
NameFrom--->: ImportFrom
[alias(name='LTRTrainer', asname=None)]
ImportFrom(module='ltr.trainers', names=[alias(name='LTRTrainer', asname=None)], level=0)
module_name---> ltr.trainers
[1;33mfunc_name.name, and module name are[0m LTRTrainer ltr.trainers
key,value import_dict:  dltransforms ltr.data.transforms
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  dygraph paddle.fluid.dygraph
key,value import_dict:  actors ltr.actors
key, v, from_dict:  sampler ltr.data.sampler
key, v, from_dict:  atom_resnet50 ltr.models.bbreg.atom.atom_resnet50
key, v, from_dict:  ImagenetVID ltr.dataset.ImagenetVID
key, v, from_dict:  loader ltr.data.loader
key, v, from_dict:  processing ltr.data.processing
key, v, from_dict:  LTRTrainer ltr.trainers.LTRTrainer
key, v, from_dict:  Lasot ltr.dataset.Lasot
key, v, from_dict:  Got10k ltr.dataset.Got10k
key, v, from_dict:  MSCOCOSeq ltr.dataset.MSCOCOSeq
key, v, from_dict:  atom_resnet18 ltr.models.bbreg.atom.atom_resnet18
[3;32mRestore API full name(dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.PiecewiseDecay->paddle.fluid.dygraph.PiecewiseDecay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/train_settings/bbreg/atom_res18_vid_lasot_coco.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/parameter/atom/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/parameter/atom/__init__.py has been written sucess[0m
[1;32mNo module named 'operation', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs operation.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/operation.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.libs.Fconv2d
NameFrom--->: ImportFrom
module_name---> pytracking.libs.tensorlist
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='Fconv2d', asname=None)]
ImportFrom(module='pytracking.libs.Fconv2d', names=[alias(name='Fconv2d', asname=None)], level=0)
module_name---> pytracking.libs.Fconv2d
[1;33mfunc_name.name, and module name are[0m Fconv2d pytracking.libs.Fconv2d
NameFrom--->: ImportFrom
[alias(name='tensor_operation', asname=None), alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs.tensorlist',
    names=[alias(name='tensor_operation', asname=None), alias(name='TensorList', asname=None)],
    level=0)
module_name---> pytracking.libs.tensorlist
[1;33mfunc_name.name, and module name are[0m tensor_operation pytracking.libs.tensorlist
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs.tensorlist
NameFrom--->: ImportFrom
[alias(name='Variable', asname='PTensor')]
ImportFrom(module='paddle.fluid.framework', names=[alias(name='Variable', asname='PTensor')], level=0)
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.prior_box->paddle.nn.functional.prior_box)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.prior_box->paddle.nn.functional.prior_box)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.prior_box->paddle.nn.functional.prior_box)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.prior_box->paddle.nn.functional.prior_box)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.ssd_loss->paddle.nn.functional.ssd_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.ssd_loss->paddle.nn.functional.ssd_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.ssd_loss->paddle.nn.functional.ssd_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.detection_output->paddle.nn.functional.detection_output)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/pyramidbox.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/edict.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/edict.py has been written sucess[0m
[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn eval.py
[1;34mStart upgrading model PaddleCV/rrpn/eval.py[0m
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> data_utils
NameFrom--->: ImportFrom
module_name---> eval_helper
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models.model_builder', asname='model_builder')]
ImportName--->: Import
[alias(name='models.resnet', asname='resnet')]
ImportName--->: Import
[alias(name='checkpoint', asname='checkpoint')]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None),
    alias(name='parse_args', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='print_arguments', asname=None),
        alias(name='parse_args', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
NameFrom--->: ImportFrom
[alias(name='DatasetPath', asname=None)]
ImportFrom(module='data_utils', names=[alias(name='DatasetPath', asname=None)], level=0)
module_name---> data_utils
[1;33mfunc_name.name, and module name are[0m DatasetPath data_utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='eval_helper', names=[alias(name='*', asname=None)], level=0)
module_name---> eval_helper
[1;33mfunc_name.name, and module name are[0m * eval_helper
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  resnet models.resnet
key,value import_dict:  None logging
key,value import_dict:  checkpoint checkpoint
key,value import_dict:  model_builder models.model_builder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  * eval_helper.*
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  DatasetPath data_utils.DatasetPath
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/eval.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/models/ext_op/src/make.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/ext_op/src/make.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/human_pose_estimation
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/pointnet2_modules.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/eval_benchmark.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/eval_benchmark.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/siamfc/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/siamfc/__init__.py has been written sucess[0m
[1;32mNo module named 'atom', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/tracker/atom atom.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/atom/atom.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.features
NameFrom--->: ImportFrom
module_name---> pytracking.libs
NameFrom--->: ImportFrom
module_name---> pytracking.libs.optimization
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
module_name---> pytracking.libs.tensorlist
NameFrom--->: ImportFrom
module_name---> pytracking.tracker.atom.optim
NameFrom--->: ImportFrom
module_name---> pytracking.tracker.base.basetracker
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='augmentation', asname=None)]
ImportFrom(module='pytracking.features', names=[alias(name='augmentation', asname=None)], level=0)
module_name---> pytracking.features
[1;33mfunc_name.name, and module name are[0m augmentation pytracking.features
NameFrom--->: ImportFrom
[alias(name='dcf', asname=None), alias(name='operation', asname=None), alias(name='fourier', asname=None)]
ImportFrom(module='pytracking.libs',
    names=[alias(name='dcf', asname=None), alias(name='operation', asname=None), alias(name='fourier', asname=None)],
    level=0)
module_name---> pytracking.libs
[1;33mfunc_name.name, and module name are[0m dcf pytracking.libs
[1;33mfunc_name.name, and module name are[0m operation pytracking.libs
[1;33mfunc_name.name, and module name are[0m fourier pytracking.libs
NameFrom--->: ImportFrom
[alias(name='ConjugateGradient', asname=None),
    alias(name='GaussNewtonCG', asname=None),
    alias(name='GradientDescentL2', asname=None)]
ImportFrom(module='pytracking.libs.optimization',
    names=[alias(name='ConjugateGradient', asname=None),
        alias(name='GaussNewtonCG', asname=None),
        alias(name='GradientDescentL2', asname=None)],
    level=0)
module_name---> pytracking.libs.optimization
[1;33mfunc_name.name, and module name are[0m ConjugateGradient pytracking.libs.optimization
[1;33mfunc_name.name, and module name are[0m GaussNewtonCG pytracking.libs.optimization
[1;33mfunc_name.name, and module name are[0m GradientDescentL2 pytracking.libs.optimization
NameFrom--->: ImportFrom
[alias(name='mod', asname=None),
    alias(name='n2p', asname=None),
    alias(name='leaky_relu', asname=None),
    alias(name='dropout2d', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='mod', asname=None),
        alias(name='n2p', asname=None),
        alias(name='leaky_relu', asname=None),
        alias(name='dropout2d', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m mod pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m leaky_relu pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m dropout2d pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
[alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs.tensorlist', names=[alias(name='TensorList', asname=None)], level=0)
module_name---> pytracking.libs.tensorlist
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs.tensorlist
NameFrom--->: ImportFrom
[alias(name='FactorizedConvProblem', asname=None), alias(name='ConvProblem', asname=None)]
ImportFrom(module='pytracking.tracker.atom.optim',
    names=[alias(name='FactorizedConvProblem', asname=None), alias(name='ConvProblem', asname=None)],
    level=0)
module_name---> utils.run_utils
NameFrom--->: ImportFrom
module_name---> utils.config
NameFrom--->: ImportFrom
module_name---> utils.optimizer
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='control_flow', asname=None)]
ImportFrom(module='paddle.fluid.layers', names=[alias(name='control_flow', asname=None)], level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m control_flow paddle.fluid.layers
ImportName--->: Import
[alias(name='paddle.fluid.layers.learning_rate_scheduler', asname='lr_scheduler')]
NameFrom--->: ImportFrom
[alias(name='PointRCNN', asname=None)]
ImportFrom(module='models.point_rcnn', names=[alias(name='PointRCNN', asname=None)], level=0)
module_name---> models.point_rcnn
[1;33mfunc_name.name, and module name are[0m PointRCNN models.point_rcnn
NameFrom--->: ImportFrom
[alias(name='KittiRCNNReader', asname=None)]
ImportFrom(module='data.kitti_rcnn_reader', names=[alias(name='KittiRCNNReader', asname=None)], level=0)
module_name---> data.kitti_rcnn_reader
[1;33mfunc_name.name, and module name are[0m KittiRCNNReader data.kitti_rcnn_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.run_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.run_utils
[1;33mfunc_name.name, and module name are[0m * utils.run_utils
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None),
    alias(name='load_config', asname=None),
    alias(name='set_config_from_list', asname=None)]
ImportFrom(module='utils.config',
    names=[alias(name='cfg', asname=None),
        alias(name='load_config', asname=None),
        alias(name='set_config_from_list', asname=None)],
    level=0)
module_name---> utils.config
[1;33mfunc_name.name, and module name are[0m cfg utils.config
[1;33mfunc_name.name, and module name are[0m load_config utils.config
[1;33mfunc_name.name, and module name are[0m set_config_from_list utils.config
NameFrom--->: ImportFrom
[alias(name='optimize', asname=None)]
ImportFrom(module='utils.optimizer', names=[alias(name='optimize', asname=None)], level=0)
module_name---> utils.optimizer
[1;33mfunc_name.name, and module name are[0m optimize utils.optimizer
key,value import_dict:  lr_scheduler paddle.fluid.layers.learning_rate_scheduler
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  PointRCNN models.point_rcnn.PointRCNN
key, v, from_dict:  cfg utils.config.cfg
key, v, from_dict:  * utils.run_utils.*
key, v, from_dict:  control_flow paddle.fluid.layers.control_flow
key, v, from_dict:  set_config_from_list utils.config.set_config_from_list
key, v, from_dict:  load_config utils.config.load_config
key, v, from_dict:  KittiRCNNReader data.kitti_rcnn_reader.KittiRCNNReader
key, v, from_dict:  optimize utils.optimizer.optimize
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/train.py has been written sucess[0m

[1;32mNo module named 'atom', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/bbreg atom.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/bbreg/atom.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.models.backbone.resnet
NameFrom--->: ImportFrom
module_name---> ltr.models.bbreg.atom_iou_net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='os.path', asname='osp')]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='resnet50', asname=None), alias(name='resnet18', asname=None)]
ImportFrom(module='ltr.models.backbone.resnet',
    names=[alias(name='resnet50', asname=None), alias(name='resnet18', asname=None)],
    level=0)
module_name---> ltr.models.backbone.resnet
[1;33mfunc_name.name, and module name are[0m resnet50 ltr.models.backbone.resnet
[1;33mfunc_name.name, and module name are[0m resnet18 ltr.models.backbone.resnet
NameFrom--->: ImportFrom
[alias(name='AtomIouNet', asname=None)]
ImportFrom(module='ltr.models.bbreg.atom_iou_net', names=[alias(name='AtomIouNet', asname=None)], level=0)
module_name---> ltr.models.bbreg.atom_iou_net
[1;33mfunc_name.name, and module name are[0m AtomIouNet ltr.models.bbreg.atom_iou_net
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key,value import_dict:  dygraph paddle.fluid.dygraph
key,value import_dict:  osp os.path
key, v, from_dict:  AtomIouNet ltr.models.bbreg.atom_iou_net.AtomIouNet
key, v, from_dict:  resnet50 ltr.models.backbone.resnet.resnet50
key, v, from_dict:  resnet18 ltr.models.backbone.resnet.resnet18
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/bbreg/atom.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/util/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/util/config.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/util/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/util/__init__.py has been written sucess[0m
[1;32mNo module named 'STGAN_network', so we use another strategy to dynamically import module[0m
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None),
    alias(name='OpProtoHolder', asname=None),
    alias(name='in_dygraph_mode', asname=None)]
ImportFrom(module='paddle.fluid.framework',
    names=[alias(name='Variable', asname=None),
        alias(name='OpProtoHolder', asname=None),
        alias(name='in_dygraph_mode', asname=None)],
    level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m OpProtoHolder paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m in_dygraph_mode paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='utils', asname=None)]
ImportFrom(module='paddle.fluid.layers', names=[alias(name='utils', asname=None)], level=0)
module_name---> paddle.fluid.layers
[1;33mfunc_name.name, and module name are[0m utils paddle.fluid.layers
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  OpProtoHolder paddle.fluid.framework.OpProtoHolder
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  in_dygraph_mode paddle.fluid.framework.in_dygraph_mode
key, v, from_dict:  Variable paddle.fluid.framework.Variable
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  utils paddle.fluid.layers.utils
key, v, from_dict:  core paddle.fluid.core
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  NumpyArrayInitializer paddle.fluid.initializer.NumpyArrayInitializer
key, v, from_dict:  LayerObjectHelper paddle.fluid.dygraph.layer_object_helper.LayerObjectHelper
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/Fconv2d_static.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn reader.py
[1;34mStart upgrading model PaddleCV/rrpn/reader.py[0m
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> roidbs
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> data_utils
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='xml.etree.ElementTree', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='deque', asname=None)]
ImportFrom(module='collections', names=[alias(name='deque', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m deque collections
ImportName--->: Import
[alias(name='data_utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ICDAR2015Dataset', asname=None), alias(name='ICDAR2017Dataset', asname=None)]
ImportFrom(module='roidbs',
    names=[alias(name='ICDAR2015Dataset', asname=None), alias(name='ICDAR2017Dataset', asname=None)],
    level=0)
module_name---> roidbs
[1;33mfunc_name.name, and module name are[0m ICDAR2015Dataset roidbs
[1;33mfunc_name.name, and module name are[0m ICDAR2017Dataset roidbs
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='_resize', asname=None)]
ImportFrom(module='data_utils', names=[alias(name='_resize', asname=None)], level=0)
module_name---> data_utils
[1;33mfunc_name.name, and module name are[0m _resize data_utils
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='utility', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None time
key, v, from_dict:  deque collections.deque
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  ICDAR2015Dataset roidbs.ICDAR2015Dataset
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  ICDAR2017Dataset roidbs.ICDAR2017Dataset
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  _resize data_utils._resize
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/reader.py has been written sucess[0m

[1;32mNo module named 'DCGAN_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network DCGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/DCGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='norm_layer', asname=None),
    alias(name='deconv2d', asname=None),
    alias(name='linear', asname=None),
    alias(name='conv_and_pool', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='norm_layer', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='linear', asname=None),
        alias(name='conv_and_pool', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m linear base_network
[1;33mfunc_name.name, and module name are[0m 
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.logical_and->paddle.logical_and)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/loss_utils.py has been written sucess[0m

[1;32mNo module named 'model_builder', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn/models model_builder.py
[1;34mStart upgrading model PaddleCV/rrpn/models/model_builder.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.regularizer
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> models.ext_op.rrpn_lib
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Normal', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='L2Decay', asname=None)]
ImportFrom(module='paddle.fluid.regularizer', names=[alias(name='L2Decay', asname=None)], level=0)
module_name---> paddle.fluid.regularizer
[1;33mfunc_name.name, and module name are[0m L2Decay paddle.fluid.regularizer
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models.ext_op.rrpn_lib', names=[alias(name='*', asname=None)], level=0)
module_name---> models.ext_op.rrpn_lib
[1;33mfunc_name.name, and module name are[0m * models.ext_op.rrpn_lib
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
key, v, from_dict:  * models.ext_op.rrpn_lib.*
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  L2Decay paddle.fluid.regularizer.L2Decay
[3;32mRestore API full name(fluid.layers.sum->paddle.fluid.layers.sum)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand->paddle.fluid.layers.sequence_expand)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.multiclass_nms->paddle.fluid.layers.multiclass_nms)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.less_than->paddle.fluid.layers.less_than)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='PyramidBox', asname=None)]
ImportFrom(module='pyramidbox', names=[alias(name='PyramidBox', asname=None)], level=0)
module_name---> pyramidbox
[1;33mfunc_name.name, and module name are[0m PyramidBox pyramidbox
NameFrom--->: ImportFrom
[alias(name='draw_bboxes', asname=None)]
ImportFrom(module='visualize', names=[alias(name='draw_bboxes', asname=None)], level=0)
module_name---> visualize
[1;33mfunc_name.name, and module name are[0m draw_bboxes visualize
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  draw_bboxes visualize.draw_bboxes
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  PyramidBox pyramidbox.PyramidBox
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/face_detection/widerface_eval.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/youtube_vos.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/youtube_vos.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/youtube_bb.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/youtube_bb.py has been written sucess[0m
[1;32mNo module named 'ltr_trainer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/trainers ltr_trainer.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/trainers/ltr_trainer.py[0m
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> ltr.trainers
NameFrom--->: ImportFrom
module_name---> ltr.admin.stats
NameFrom--->: ImportFrom
module_name---> ltr.admin.tensorboard
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
NameFrom--->: ImportFrom
[alias(name='BaseTrainer', asname=None)]
ImportFrom(module='ltr.trainers', names=[alias(name='BaseTrainer', asname=None)], level=0)
module_name---> ltr.trainers
[1;33mfunc_name.name, and module name are[0m BaseTrainer ltr.trainers
NameFrom--->: ImportFrom
[alias(name='AverageMeter', asname=None), alias(name='StatValue', asname=None)]
ImportFrom(module='ltr.admin.stats',
    names=[alias(name='AverageMeter', asname=None), alias(name='StatValue', asname=None)],
    level=0)
module_name---> ltr.admin.stats
[1;33mfunc_name.name, and module name are[0m AverageMeter ltr.admin.stats
[1;33mfunc_name.name, and module name are[0m StatValue ltr.admin.stats
NameFrom--->: ImportFrom
[alias(name='TensorboardWriter', asname=None)]
ImportFrom(module='ltr.admin.tensorboard', names=[alias(name='TensorboardWriter', asname=None)], level=0)
module_name---> ltr.admin.tensorboard
[1;33mfunc_name.name, and module name are[0m TensorboardWriter ltr.admin.tensorboard
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='signal', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None signal
key,value import_dict:  dygraph paddle.fluid.dygraph
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  AverageMeter ltr.admin.stats.AverageMeter
key, v, from_dict:  StatValue ltr.admin.stats.StatValue
key, v, from_dict:  TensorboardWriter ltr.admin.tensorboard.TensorboardWriter
key, v, from_dict:  BaseTrainer ltr.trainers.BaseTrainer
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/trainers/ltr_trainer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/roidbs.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/roidbs.py has been written sucess[0m
[1;32mNo module named 'resnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn/models resnet.py
[1;34mStart upgrading model PaddleCV/rrpn/models/resnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid.regularizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> numbers
NameFrom--->: ImportFrom
module_name---> name_adapter
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
NameFrom--->: ImportFrom
module_name---> models
NameFrom--->: ImportFrom
module_name---> data.modelnet40_reader
NameFrom--->: ImportFrom
module_name---> data.data_utils
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='ast', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='models', names=[alias(name='*', asname=None)], level=0)
module_name---> models
[1;33mfunc_name.name, and module name are[0m * models
NameFrom--->: ImportFrom
[alias(name='ModelNet40ClsReader', asname=None)]
ImportFrom(module='data.modelnet40_reader', names=[alias(name='ModelNet40ClsReader', asname=None)], level=0)
module_name---> data.modelnet40_reader
[1;33mfunc_name.name, and module name are[0m ModelNet40ClsReader data.modelnet40_reader
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='data.data_utils', names=[alias(name='*', asname=None)], level=0)
module_name---> data.data_utils
[1;33mfunc_name.name, and module name are[0m * data.data_utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  * utils.*
key, v, from_dict:  ModelNet40ClsReader data.modelnet40_reader.ModelNet40ClsReader
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(framework.default_startup_program->paddle.fluid.framework.default_startup_program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_startup_program->paddle.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/train_cls.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/fourier.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/fourier.py has been written sucess[0m
[1;32mNo module named 'paddle_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs paddle_utils.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/paddle_utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None)]
ImportFrom(module='paddle.fluid.framework', names=[alias(name='Variable', asname=None)], level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
ImportName--->: Import
[alias(name='cv2', asname='cv')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  cv cv2
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  Variable paddle.fluid.framework.Variable
key, v, from_dict:  dygraph paddle.fluid.dygraph
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.stack->paddle.fluid.layers.stack)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.case->paddle.fluid.layers.case)[0m
[3;32mRestore API full name(fluid.layers.case->paddle.fluid.layers.case)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.framework.name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.cos->paddle.cos)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.case->paddle.nn.case)[0m
[1;33mUpgrade API (paddle.fluid.layers.case->paddle.nn.case)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/optimizer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/data/sampler.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/data/sampler.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/tracking_net.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/tracking_net.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/imagenetvid.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/imagenetvid.py has been written sucess[0m
[1;32mNo module named 'siamfc_alexnet_vid_replicate', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/train_settings/siamfc siamfc_alexnet_vid_replicate.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/train_settings/siamfc/siamfc_alexnet_vid_replicate.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.data
NameFrom--->: ImportFrom
module_name---> ltr.dataset
NameFrom--->: ImportFrom
module_name---> ltr.models.siamese.siam
NameFrom--->: ImportFrom
module_name---> ltr.trainers
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph', asname='dygraph')]
ImportName--->: Import
[alias(name='ltr.actors', asname='actors')]
ImportName--->: Import
[alias(name='ltr.data.transforms', asname='dltransforms')]
NameFrom--->: ImportFrom
[alias(name='processing', asname=None), alias(name='sampler', asname=None), alias(name='loader', asname=None)]
ImportFrom(module='ltr.data',
    names=[alias(name='processing', asname=None),
        alias(name='sampler', asname=None),
        alias(name='loader', asname=None)],
    level=0)
module_name---> ltr.data
[1;33mfunc_name.name, and module name are[0m processing ltr.data
[1;33mfunc_name.name, and module name are[0m sampler ltr.data
[1;33mfunc_name.name, and module name are[0m loader ltr.data
NameFrom--->: ImportFrom
[alias(name='ImagenetVID', asname=None), alias(name='Got10k', asname=None)]
ImportFrom(module='ltr.dataset',
    names=[alias(name='ImagenetVID', asname=None), alias(name='Got10k', asname=None)],
    level=0)
module_name---> ltr.dataset
[1;33mfunc_name.name, and module name are[0m ImagenetVID ltr.dataset
[1;33mfunc_name.name, and module name are[0m Got10k ltr.dataset
NameFrom--->: ImportFrom
[alias(name='siamfc_alexnet', asname=None)]
ImportFrom(module='ltr.models.siamese.siam', names=[alias(name='siamfc_alexnet', asname=None)], level=0)
module_name---> ltr.models.siamese.siam
[1;33mfunc_name.name, and module name are[0m siamfc_alexnet ltr.models.siamese.siam
NameFrom--->: ImportFrom
[alias(name='LTRTrainer', asname=None)]
ImportFrom(module='ltr.trainers', names=[alias(name='LTRTrainer', asname=None)], level=0)
module_name---> ltr.trainers
[1;33mfunc_name.name, and module name are[0m LTRTrainer ltr.trainers
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname='cv')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
key,value import_dict:  None paddle
key,value import_dict:  dygraph paddle.fluid.dygraph
key,value import_dict:  cv cv2
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  dltransforms ltr.data.transforms
key,value import_dict:  actors ltr.actors
key, v, from_dict:  sampler ltr.data.sampler
key, v, from_dict:  siamfc_alexnet ltr.models.siamese.siam.siamfc_alexnet
key, v, from_dict:  ImagenetVID ltr.dataset.ImagenetVID
key, v, from_dict:  loader ltr.data.loader
key, v, from_dict:  processing ltr.data.processing
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  LTRTrainer ltr.trainers.LTRTrainer
key, v, from_dict:  Got10k ltr.dataset.Got10k
[3;32mRestore API full name(dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/train_settings/siamfc/siamfc_alexnet_vid_replicate.py has been written sucess[0m

[1;32mNo module named 'eval_helper', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn eval_helper.py
[1;34mStart upgrading model PaddleCV/rrpn/eval_helper.py[0m
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.affine_channel->paddle.nn.functional.affine_channel)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool3d->paddle.nn.functional.pool3d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool3d->paddle.nn.functional.pool3d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool3d->paddle.nn.functional.pool3d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/nonlocal_model/resnet_video.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/data/kitti_rcnn_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/data/kitti_rcnn_reader.py has been written sucess[0m
[1;32mNo module named 'proposal_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointRCNN/utils proposal_utils.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/proposal_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils.config
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='utils.box_utils', asname='box_utils')]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='utils.config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> utils.config
[1;33mfunc_name.name, and module name are[0m cfg utils.config
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  box_utils utils.box_utils
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.py_func->paddle.fluid.layers.py_func)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/proposal_utils.py has been written sucess[0m

[1;32mNo module named 'AttGAN_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network AttGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/AttGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None),
    alias(name='deconv2d', asname=None),
    alias(name='norm_layer', asname=None),
    alias(name='linear', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None),
        alias(name='linear', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
[1;33mfunc_name.name, and module name are[0m linear base_network print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/box_utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/__init__.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn train.py
[1;34mStart upgrading model PaddleCV/rrpn/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models.model_builder', asname='model_builder')]
ImportName--->: Import
[alias(name='models.resnet', asname='resnet')]
ImportName--->: Import
[alias(name='checkpoint', asname='checkpoint')]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='SmoothedValue', asname=None),
    alias(name='TrainingStats', asname=None),
    alias(name='now_time', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='parse_args', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='SmoothedValue', asname=None),
        alias(name='TrainingStats', asname=None),
        alias(name='now_time', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m SmoothedValue utility
[1;33mfunc_name.name, and module name are[0m TrainingStats utility
[1;33mfunc_name.name, and module name are[0m now_time utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
key,value import_dict:  resnet models.resnet
key,value import_dict:  None reader
key,value import_dict:  checkpoint checkpoint
key,value import_dict:  model_builder models.model_builder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  now_time utility.now_time
key, v, from_dict:  TrainingStats utility.TrainingStats
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  SmoothedValue utility.SmoothedValue
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.layers.linear_lr_warmup->paddle.fluid.layers.linear_lr_warmup)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.linear_lr_warmup->paddle.nn.functional.linear_lr_warmup)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/train.py has been written sucess[0m

[1;32mNo module named 'CycleGAN_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network CycleGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/CycleGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None), alias(name='deconv2d', asname=None), alias(name='norm_layer', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None)],
    level=1)
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models.model_builder', asname='model_builder')]
ImportName--->: Import
[alias(name='models.resnet', asname='resnet')]
ImportName--->: Import
[alias(name='checkpoint', asname='checkpoint')]
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
NameFrom--->: ImportFrom
[alias(name='DatasetPath', asname=None)]
ImportFrom(module='data_utils', names=[alias(name='DatasetPath', asname=None)], level=0)
module_name---> data_utils
[1;33mfunc_name.name, and module name are[0m DatasetPath data_utils
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='eval_helper', names=[alias(name='*', asname=None)], level=0)
module_name---> eval_helper
[1;33mfunc_name.name, and module name are[0m * eval_helper
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None),
    alias(name='parse_args', asname=None),
    alias(name='check_gpu', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='print_arguments', asname=None),
        alias(name='parse_args', asname=None),
        alias(name='check_gpu', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m parse_args utility
[1;33mfunc_name.name, and module name are[0m check_gpu utility
key,value import_dict:  resnet models.resnet
key,value import_dict:  None reader
key,value import_dict:  checkpoint checkpoint
key,value import_dict:  model_builder models.model_builder
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  * eval_helper.*
key, v, from_dict:  DatasetPath data_utils.DatasetPath
key, v, from_dict:  parse_args utility.parse_args
key, v, from_dict:  check_gpu utility.check_gpu
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/mpii_evaluator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/mpii_evaluator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/transforms.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/transforms.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/base_evaluator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/base_evaluator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan train.py
[1;34mStart upgrading model PaddleCV/gan/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> data_reader
[1;34mfuture count is 2 [0m
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='config', asname=None), alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='config', asname=None), alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m config util
[1;33mfunc_name.name, and module name are[0m utility util
NameFrom--->: ImportFrom
[alias(name='data_reader', asname=None)]
ImportFrom(module='data_reader', names=[alias(name='data_reader', asname=None)], level=0)
module_name---> data_reader
[1;33mfunc_name.name, and module name are[0m data_reader data_reader
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='trainer', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None trainer
key, v, from_dict:  config util.config
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  utility util.utility
key, v, from_dict:  data_reader data_reader.data_reader
[3;32mRestore API full name(fluid.profiler.profiler->paddle.fluid.profiler.profiler)[0m
[3;32mRestore API full name(fluid.profiler.profiler->paddle.fluid.profiler.profiler)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/train.py has been written sucess[0m

[1;32mNo module named 'SPADE_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network SPADE_network.py
[1;34mStart upgrading model PaddleCV/gan/network/SPADE_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function
[1;32mNo module named 'pointnet2_modules', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/3d_vision/PointNet++/models pointnet2_modules.py
[1;34mStart upgrading model PaddleCV/3d_vision/PointNet++/models/pointnet2_modules.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> ext_op
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='ext_op', names=[alias(name='*', asname=None)], level=0)
module_name---> ext_op
[1;33mfunc_name.name, and module name are[0m * ext_op
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * ext_op.*
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.framework._get_var->paddle.fluid.framework._get_var)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/run_utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/eval.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/eval.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/coco_seq.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/coco_seq.py has been written sucess[0m
[1;32mNo module named 'base_trainer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/trainers base_trainer.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/trainers/base_trainer.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='glob', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  None pickle
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  dygraph paddle.fluid.dygraph
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/trainers/base_trainer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'augmentation', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features augmentation.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/augmentation.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.features.preprocessing
NameFrom--->: ImportFrom
module_name---> pytracking.libs.Fconv2d
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
ImportName--->: Import
[alias(name='cv2', asname='cv')]
NameFrom--->: ImportFrom
[alias(name='numpy_to_paddle', asname=None), alias(name='paddle_to_numpy', asname=None)]
ImportFrom(module='pytracking.features.preprocessing',
    names=[alias(name='numpy_to_paddle', asname=None), alias(name='paddle_to_numpy', asname=None)],
    level=0)
module_name---> pytracking.features.preprocessing
[1;33mfunc_name.name, and module name are[0m numpy_to_paddle pytracking.features.preprocessing
[1;33mfunc_name.name, and module name are[0m paddle_to_numpy pytracking.features.preprocessing
NameFrom--->: ImportFrom
[alias(name='Fconv2d', asname=None)]
ImportFrom(module='pytracking.libs.Fconv2d', names=[alias(name='Fconv2d', asname=None)], level=0)
module_name---> pytracking.libs.Fconv2d
[1;33mfunc_name.name, and module name are[0m Fconv2d pytracking.libs.Fconv2d
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None), alias(name='_padding', asname=None), alias(name='n2p', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='PTensor', asname=None), alias(name='_padding', asname=None), alias(name='n2p', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m _padding pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None math
key,value import_dict:  cv cv2
key, v, from_dict:  Fconv2d pytracking.libs.Fconv2d.Fconv2d
key, v, from_dict:  paddle_to_numpy pytracking.features.preprocessing.paddle_to_numpy
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  numpy_to_paddle pytracking.features.preprocessing.numpy_to_paddle
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  _padding pytracking.libs.paddle_utils._padding
[3;32mRestore API full name(_padding->pytracking.libs.paddle_utils._padding)[0m
[3;32mRestore API full name(_padding->pytracking.libs.paddle_utils._padding)[0m
[3;32mRestore API full name(layers.reverse->paddle.fluid.layers.reverse)[0m
[3;32mRestore API full name(layers.reverse->paddle.fluid.layers.reverse)[0m
[3;32mRestore API full name(layers.resize_bilinear->paddle.fluid.layers.resize_bilinear)[0m
[3;32mRestore API full name(paddle_to_numpy->pytracking.features.preprocessing.paddle_to_numpy)[0m
[3;32mRestore API full name(numpy_to_paddle->pytracking.features.preprocessing.numpy_to_paddle)[0m
[3;32mRestore API full name(paddle_to_numpy->pytracking.features.preprocessing.paddle_to_numpy)[0m
[3;32mRestore API full name(numpy_to_paddle->pytracking.features.preprocessing.numpy_to_paddle)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(numpy_to_paddle->pytracking.features.preprocessing.numpy_to_paddle)[0m
[3;32mRestore API full name(paddle_to_numpy->pytracking.features.preprocessing.paddle_to_numpy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.reverse->paddle.reverse)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_bilinear->paddle.nn.functional.resize_bilinear)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/augmentation.py has been written sucess[0m

[1;32mNo module named 'STGAN', so we use another strategy to dynamically import module[0m
-->module name and package name:
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/rpn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/human_pose_estimation/lib/mpii_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/lib/mpii_reader.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan infer.py
[1;34mStart upgrading model PaddleCV/gan/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> util.config
NameFrom--->: ImportFrom
module_name---> data_reader
NameFrom--->: ImportFrom
module_name---> util.utility
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> network.CycleGAN_network
NameFrom--->: ImportFrom
module_name---> network.Pix2pix_network
NameFrom--->: ImportFrom
module_name---> network.StarGAN_network
NameFrom--->: ImportFrom
module_name---> network.STGAN_network
NameFrom--->: ImportFrom
module_name---> network.AttGAN_network
NameFrom--->: ImportFrom
module_name---> network.CGAN_network
NameFrom--->: ImportFrom
module_name---> network.DCGAN_network
NameFrom--->: ImportFrom
module_name---> network.SPADE_network
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='glob', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='util.config',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> util.config
[1;33mfunc_name.name, and module name are[0m add_arguments util.config
[1;33mfunc_name.name, and module name are[0m print_arguments util.config
NameFrom--->: ImportFrom
[alias(name='celeba_reader_creator', asname=None),
    alias(name='reader_creator', asname=None),
    alias(name='triplex_reader_creator', asname=None)]
ImportFrom(module='data_reader',
    names=[alias(name='celeba_reader_creator', asname=None),
        alias(name='reader_creator', asname=None),
        alias(name='triplex_reader_creator', asname=None)],
    level=0)
module_name---> data_reader
[1;33mfunc_name.name, and module name are[0m celeba_reader_creator data_reader
[1;33mfunc_name.name, and module name are[0m reader_creator data_reader
[1;33mfunc_name.name, and module name are[0m triplex_reader_creator data_reader
NameFrom--->: ImportFrom
[alias(name='check_attribute_conflict', asname=None),
    alias(name='check_gpu', asname=None),
    alias(name='save_batch_image', asname=None),
    alias(name='check_version', asname=None)]
ImportFrom(module='util.utility',
    names=[alias(name='check_attribute_conflict', asname=None),
        alias(name='check_gpu', asname=None),
        alias(name='save_batch_image', asname=None),
        alias(name='check_version', asname=None)],
    level=0)
module_name---> util.utility
[1;33mfunc_name.name, and module name are[0m check_attribute_conflict util.utility
[1;33mfunc_name.name, and module name are[0m check_gpu util.utility
[1;33mfunc_name.name, and module name are[0m save_batch_image util.utility
[1;33mfunc_name.name, and module name are[0m check_version util.utility
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
NameFrom--->: ImportFrom
[alias(name='CycleGAN_model', asname=None)]
ImportFrom(module='network.CycleGAN_network', names=[alias(name='CycleGAN_model', asname=None)], level=0)
module_name---> network.CycleGAN_network
[1;33mfunc_name.name, and module name are[0m CycleGAN_model network.CycleGAN_network
NameFrom--->: ImportFrom
[alias(name='Pix2pix_model', asname=None)]
ImportFrom(module='network.Pix2pix_network', names=[alias(name='Pix2pix_model', asname=None)], level=0)
module_name---> network.Pix2pix_network
[1;33mfunc_name.name, and module name are[0m Pix2pix_model network.Pix2pix_network
NameFrom--->: ImportFrom
[alias(name='StarGAN_model', asname=None)]
ImportFrom(module='network.StarGAN_network', names=[alias(name='StarGAN_model', asname=None)], level=0)
module_name---> network.StarGAN_network
[1;33mfunc_name.name, and module name are[0m StarGAN_model network.StarGAN_network
NameFrom--->: ImportFrom
[alias(name='STGAN_model', asname=None)]
ImportFrom(module='network.STGAN_network', names=[alias(name='STGAN_model', asname=None)], level=0)
module_name---> network.STGAN_network
[1;33mfunc_name.name, and module name are[0m STGAN_model network.STGAN_network
NameFrom--->: ImportFrom
[alias(name='AttGAN_model', asname=None)]
ImportFrom(module='network.AttGAN_network', names=[alias(name='AttGAN_model', asname=None)], level=0)
module_name---> network.AttGAN_network
[1;33mfunc_name.name, and module name are[0m AttGAN_model network.AttGAN_network
NameFrom--->: ImportFrom
[alias(name='CGAN_model', asname=None)]
ImportFrom(module='network.CGAN_network', names=[alias(name='CGAN_model', asname=None)], level=0)
module_name---> network.CGAN_network
[1;33mfunc_name.name, and module name are[0m CGAN_model network.CGAN_network
NameFrom--->: ImportFrom
[alias(name='DCGAN_model', asname=None)]
ImportFrom(module='network.DCGAN_network', names=[alias(name='DCGAN_model', asname=None)], level=0)
module_name---> network.DCGAN_network
[1;33mfunc_name.name, and module name are[0m DCGAN_model
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
ImportName--->: Import
[alias(name='ltr.models.siamese.target_estimator_net', asname='tgt_estimator')]
NameFrom--->: ImportFrom
[alias(name='SFC_AlexNet', asname=None)]
ImportFrom(module='ltr.models.backbone.sfc_alexnet', names=[alias(name='SFC_AlexNet', asname=None)], level=0)
module_name---> ltr.models.backbone.sfc_alexnet
[1;33mfunc_name.name, and module name are[0m SFC_AlexNet ltr.models.backbone.sfc_alexnet
key,value import_dict:  tgt_estimator ltr.models.siamese.target_estimator_net
key,value import_dict:  None paddle
key, v, from_dict:  SFC_AlexNet ltr.models.backbone.sfc_alexnet.SFC_AlexNet
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  dygraph paddle.fluid.dygraph
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/siamese/siam.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/atom/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/atom/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/admin/environment.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/admin/environment.py has been written sucess[0m
[1;32mNo module named 'extractor', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/features extractor.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/extractor.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.features.preprocessing
NameFrom--->: ImportFrom
module_name---> pytracking.libs
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='sample_patch', asname=None)]
ImportFrom(module='pytracking.features.preprocessing', names=[alias(name='sample_patch', asname=None)], level=0)
module_name---> pytracking.features.preprocessing
[1;33mfunc_name.name, and module name are[0m sample_patch pytracking.features.preprocessing
NameFrom--->: ImportFrom
[alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs', names=[alias(name='TensorList', asname=None)], level=0)
module_name---> pytracking.libs
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  sample_patch pytracking.features.preprocessing.sample_patch
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  TensorList pytracking.libs.TensorList
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/extractor.py has been written sucess[0m

[1;32mNo module named 'vgg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network vgg.py
[1;34mStart upgrading model PaddleCV/gan/network/vgg.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/vgg.py has been written sucess[0m

[1;32mNo module named 'Pix2pix', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer Pix2pix.py
[1;34mStart upgrading model PaddleCV/gan/trainer/Pix2pix.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.Pix2pix_network
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
[3;32mRestore API full name(Uniform->paddle.fluid.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/ctcn/ctcn_utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/features/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/__init__.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn utility.py
[1;34mStart upgrading model PaddleCV/rrpn/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> config
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='datetime', asname=None)]
NameFrom--->: ImportFrom
[alias(name='deque', asname=None)]
ImportFrom(module='collections', names=[alias(name='deque', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m deque collections
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
NameFrom--->: ImportFrom
[alias(name='deque', asname=None)]
ImportFrom(module='collections', names=[alias(name='deque', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m deque collections
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='config', names=[alias(name='*', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m * config
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None datetime
key, v, from_dict:  deque collections.deque
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  core paddle.fluid.core
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * config.*
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/network/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/__init__.py has been written sucess[0m
[1;32mNo module named 'CGAN_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network CGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/CGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='linear', asname=None),
    alias(name='conv2d', asname=None),
    alias(name='deconv2d', asname=None),
    alias(name='conv_cond_concat', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='linear', asname=None),
        alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='conv_cond_concat', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m linear base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m conv_cond_concat base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  conv_cond_concat base_network.conv_cond_concat
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  linear base_network.linear
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pointnet_lib', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None pointnet_lib
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/ext_op/tests/test_query_ball_op.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/calibration.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/calibration.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/utils/pts_utils/test.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/utils/pts_utils/test.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/kitti_common.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/tools/kitti_object_eval_python/kitti_common.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/actors/base_actor.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/actors/base_actor.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/stats.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/stats.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/tensorboard.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/tensorboard.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/__init__.py has been written sucess[0m
[1;32mNo module named 'resnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/backbone resnet.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/backbone/resnet.py[0m
NameFrom--->: ImportFrom
module_name---> ltr.admin.environment
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
NameFrom--->: ImportFrom
[alias(name='env_settings', asname=None)]
ImportFrom(module='ltr.admin.environment', names=[alias(name='env_settings', asname=None)], level=0)
module_name---> ltr.admin.environment
[1;33mfunc_name.name, and module name are[0m env_settings ltr.admin.environment
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  env_settings ltr.admin.environment.env_settings
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(nn.Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(nn.Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/backbone/resnet.py has been written sucess[0m

[1;32mNo module named 'DCGAN', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer DCGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/DCGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.DCGAN_network
NameFrom--->: ImportFrom
module_name---> util
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.case->paddle.fluid.layers.case)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.greater_than->paddle.fluid.layers.greater_than)[0m
[3;32mRestore API full name(fluid.layers.where->paddle.fluid.layers.where)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.smooth_l1->paddle.fluid.layers.smooth_l1)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_prod->paddle.fluid.layers.reduce_prod)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.multiclass_nms->paddle.nn.functional.multiclass_nms)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.less_than->paddle.less_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.case->paddle.nn.case)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
key, v, from_dict:  Got10k ltr.dataset.Got10k
[3;32mRestore API full name(dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/train_settings/siamfc/siamfc_alexnet_vid.py has been written sucess[0m

[1;32mNo module named 'checkpoint', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn checkpoint.py
[1;34mStart upgrading model PaddleCV/rrpn/checkpoint.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 4 [0m
insert paddle into 5
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='unicode_literals', asname=None)]
ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m unicode_literals __future__
ImportName--->: Import
[alias(name='errno', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  unicode_literals __future__.unicode_literals
[3;32mRestore API full name(fluid.io.load_program_state->paddle.fluid.io.load_program_state)[0m
[3;32mRestore API full name(fluid.io.load_program_state->paddle.fluid.io.load_program_state)[0m
[3;32mRestore API full name(fluid.io.set_program_state->paddle.fluid.io.set_program_state)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.io.set_program_state->paddle.fluid.io.set_program_state)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[1;33mUpgrade API (paddle.fluid.io.load_program_state->paddle.io.load_program_state)[0m
[1;33mUpgrade API (paddle.fluid.io.load_program_state->paddle.io.load_program_state)[0m
[1;33mUpgrade API (paddle.fluid.io.set_program_state->paddle.io.set_program_state)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.io.set_program_state->paddle.io.set_program_state)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/checkpoint.py has been written sucess[0m

[1;32mNo module named 'StarGAN', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer StarGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/StarGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.StarGAN_network
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='StarGAN_model', asname=None)]
ImportFrom(module='network.StarGAN_network', names=[alias(name='StarGAN_model', asname=None)], level=0)
module_name---> network.StarGAN_network
[1;33mfunc_name.name, and module name are[0m StarGAN_model network.StarGAN_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname='pkl')]
key,value import_dict:  pkl pickle
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  StarGAN_model network.StarGAN_network.StarGAN_model
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  utility util.utility
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/bbreg atom_iou_net.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/bbreg/atom_iou_net.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.dygraph.nn', asname='nn')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os.path', asname='osp')]
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  None sys
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  nn paddle.fluid.dygraph.nn
key,value import_dict:  osp os.path
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(nn.Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.prroi_pool->paddle.fluid.layers.prroi_pool)[0m
[3;32mRestore API full name(fluid.layers.prroi_pool->paddle.fluid.layers.prroi_pool)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.prroi_pool->paddle.fluid.layers.prroi_pool)[0m
[3;32mRestore API full name(fluid.layers.prroi_pool->paddle.fluid.layers.prroi_pool)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.prroi_pool->paddle.nn.functional.prroi_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.prroi_pool->paddle.nn.functional.prroi_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.prroi_pool->paddle.nn.functional.prroi_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.prroi_pool->paddle.nn.functional.prroi_pool)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/bbreg/atom_iou_net.py has been written sucess[0m

[1;32mNo module named 'c_gan', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/c_gan c_gan.py
[1;34mStart upgrading model PaddleCV/gan/c_gan/c_gan.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> network
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: 
ImportFrom(module='ltr.trainers', names=[alias(name='LTRTrainer', asname=None)], level=0)
module_name---> ltr.trainers
[1;33mfunc_name.name, and module name are[0m LTRTrainer ltr.trainers
key,value import_dict:  dltransforms ltr.data.transforms
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  dygraph paddle.fluid.dygraph
key,value import_dict:  actors ltr.actors
key, v, from_dict:  sampler ltr.data.sampler
key, v, from_dict:  atom_resnet50 ltr.models.bbreg.atom.atom_resnet50
key, v, from_dict:  ImagenetVID ltr.dataset.ImagenetVID
key, v, from_dict:  loader ltr.data.loader
key, v, from_dict:  processing ltr.data.processing
key, v, from_dict:  LTRTrainer ltr.trainers.LTRTrainer
key, v, from_dict:  Lasot ltr.dataset.Lasot
key, v, from_dict:  Got10k ltr.dataset.Got10k
key, v, from_dict:  MSCOCOSeq ltr.dataset.MSCOCOSeq
key, v, from_dict:  atom_resnet18 ltr.models.bbreg.atom.atom_resnet18
[3;32mRestore API full name(dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.PiecewiseDecay->paddle.fluid.dygraph.PiecewiseDecay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[1;33mUpgrade API (fluid.layers.square_error_cost->paddle.nn.functional.square_error_cost)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/train_settings/bbreg/atom_res50_vid_lasot_coco.py has been written sucess[0m

[1;32mNo module named 'optimization', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs optimization.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/optimization.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> pytracking.libs.tensorlist
NameFrom--->: ImportFrom
module_name---> pytracking.utils.plotting
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs.tensorlist', names=[alias(name='TensorList', asname=None)], level=0)
module_name---> pytracking.libs.tensorlist
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs.tensorlist
NameFrom--->: ImportFrom
[alias(name='plot_graph', asname=None)]
ImportFrom(module='pytracking.utils.plotting', names=[alias(name='plot_graph', asname=None)], level=0)
module_name---> pytracking.utils.plotting
[1;33mfunc_name.name, and module name are[0m plot_graph pytracking.utils.plotting
NameFrom--->: ImportFrom
[alias(name='n2p', asname=None),
    alias(name='clone', asname=None),
    alias(name='static_clone', asname=None),
    alias(name='create_var_list', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='n2p', asname=None),
        alias(name='clone', asname=None),
        alias(name='static_clone', asname=None),
        alias(name='create_var_list', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m clone pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m static_clone pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m create_var_list pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  clone pytracking.libs.paddle_utils.clone
key, v, from_dict:  plot_graph pytracking.utils.plotting.plot_graph
key, v, from_dict:  TensorList pytracking.libs.tensorlist.TensorList
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  static_clone pytracking.libs.paddle_utils.static_clone
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  create_var_list pytracking.libs.paddle_utils.create_var_list
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/models/pointnet2_seg.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/models/siamese/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/siamese/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/base/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/base/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/siamfc/eval_siamfc_vot.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/siamfc/eval_siamfc_vot.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/siamfc/eval_siamfc_otb.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/siamfc/eval_siamfc_otb.py has been written sucess[0m
[1;32mNo module named 'optim', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/tracker/atom optim.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/tracker/atom/optim.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> pytracking.libs
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='optimization', asname=None), alias(name='TensorList', asname=None), alias(name='operation', asname=None)]
ImportFrom(module='pytracking.libs',
    names=[alias(name='optimization', asname=None),
        alias(name='TensorList', asname=None),
        alias(name='operation', asname=None)],
    level=0)
module_name---> pytracking.libs
[1;33mfunc_name.name, and module name are[0m optimization pytracking.libs
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs
[1;33mfunc_name.name, and module name are[0m operation pytracking.libs
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None),
    alias(name='broadcast_op', asname=None),
    alias(name='n2p', asname=None),
    alias(name='static_identity', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='PTensor', asname=None),
        alias(name='broadcast_op', asname=None),
        alias(name='n2p', asname=None),
        alias(name='static_identity', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m broadcast_op pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m static_identity pytracking.libs.paddle_utils
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='create_var_list', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='create_var_list', asname=None)], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m create_var_list pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None math
key, v, from_dict:  operation pytracking.libs.operation
key, v, from_dict:  TensorList pytracking.libs.TensorList
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  create_var_list pytracking.libs.paddle_utils.create_var_list
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  broadcast_op pytracking.libs.paddle_utils.broadcast_op
key, v, from_dict:  optimization pytracking.libs.optimization
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  static_identity pytracking.libs.paddle_utils.static_identity
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/atom/optim.py has been written sucess[0m

[1;32mNo module named 'CycleGAN', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer CycleGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/CycleGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.CycleGAN_network
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='CycleGAN_model', asname=None)]
ImportFrom(module='network.CycleGAN_network', names=[alias(name='CycleGAN_model', asname=None)], level=0)
module_name---> network.CycleGAN_network
[1;33mfunc_name.name, and module name are[0m CycleGAN_model network.CycleGAN_network
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/stnet/stnet_res_model.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/complex.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/complex.py has been written sucess[0m
[1;32mNo module named 'tensorlist', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/pytracking/libs tensorlist.py
[1;34mStart upgrading model PaddleCV/tracking/pytracking/libs/tensorlist.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
module_name---> pytracking.libs.paddle_utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='clone', asname='clone_fn')]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='clone', asname='clone_fn')], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m clone pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
[alias(name='detach', asname='detach_fn')]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='detach', asname='detach_fn')], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m detach pytracking.libs.paddle_utils
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='PTensor', asname=None)], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  clone pytracking.libs.paddle_utils.clone
key, v, from_dict:  detach pytracking.libs.paddle_utils.detach
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(layers.abs->paddle.fluid.layers.abs)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/tensorlist.py has been written sucess[0m
 Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='cv2', asname='cv')]
NameFrom--->: ImportFrom
[alias(name='dygraph', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='dygraph', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m dygraph paddle.fluid
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='PTensor', asname=None),
    alias(name='n2p', asname=None),
    alias(name='_padding', asname=None),
    alias(name='squeeze', asname=None),
    alias(name='unsqueeze', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='PTensor', asname=None),
        alias(name='n2p', asname=None),
        alias(name='_padding', asname=None),
        alias(name='squeeze', asname=None),
        alias(name='unsqueeze', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m PTensor pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m _padding pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m squeeze pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m unsqueeze pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key,value import_dict:  cv cv2
key, v, from_dict:  unsqueeze pytracking.libs.paddle_utils.unsqueeze
key, v, from_dict:  dygraph paddle.fluid.dygraph
key, v, from_dict:  PTensor pytracking.libs.paddle_utils.PTensor
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  squeeze pytracking.libs.paddle_utils.squeeze
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  _padding pytracking.libs.paddle_utils._padding
[3;32mRestore API full name(dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(unsqueeze->pytracking.libs.paddle_utils.unsqueeze)[0m
[3;32mRestore API full name(squeeze->pytracking.libs.paddle_utils.squeeze)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(_padding->pytracking.libs.paddle_utils._padding)[0m
[3;32mRestore API full name(_padding->pytracking.libs.paddle_utils._padding)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/preprocessing.py has been written sucess[0m

[1;32mNo module named 'StarGAN_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network StarGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/StarGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None), alias(name='deconv2d', asname=None), alias(name='norm_layer', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/StarGAN_network.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/c_gan/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/c_gan/README.md has been written sucess[0m
[1;32mNo module named 'compute_fid', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/metric compute_fid.py
[1;34mStart upgrading model PaddleCV/gan/metric/compute_fid.py[0m
NameFrom--->: ImportFrom
module_name---> cv2
NameFrom--->: ImportFrom
module_name---> scipy
NameFrom--->: ImportFrom
module_name---> inception
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='fnmatch', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
NameFrom--->: ImportFrom
[alias(name='imread', asname=None)]
ImportFrom(module='cv2', names=[alias(name='imread', asname=None)], level=0)
module_name---> cv2
[1;33mfunc_name.name, and module name are[0m imread cv2
NameFrom--->: ImportFrom
[alias(name='linalg', asname=None)]
ImportFrom(module='scipy', names=[alias(name='linalg', asname=None)], level=0)
module_name---> scipy
[1;33mfunc_name.name, and module name are[0m linalg scipy
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='InceptionV3', asname=None)]
ImportFrom(module='inception', names=[alias(name='InceptionV3', asname=None)], level=0)
module_name---> inception
[1;33mfunc_name.name, and module name are[0m InceptionV3 inception
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None cv2
key, v, from_dict:  linalg scipy.linalg
key, v, from_dict:  imread cv2.imread train.py
[1;34mStart upgrading model PaddleCV/human_pose_estimation/train.py[0m
NameFrom--->: ImportFrom
module_name---> lib
NameFrom--->: ImportFrom
module_name---> utils.utility
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='pose_resnet', asname=None)]
ImportFrom(module='lib', names=[alias(name='pose_resnet', asname=None)], level=0)
module_name---> lib
[1;33mfunc_name.name, and module name are[0m pose_resnet lib
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m * utils.utility
ImportName--->: Import
[alias(name='lib.coco_reader', asname='reader')]
ImportName--->: Import
[alias(name='lib.mpii_reader', asname='reader')]
key,value import_dict:  reader lib.mpii_reader
key,value import_dict:  None functools
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  pose_resnet lib.pose_resnet
key, v, from_dict:  * utils.utility.*
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/train.py has been written sucess[0m

[1;32mNo module named 'AttGAN', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer AttGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/AttGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.AttGAN_network
NameFrom--->: ImportFrom
module_name---> util
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='AttGAN_model', asname=None)]
ImportFrom(module='network.AttGAN_network', names=[alias(name='AttGAN_model', asname=None)], level=0)
module_name---> network.AttGAN_network
[1;33mfunc_name.name, and module name are[0m AttGAN_model network.AttGAN_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  AttGAN_model network.AttGAN_network.AttGAN_model
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  utility util.utility
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m cfg utils.config.cfg
key, v, from_dict:  load_config utils.config.load_config
key, v, from_dict:  rpn_metric utils.metric_utils.rpn_metric
key, v, from_dict:  rcnn_metric utils.metric_utils.rcnn_metric
key, v, from_dict:  KittiRCNNReader data.kitti_rcnn_reader.KittiRCNNReader
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/eval.py has been written sucess[0m

[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn/models/ext_op/src README.md
[1;34mStart upgrading model PaddleCV/human_pose_estimation/README_cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/README_cn.md has been written sucess[0m
[1;32mNo module named 'val', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/human_pose_estimation val.py
[1;34mStart upgrading model PaddleCV/human_pose_estimation/val.py[0m
NameFrom--->: ImportFrom
module_name---> lib
NameFrom--->: ImportFrom
module_name---> utils.transforms
NameFrom--->: ImportFrom
module_name---> utils.utility
NameFrom--->: ImportFrom
module_name---> utils.evaluator_builder
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
NameFrom--->: ImportFrom
[alias(name='pose_resnet', asname=None)]
ImportFrom(module='lib', names=[alias(name='pose_resnet', asname=None)], level=0)
module_name---> lib
[1;33mfunc_name.name, and module name are[0m pose_resnet lib
NameFrom--->: ImportFrom
[alias(name='flip_back', asname=None)]
ImportFrom(module='utils.transforms', names=[alias(name='flip_back', asname=None)], level=0)
module_name---> utils.transforms
[1;33mfunc_name.name, and module name are[0m flip_back utils.transforms
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils.utility', names=[alias(name='*', asname=None)], level=0)
module_name---> utils.utility
[1;33mfunc_name.name, and module name are[0m * utils.utility
NameFrom--->: ImportFrom
[alias(name='create_evaluator', asname=None)]
ImportFrom(module='utils.evaluator_builder', names=[alias(name='create_evaluator', asname=None)], level=0)
module_name---> utils.evaluator_builder
[1;33mfunc_name.name, and module name are[0m create_evaluator utils.evaluator_builder
ImportName--->: Import
[alias(name='lib.coco_reader', asname='reader')]
ImportName--->: Import
[alias(name='lib.mpii_reader', asname='reader')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  reader lib.mpii_reader
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  create_evaluator utils.evaluator_builder.create_evaluator
key, v, from_dict:  pose_resnet lib.pose_resnet
key, v, from_dict:  * utils.utility.*
key, v, from_dict:  flip_back utils.transforms.flip_back
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(layers.data->paddle.fluid.layers.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/val.py has been written sucess[0m

[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/c_gan network.py
[1;34mStart upgrading model PaddleCV/gan/c_gan/network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='get_parent_function_name', asname=None)]
ImportFrom(module='utility', names=[alias(name='get_parent_function_name', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_parent_function_name utility
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  get_parent_function_name utility.get_parent_function_name
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.nets.simple_img_conv_pool->paddle.fluid.nets.simple_img_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
key,value import_dict:  cv cv2
key,value import_dict:  None paddle
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/run_training.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/tracking/ltr/dataset/base_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/dataset/base_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/environment.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/environment.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/tracking/ltr/admin/local.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/admin/local.py has been written sucess[0m
[1;32mNo module named 'sfc_alexnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/tracking/ltr/models/backbone sfc_alexnet.py
[1;34mStart upgrading model PaddleCV/tracking/ltr/models/backbone/sfc_alexnet.py[0m
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='nn', asname=None)]
ImportFrom(module='paddle.fluid.dygraph', names=[alias(name='nn', asname=None)], level=0)
module_name---> paddle.fluid.dygraph
[1;33mfunc_name.name, and module name are[0m nn paddle.fluid.dygraph
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  nn paddle.fluid.dygraph.nn
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(nn.Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(nn.Pool2D->paddle.fluid.dygraph.nn.Pool2D)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(nn.BatchNorm->paddle.fluid.dygraph.nn.BatchNorm)[0m
[3;32mRestore API full name(nn.Conv2D->paddle.fluid.dygraph.nn.Conv2D)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/ltr/models/backbone/sfc_alexnet.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/human_pose_estimation/test.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  None paddle
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/test.py has been written sucess[0m

[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/human_pose_estimation/utils utility.py
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> pathlib
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Path', asname=None)]
ImportFrom(module='pathlib', names=[alias(name='Path', asname=None)], level=0)
module_name---> pathlib
[1;33mfunc_name.name, and module name are[0m Path pathlib
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  Path pathlib.Path
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/utility.py has been written sucess[0m

[1;32mNo module named 'resnet_embedding', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/models resnet_embedding.py
[1;34mStart upgrading model PaddleCV/metric_learning/models/resnet_embedding.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')] /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer STGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/STGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.STGAN_network
NameFrom--->: ImportFrom
module_name---> util
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='STGAN_model', asname=None)]
ImportFrom(module='network.STGAN_network', names=[alias(name='STGAN_model', asname=None)], level=0)
module_name---> network.STGAN_network
[1;33mfunc_name.name, and module name are[0m STGAN_model network.STGAN_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='ast', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None ast
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  utility util.utility
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  STGAN_model network.STGAN_network.STGAN_model
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='layers', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
NameFrom--->: ImportFrom
[alias(name='TensorList', asname=None)]
ImportFrom(module='pytracking.libs', names=[alias(name='TensorList', asname=None)], level=0)
module_name---> pytracking.libs
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs
NameFrom--->: ImportFrom
[alias(name='floordiv', asname=None), alias(name='n2p', asname=None), alias(name='broadcast_op', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils',
    names=[alias(name='floordiv', asname=None),
        alias(name='n2p', asname=None),
        alias(name='broadcast_op', asname=None)],
    level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m floordiv pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m broadcast_op pytracking.libs.paddle_utils
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  TensorList pytracking.libs.TensorList
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  broadcast_op pytracking.libs.paddle_utils.broadcast_op
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  floordiv pytracking.libs.paddle_utils.floordiv
[3;32mRestore API full name(floordiv->pytracking.libs.paddle_utils.floordiv)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.adaptive_pool2d->paddle.fluid.layers.adaptive_pool2d)[0m
[3;32mRestore API full name(layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(floordiv->pytracking.libs.paddle_utils.floordiv)[0m
[3;32mRestore API full name(floordiv->pytracking.libs.paddle_utils.floordiv)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.adaptive_pool2d->paddle.fluid.layers.adaptive_pool2d)[0m
[3;32mRestore API full name(layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(broadcast_op->pytracking.libs.paddle_utils.broadcast_op)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.adaptive_pool2d->paddle.nn.functional.adaptive_pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.adaptive_pool2d->paddle.nn.functional.adaptive_pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/featurebase.py has been written sucess[0m

[1;32mNo module named 'base_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network base_network.py
[1;34mStart upgrading model PaddleCV/gan/network/base_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None warnings
key, v, from_dict:  division __future__.division
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.instance_norm->paddle.fluid.layers.instance_norm)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.crop->paddle.fluid.layers.crop)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0mconv_and_pool base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  linear base_network.linear
key, v, from_dict:  conv_and_pool base_network.conv_and_pool
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/DCGAN_network.py has been written sucess[0m

[1;32mNo module named 'Pix2pix_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network Pix2pix_network.py
[1;34mStart upgrading model PaddleCV/gan/network/Pix2pix_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None), alias(name='deconv2d', asname=None), alias(name='norm_layer', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/Pix2pix_network.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/metric_learning/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/models/__init__.py has been written sucess[0m
[1;32mNo module named 'tripletloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses tripletloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/tripletloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
key,value import_dict:  None paddle
key, v, from_dict:  Fconv2d pytracking.libs.Fconv2d.Fconv2d
key, v, from_dict:  tensor_operation pytracking.libs.tensorlist.tensor_operation
key, v, from_dict:  TensorList pytracking.libs.tensorlist.TensorList
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  Variable paddle.fluid.framework.Variable
key, v, from_dict:  fluid paddle.fluid
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/operation.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/evaluator_builder.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/evaluator_builder.py has been written sucess[0m
[1;32mNo module named 'pose_resnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/human_pose_estimation/lib pose_resnet.py
[1;34mStart upgrading model PaddleCV/human_pose_estimation/lib/pose_resnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/lib/pose_resnet.py has been written sucess[0m

[1;32mNo module named 'emlloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses emlloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/emlloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> commonfunc
[1;34mfuture count is 3 [0m
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None)]
ImportFrom(module='paddle.fluid.framework', names=[alias(name='Variable', asname=None)], level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='L2Decay', asname=None)]
ImportFrom(module='paddle.fluid.regularizer', names=[alias(name='L2Decay', asname=None)], level=0)
module_name---> paddle.fluid.regularizer
[1;33mfunc_name.name, and module name are[0m L2Decay paddle.fluid.regularizer
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Integral', asname=None)]
ImportFrom(module='numbers', names=[alias(name='Integral', asname=None)], level=0)
module_name---> numbers
[1;33mfunc_name.name, and module name are[0m Integral numbers
NameFrom--->: ImportFrom
[alias(name='NameAdapter', asname=None)]
ImportFrom(module='name_adapter', names=[alias(name='NameAdapter', asname=None)], level=1)
module_name---> name_adapter
[1;33mfunc_name.name, and module name are[0m NameAdapter name_adapter
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  Variable paddle.fluid.framework.Variable
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  L2Decay paddle.fluid.regularizer.L2Decay
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  Integral numbers.Integral
key, v, from_dict:  NameAdapter name_adapter.NameAdapter
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.framework._get_var->paddle.fluid.framework._get_var)[0m
[3;32mRestore API full name(fluid.framework._get_var->paddle.fluid.framework._get_var)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.affine_channel->paddle.fluid.layers.affine_channel)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.affine_channel->paddle.nn.functional.affine_channel)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/resnet.py has been written sucess[0m

[1;32mNo module named 'commonfunc', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses commonfunc.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/commonfunc.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  linear base_network.linear
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/AttGAN_network.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/scripts/make_pair_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/make_pair_data.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_cgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_cgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_dcgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_dcgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_pix2pix.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_pix2pix.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_dcgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_dcgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_SPADE.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_SPADE.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_cyclegan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_cyclegan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_pix2pix.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_pix2pix.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/run_stgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_stgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/metric_learning/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/README.md has been written sucess[0m
[1;32mNo module named 'train_pair', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning train_pair.py
[1;34mStart upgrading model PaddleCV/metric_learning/train_pair.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='threading', asname=None)]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='TripletLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='TripletLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m TripletLoss losses
NameFrom--->: ImportFrom
[alias(name='QuadrupletLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='QuadrupletLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m QuadrupletLoss losses
NameFrom--->: ImportFrom
[alias(name='EmlLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='EmlLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m EmlLoss losses
NameFrom--->: ImportFrom
[alias(name='NpairsLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='NpairsLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m NpairsLoss losses
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='fmt_time', asname=None),
    alias(name='recall_topk', asname=None),
    alias(name='get_gpu_num', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='fmt_time', asname=None),
        alias(name='recall_topk', asname=None),
        alias(name='get_gpu_num', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name--->
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.greater_than->paddle.greater_than)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.smooth_l1->paddle.nn.functional.smooth_l1)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_prod->paddle.reduce_prod)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/model_builder.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/metric_learning/imgtool.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/imgtool.py has been written sucess[0m
[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning eval.py
[1;34mStart upgrading model PaddleCV/metric_learning/eval.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m check_cuda utility
NameFrom--->: ImportFrom
[alias(name='fmt_time', asname=None), alias(name='recall_topk', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='fmt_time', asname=None), alias(name='recall_topk', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m fmt_time utility
[1;33mfunc_name.name, and module name are[0m recall_topk utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  recall_topk utility.recall_topk
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  check_cuda utility.check_cuda
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  fmt_time utility.fmt_time
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/eval.py has been written sucess[0m
[3;32mRestore API full name(layers.floor->paddle.fluid.layers.floor)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.stack->paddle.tensor.stack)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.floor->paddle.floor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/paddle_utils.py has been written sucess[0m

[1;32mNo module named 'SPADE', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer SPADE.py
[1;34mStart upgrading model PaddleCV/gan/trainer/SPADE.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.SPADE_network
NameFrom--->: ImportFrom
module_name---> util
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='SPADE_model', asname=None)]
ImportFrom(module='network.SPADE_network', names=[alias(name='SPADE_model', asname=None)], level=0)
module_name---> network.SPADE_network
[1;33mfunc_name.name, and module name are[0m SPADE_model network.SPADE_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='network.vgg', asname='vgg')]
ImportName--->: Import
[alias(name='pickle', asname='pkl')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  pkl pickle
key,value import_dict:  vgg network.vgg
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  np numpy
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  SPADE_model network.SPADE_network.SPADE_model
key, v, from_dict:  utility util.utility
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_min->paddle.fluid.layers.elementwise_min)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_min->paddle.fluid.layers.elementwise_min)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='Polygon', asname='plg')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
NameFrom--->: ImportFrom
[alias(name='ImageDraw', asname=None)]
ImportFrom(module='PIL', names=[alias(name='ImageDraw', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m ImageDraw PIL
NameFrom--->: ImportFrom
[alias(name='ImageFont', asname=None)]
ImportFrom(module='PIL', names=[alias(name='ImageFont', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m ImageFont PIL
NameFrom--->: ImportFrom
[alias(name='cfg', asname=None)]
ImportFrom(module='config', names=[alias(name='cfg', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m cfg config
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key,value import_dict:  plg Polygon
key, v, from_dict:  cfg config.cfg
key, v, from_dict:  ImageFont PIL.ImageFont
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  ImageDraw PIL.ImageDraw
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/eval_helper.py has been written sucess[0m

[1;32mNo module named 'arcmarginloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses arcmarginloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/arcmarginloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.elementwise_div->paddle.fluid.layers.elementwise_div)[0m
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.elementwise_div->paddle.fluid.layers.elementwise_div)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.mul->paddle.fluid.layers.mul)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.one_hot->paddle.fluid.one_hot)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_div)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_div)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.mul)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_div->paddle.tensor.div)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_div->paddle.tensor.div)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.mul->paddle.tensor.mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.one_hot->paddle.nn.functional.one_hot)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/arcmarginloss.py has been written sucess[0m

[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name:
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/network STGAN_network.py
[1;34mStart upgrading model PaddleCV/gan/network/STGAN_network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> base_network
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None),
    alias(name='deconv2d', asname=None),
    alias(name='norm_layer', asname=None),
    alias(name='linear', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None),
        alias(name='linear', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
[1;33mfunc_name.name, and module name are[0m linear base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  linear base_network.linear
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/STGAN_network.py has been written sucess[0m

[1;32mNo module named 'npairsloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses npairsloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/npairsloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_gpu_num', asname=None)]
ImportFrom(module='utility', names=[alias(name='get_gpu_num', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_gpu_num utility
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_gpu_num utility.get_gpu_num
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.mul->paddle.fluid.layers.mul)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.equal->paddle.fluid.layers.equal)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='Pix2pix_model', asname=None)]
ImportFrom(module='network.Pix2pix_network', names=[alias(name='Pix2pix_model', asname=None)], level=0)
module_name---> network.Pix2pix_network
[1;33mfunc_name.name, and module name are[0m Pix2pix_model network.Pix2pix_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  Pix2pix_model network.Pix2pix_network.Pix2pix_model
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  utility util.utility
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m __future__
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None),
    alias(name='deconv2d', asname=None),
    alias(name='norm_layer', asname=None),
    alias(name='conv2d_spectral_norm', asname=None)]
ImportFrom(module='base_network',
    names=[alias(name='conv2d', asname=None),
        alias(name='deconv2d', asname=None),
        alias(name='norm_layer', asname=None),
        alias(name='conv2d_spectral_norm', asname=None)],
    level=1)
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
[1;33mfunc_name.name, and module name are[0m conv2d_spectral_norm base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  conv2d_spectral_norm base_network.conv2d_spectral_norm
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/SPADE_network.py has been written sucess[0m

[1;32mNo module named 'softmaxloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses softmaxloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/softmaxloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/softmaxloss.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification train.py
[1;34mStart upgrading model PaddleCV/image_classification/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> build_model
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m TensorList pytracking.libs
NameFrom--->: ImportFrom
[alias(name='n2p', asname=None)]
ImportFrom(module='pytracking.libs.paddle_utils', names=[alias(name='n2p', asname=None)], level=0)
module_name---> pytracking.libs.paddle_utils
[1;33mfunc_name.name, and module name are[0m n2p pytracking.libs.paddle_utils
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  TensorList pytracking.libs.TensorList
key, v, from_dict:  atom_resnet50 ltr.models.bbreg.atom.atom_resnet50
key, v, from_dict:  env_settings pytracking.admin.environment.env_settings
key, v, from_dict:  siamfc_alexnet ltr.models.siamese.siam.siamfc_alexnet
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  MultiFeatureBase pytracking.features.featurebase.MultiFeatureBase
key, v, from_dict:  atom_resnet18 ltr.models.bbreg.atom.atom_resnet18
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/features/deep.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/scripts/infer_SPADE.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_SPADE.sh has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning infer.py
[1;34mStart upgrading model PaddleCV/metric_learning/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None),
    alias(name='check_cuda', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
[1;33mfunc_name.name, and module name are[0m check_cuda utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  check_cuda utility.check_cuda
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/fast_imagenet train.py
[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/train.py[0m
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> models.fast_imagenet
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='cProfile', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='traceback', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
ImportName--->: Import
[alias(name='paddle.fluid.transpiler.distribute_transpiler', asname='distribute_transpiler')]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
ImportName--->:Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='get_parent_function_name', asname=None),
    alias(name='plot', asname=None),
    alias(name='check', asname=None),
    alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='get_parent_function_name', asname=None),
        alias(name='plot', asname=None),
        alias(name='check', asname=None),
        alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_parent_function_name utility
[1;33mfunc_name.name, and module name are[0m plot utility
[1;33mfunc_name.name, and module name are[0m check utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='G_cond', asname=None), alias(name='D_cond', asname=None)]
ImportFrom(module='network', names=[alias(name='G_cond', asname=None), alias(name='D_cond', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m G_cond network
[1;33mfunc_name.name, and module name are[0m D_cond network
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='matplotlib.gridspec', asname='gridspec')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  gridspec matplotlib.gridspec
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  plot utility.plot
key, v, from_dict:  G_cond network.G_cond
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_parent_function_name utility.get_parent_function_name
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  D_cond network.D_cond
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  check utility.check
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/c_gan/c_gan.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/transforms.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/transforms.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/datasets.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/datasets.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/tools/valprep.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/tools/valprep.sh has been written sucess[0m
[1;32mNo module named 'mobilenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models mobilenet.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/mobilenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict: 
[3;32mRestore API full name(utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(in_dygraph_mode->paddle.fluid.framework.in_dygraph_mode)[0m
[3;32mRestore API full name(core.ops.conv2d->paddle.fluid.core.ops.conv2d)[0m
[3;32mRestore API full name(dygraph_utils._append_bias_in_dygraph->paddle.fluid.dygraph.dygraph_utils._append_bias_in_dygraph)[0m
[3;32mRestore API full name(dygraph_utils._append_activation_in_dygraph->paddle.fluid.dygraph.dygraph_utils._append_activation_in_dygraph)[0m
[1;33mUpgrade API (fluid.dygraph.layers.Layer->paddle.nn.Layer)[0m
[1;33mUpgrade API (paddle.fluid.framework.in_dygraph_mode->paddle.in_imperative_mode)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/Fconv2d.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/models/name_adapter.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/name_adapter.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/rrpn/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/__init__.py has been written sucess[0m
[1;32mNo module named 'rrpn_lib', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/rrpn/models/ext_op rrpn_lib.py
[1;34mStart upgrading model PaddleCV/rrpn/models/ext_op/rrpn_lib.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layer_helper
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='LayerHelper', asname=None)]
ImportFrom(module='paddle.fluid.layer_helper', names=[alias(name='LayerHelper', asname=None)], level=0)
module_name---> paddle.fluid.layer_helper
[1;33mfunc_name.name, and module name are[0m LayerHelper paddle.fluid.layer_helper
NameFrom--->: ImportFrom
[alias(name='Variable', asname=None)]
ImportFrom(module='paddle.fluid.framework', names=[alias(name='Variable', asname=None)], level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Variable paddle.fluid.framework
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  LayerHelper paddle.fluid.layer_helper.LayerHelper
key, v, from_dict:  Variable paddle.fluid.framework.Variable
[3;32mRestore API full name(fluid.load_op_library->paddle.fluid.load_op_library)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/models/ext_op/rrpn_lib.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/scripts/run_attgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_attgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_cgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_cgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/prepare_cityscapes_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/prepare_cityscapes_dataset.py has been written sucess[0m
[1;32mNo module named 'train_elem', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning train_elem.py
[1;34mStart upgrading model PaddleCV/metric_learning/train_elem.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> losses
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> utility
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='threading', asname=None)]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='SoftmaxLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='SoftmaxLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m SoftmaxLoss losses
NameFrom--->: ImportFrom
[alias(name='ArcMarginLoss', asname=None)]
ImportFrom(module='losses', names=[alias(name='ArcMarginLoss', asname=None)], level=0)
module_name---> losses
[1;33mfunc_name.name, and module name are[0m ArcMarginLoss losses
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='fmt_time', asname=None),
    alias(name='recall_topk', asname=None),
    alias(name='get_gpu_num', asname=None),
    alias(name='check_cuda', asname=None)]

[1;34mStart upgrading model PaddleCV/metric_learning/losses/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/README_ngraph.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/README_ngraph.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/README.md has been written sucess[0m
[1;32mNo module named 'build_model', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification build_model.py
[1;34mStart upgrading model PaddleCV/image_classification/build_model.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='utils.utility', asname='utility')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  utility utils.utility
[3;32mRestore API full name(fluid.layers.one_hot->paddle.fluid.layers.one_hot)[0m
[3;32mRestore API full name(fluid.layers.label_smooth->paddle.fluid.layers.label_smooth)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.label_smooth->paddle.nn.functional.label_smooth)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/build_model.py has been written sucess[0m

[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/dist_train dist_utils.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/dist_utils.py has been written sucess[0m

[1;32mNo module named 'resnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models resnet.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/resnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->:
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.elementwise_div->paddle.fluid.layers.elementwise_div)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_div->paddle.tensor.div)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/tripletloss.py has been written sucess[0m

[1;32mNo module named 'cache_eval', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification eval.py
[1;34mStart upgrading model PaddleCV/image_classification/eval.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * utils.*
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Uniform', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Uniform', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Uniform paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='interp1d', asname=None)]
ImportFrom(module='scipy.interpolate', names=[alias(name='interp1d', asname=None)], level=0)
module_name---> scipy.interpolate
[1;33mfunc_name.name, and module name are[0m interp1d scipy.interpolate
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='multiprocessing', asname='mp')]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='pandas', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  mp multiprocessing
key,value import_dict:  np numpy
key,value import_dict:  None os
key,value import_dict:  pd pandas
key, v, from_dict:  Uniform paddle.fluid.initializer.Uniform
key, v, from_dict:  interp1d scipy.interpolate.interp1d
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/video/models/bsn/bsn_utils.py has been written sucess[0m

[1;32mNo module named 'CGAN', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/trainer CGAN.py
[1;34mStart upgrading model PaddleCV/gan/trainer/CGAN.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network.CGAN_network
NameFrom--->: ImportFrom
module_name---> util
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='CGAN_model', asname=None)]
ImportFrom(module='network.CGAN_network', names=[alias(name='CGAN_model', asname=None)], level=0)
module_name---> network.CGAN_network
[1;33mfunc_name.name, and module name are[0m CGAN_model network.CGAN_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None matplotlib
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  CGAN_model network.CGAN_network.CGAN_model
key, v, from_dict:  utility util.utility
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/CGAN.py has been written sucess[0m

[1;32mNo module named 'mobilenet_v2', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models mobilenet_v2.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/mobilenet_v2.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[3;32mRestore API full name(fluid.dygraph.to_variable->paddle.fluid.dygraph.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/siamfc/siamfc.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/trainer/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/__init__.py has been written sucess[0m
[1;32mNo module named 'dc_gan', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/c_gan dc_gan.py
[1;34mStart upgrading model PaddleCV/gan/c_gan/dc_gan.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> network
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='get_parent_function_name', asname=None),
    alias(name='plot', asname=None),
    alias(name='check', asname=None),
    alias(name='add_arguments', asname=None),
    alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='get_parent_function_name', asname=None),
        alias(name='plot', asname=None),
        alias(name='check', asname=None),
        alias(name='add_arguments', asname=None),
        alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_parent_function_name utility
[1;33mfunc_name.name, and module name are[0m plot utility
[1;33mfunc_name.name, and module name are[0m check utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='G', asname=None), alias(name='D', asname=None)]
ImportFrom(module='network', names=[alias(name='G', asname=None), alias(name='D', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m G network
[1;33mfunc_name.name, and module name are[0m D network
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='matplotlib.gridspec', asname='gridspec')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  gridspec matplotlib.gridspec
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  plot utility.plot
key, v, from_dict:  G network.G
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_parent_function_name utility.get_parent_function_name
key, v, from_dict:  D network.D
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  check utility.check
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/c_gan/dc_gan.py has been written sucess[0m

[1;32mNo module named 'shufflenet_v2', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models shufflenet_v2.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/shufflenet_v2.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name--->
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/Pix2pix.py has been written sucess[0m

[1;32mNo module named 'alexnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models alexnet.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/alexnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/STGAN.py has been written sucess[0m

[1;32mNo module named 'resnet_dist', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models resnet_dist.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/resnet_dist.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/models/resnet_embedding.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/run.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/run.sh has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification infer.py
[1;34mStart upgrading model PaddleCV/image_classification/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None json
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  * utils.*
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.framework.cpu_places->paddle.fluid.framework.cpu_places)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/infer.py has been written sucess[0m

[1;32mNo module named 'se_resnext', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models se_resnext.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/se_resnext.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key, v, from_dict:  InceptionV3 inception.InceptionV3
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/metric/compute_fid.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/run_ps_mode.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/run_ps_mode.sh has been written sucess[0m
[1;32mNo module named 'dist_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/dist_train dist_train.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/dist_train.py[0m
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> batch_merge
NameFrom--->: ImportFrom
module_name---> dist_utils
NameFrom--->: ImportFrom
module_name---> env
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='traceback', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='models', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='train', asname=None), alias(name='val', asname=None)]
ImportFrom(module='reader', names=[alias(name='train', asname=None), alias(name='val', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m train reader
[1;33mfunc_name.name, and module name are[0m val reader
NameFrom--->: ImportFrom
[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)]
ImportFrom(module='utility',
    names=[alias(name='add_arguments', asname=None), alias(name='print_arguments', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m add_arguments utility
[1;33mfunc_name.name, and module name are[0m print_arguments utility
NameFrom--->: ImportFrom
[alias(name='copyback_repeat_bn_params', asname=None), alias(name='append_bn_repeat_init_op', asname=None)]
ImportFrom(module='batch_merge',
    names=[alias(name='copyback_repeat_bn_params', asname=None), alias(name='append_bn_repeat_init_op', asname=None)],
    level=0)
module_name---> batch_merge
[1;33mfunc_name.name, and module name are[0m copyback_repeat_bn_params batch_merge
[1;33mfunc_name.name, and module name are[0m append_bn_repeat_init_op batch_merge
NameFrom--->: ImportFrom
[alias(name='pserver_prepare', asname=None), alias(name='nccl2_prepare', asname=None)]
ImportFrom(module='dist_utils',
    names=[alias(name='pserver_prepare', asname=None), alias(name='nccl2_prepare', asname=None)],
    level=0)
module_name---> dist_utils
[1;33mfunc_name.name, and module name are[0m pserver_prepare dist_utils
[1;33mfunc_name.name, and module name are[0m nccl2_prepare dist_utils
NameFrom--->: ImportFrom
[alias(name='dist_env', asname=None)]
ImportFrom(module='env', names=[alias(name='dist_env', asname=None)], level=0)
module_name---> env
[1;33mfunc_name.name, and module name are[0m dist_env env
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  pserver_prepare dist_utils.pserver_prepare
key, v, from_dict:  dist_env env.dist_env
key, v, from_dict:  nccl2_prepare dist_utils.nccl2_prepare
key, v, from_dict:  train reader.train
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  val reader.val
key, v, from_dict:  append_bn_repeat_init_op batch_merge.append_bn_repeat_init_op
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  copyback_repeat_bn_params batch_merge.copyback_repeat_bn_params
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.py_reader->paddle.fluid.layers.py_reader)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.read_file->paddle.fluid.layers.read_file)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.DGCMomentumOptimizer->paddle.fluid.optimizer.DGCMomentumOptimizer)[0m
[3;32mRestore API full name(fluid.metrics.Accuracy->paddle.fluid.metrics.Accuracy)[0m
[3;32mRestore API full name(fluid.metrics.Accuracy->paddle.fluid.metrics.Accuracy)[0m
[3;32mRestore API full name(fluid.metrics.Accuracy->paddle.fluid.metrics.Accuracy)[0m
[3;32mRestore API full name(fluid.metrics.Accuracy->paddle.fluid.metrics.Accuracy)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointNet++/models/pointnet2_modules.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/c_gan/utility.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/c_gan/utility.py has been written sucess[0m
[1;32mNo module named 'inception', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/metric inception.py
[1;34mStart upgrading model PaddleCV/gan/metric/inception.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.resize_bilinear->paddle.fluid.layers.resize_bilinear)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_bilinear->paddle.nn.functional.resize_bilinear)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/metric/inception.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/utils/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/__init__.py has been written sucess[0m
[1;32mNo module named 'weights_aggregator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/utils/acnet weights_aggregator.py
[1;34mStart upgrading model PaddleCV/image_classification/utils/acnet/weights_aggregator.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='shutil', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)] utility
[1;33mfunc_name.name, and module name are[0m fmt_time utility
[1;33mfunc_name.name, and module name are[0m recall_topk utility
[1;33mfunc_name.name, and module name are[0m get_gpu_num utility
[1;33mfunc_name.name, and module name are[0m check_cuda utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  recall_topk utility.recall_topk
key, v, from_dict:  division __future__.division
key, v, from_dict:  QuadrupletLoss losses.QuadrupletLoss
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  check_cuda utility.check_cuda
key, v, from_dict:  NpairsLoss losses.NpairsLoss
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  get_gpu_num utility.get_gpu_num
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  EmlLoss losses.EmlLoss
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  TripletLoss losses.TripletLoss
key, v, from_dict:  fmt_time utility.fmt_time
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/train_pair.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/__init__.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/utils utility.py
[1;34mStart upgrading model PaddleCV/image_classification/utils/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.wrapped_decorator
NameFrom--->: ImportFrom
module_name---> paddle.fluid.framework
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> utils.optimizer
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
ImportName--->: Import
[alias(name='signal', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='signature_safe_contextmanager', asname=None)]
ImportFrom(module='paddle.fluid.wrapped_decorator',
    names=[alias(name='signature_safe_contextmanager', asname=None)],
    level=0)
module_name---> paddle.fluid.wrapped_decorator
[1;33mfunc_name.name, and module name are[0m signature_safe_contextmanager paddle.fluid.wrapped_decorator
NameFrom--->: ImportFrom
[alias(name='Program', asname=None),
    alias(name='program_guard', asname=None),
    alias(name='name_scope', asname=None),
    alias(name='default_main_program', asname=None)]
ImportFrom(module='paddle.fluid.framework',
    names=[alias(name='Program', asname=None),
        alias(name='program_guard', asname=None),
        alias(name='name_scope', asname=None),
        alias(name='default_main_program', asname=None)],
    level=0)
module_name---> paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m Program paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m program_guard paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m name_scope paddle.fluid.framework
[1;33mfunc_name.name, and module name are[0m default_main_program paddle.fluid.framework
NameFrom--->: ImportFrom
[alias(name='unique_name', asname=None), alias(name='layers', asname=None)]
ImportFrom(module='paddle.fluid',
    names=[alias(name='unique_name', asname=None), alias(name='layers', asname=None)],
    level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m unique_name paddle.fluid
[1;33mfunc_name.name, and module name are[0m layers paddle.fluid
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
NameFrom--->: ImportFrom
[alias(name='dist_utils', asname=None)]
ImportFrom(module='utils', names=[alias(name='dist_utils', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m dist_utils utils
NameFrom--->: ImportFrom
[alias(name='Optimizer', asname=None)]
ImportFrom(module='utils.optimizer', names=[alias(name='Optimizer', asname=None)], level=0)
module_name---> utils.optimizer
[1;33mfunc_name.name, and module name are[0m Optimizer utils.optimizer
ImportName--->: Import
[alias(name='models', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict: 
module_name---> base_network
[1;33mfunc_name.name, and module name are[0m conv2d base_network
[1;33mfunc_name.name, and module name are[0m deconv2d base_network
[1;33mfunc_name.name, and module name are[0m norm_layer base_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  norm_layer base_network.norm_layer
key, v, from_dict:  deconv2d base_network.deconv2d
key, v, from_dict:  conv2d base_network.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/CycleGAN_network.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/metric_learning/README_cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/README_cn.md has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning reader.py
[1;34mStart upgrading model PaddleCV/metric_learning/reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> imgtool
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='process_image', asname=None)]
ImportFrom(module='imgtool', names=[alias(name='process_image', asname=None)], level=0)
module_name---> imgtool
[1;33mfunc_name.name, and module name are[0m process_image imgtool
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  process_image imgtool.process_image
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/utils/acnet/convert_model.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/acnet/convert_model.sh has been written sucess[0m
[1;32mNo module named 'resnet_acnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnet_acnet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnet_acnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/mobilenet.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/data/ILSVRC2012/download_imagenet2012.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/data/ILSVRC2012/download_imagenet2012.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/utils/autoaugment.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/autoaugment.py has been written sucess[0m
[1;32mNo module named 'optimizer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/utils optimizer.py
[1;34mStart upgrading model PaddleCV/image_classification/utils/optimizer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.ops', asname='ops')]
NameFrom--->: ImportFrom
[alias(name='_decay_step_counter', asname=None)]
ImportFrom(module='paddle.fluid.layers.learning_rate_scheduler',
    names=[alias(name='_decay_step_counter', asname=None)],
    level=0)
module_name---> paddle.fluid.layers.learning_rate_scheduler
[1;33mfunc_name.name, and module name are[0m _decay_step_counter paddle.fluid.layers.learning_rate_scheduler
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  ops paddle.fluid.layers.ops
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  _decay_step_counter paddle.fluid.layers.learning_rate_scheduler._decay_step_counter
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(ops.cos->paddle.fluid.layers.ops.cos)[0m
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(ops.cos->paddle.fluid.layers.ops.cos)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(_decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(ops.floor->paddle.fluid.layers.ops.floor)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cosine_decay->paddle.fluid.layers.cosine_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.layers.polynomial_decay->paddle.fluid.layers.polynomial_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.mul)[0m
[1;33mAdd Params (name) to API (paddle.fluid.layers.equal)[0m
[1;33mDelete Params (cond) from API (paddle.fluid.layers.equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.mul->paddle.tensor.mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.equal->paddle.tensor.elementwise_equal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/npairsloss.py has been written sucess[0m

[1;32mNo module named 'vgg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models vgg.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/vgg.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/vgg.py has been written sucess[0m

[1;32mNo module named 'inception_v4', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models inception_v4.py
[1;34mStart upgrading model PaddleCV/image_classification/models/inception_v4.py[0m
[1;34mStart upgrading model PaddleCV/metric_learning/data/download_sop.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/data/download_sop.sh has been written sucess[0m
[1;32mNo module named 'quadrupletloss', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning/losses quadrupletloss.py
[1;34mStart upgrading model PaddleCV/metric_learning/losses/quadrupletloss.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> utility
NameFrom--->: ImportFrom
module_name---> commonfunc
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='get_gpu_num', asname=None)]
ImportFrom(module='utility', names=[alias(name='get_gpu_num', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_gpu_num utility
NameFrom--->: ImportFrom
[alias(name='calculate_order_dist_matrix', asname=None)]
ImportFrom(module='commonfunc', names=[alias(name='calculate_order_dist_matrix', asname=None)], level=1)
module_name---> commonfunc
[1;33mfunc_name.name, and module name are[0m calculate_order_dist_matrix commonfunc
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_gpu_num utility.get_gpu_num
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  calculate_order_dist_matrix commonfunc.calculate_order_dist_matrix
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.elementwise_div->paddle.fluid.layers.elementwise_div)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reduce_min->paddle.fluid.layers.reduce_min)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_div)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_min)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_div->paddle.tensor.div)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_min->paddle.tensor.min)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/quadrupletloss.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/README_en.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/README_en.md has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/ema_clean.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/ema_clean.py has been written sucess[0m
[1;32mNo module named 'dali', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification dali.py
[1;34mStart upgrading model PaddleCV/image_classification/dali.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> nvidia.dali.pipeline
NameFrom--->: ImportFrom
module_name---> nvidia.dali.plugin.paddle
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Pipeline', asname=None)]
ImportFrom(module='nvidia.dali.pipeline', names=[alias(name='Pipeline', asname=None)], level=0)
module_name---> nvidia.dali.pipeline
[1;33mfunc_name.name, and module name are[0m Pipeline nvidia.dali.pipeline
ImportName--->: Import
[alias(name='nvidia.dali.ops', asname='ops')]
ImportName--->: Import
[alias(name='nvidia.dali.types', asname='types')]
NameFrom--->: ImportFrom
[alias(name='DALIGenericIterator', asname=None)]
ImportFrom(module='nvidia.dali.plugin.paddle', names=[alias(name='DALIGenericIterator', asname=None)], level=0)
module_name---> nvidia.dali.plugin.paddle
[1;33mfunc_name.name, and module name are[0m DALIGenericIterator nvidia.dali.plugin.paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
key,value import_dict:  types nvidia.dali.types
key,value import_dict:  None paddle
key,value import_dict:  ops nvidia.dali.ops
key, v, from_dict:  division __future__.division
key, v, from_dict:  Pipeline nvidia.dali.pipeline.Pipeline
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  DALIGenericIterator nvidia.dali.plugin.paddle.DALIGenericIterator
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.core.Place->paddle.fluid.core.Place)[0m
[3;32mRestore API full name(DALIGenericIterator->nvidia.dali.plugin.paddle.DALIGenericIterator)[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.core.Place->paddle.fluid.core.Place)[0m
[3;32mRestore API full name(DALIGenericIterator->nvidia.dali.plugin.paddle.DALIGenericIterator)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/dali.py has been written sucess[0m

[1;32mNo module named 'dpn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_min->paddle.elementwise_min)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_min->paddle.elementwise_min)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/SPADE.py has been written sucess[0m

[1;32mNo module named 'dist_utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/utils dist_utils.py
[1;34mStart upgrading model PaddleCV/image_classification/utils/dist_utils.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.DistributeTranspilerConfig->paddle.fluid.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.DistributeTranspiler->paddle.fluid.DistributeTranspiler)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/dist_utils.py has been written sucess[0m

[1;32mNo module named 'resnext', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnext.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnext.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict: 
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='get_gpu_num', asname=None)]
ImportFrom(module='utility', names=[alias(name='get_gpu_num', asname=None)], level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m get_gpu_num utility
NameFrom--->: ImportFrom
[alias(name='calculate_order_dist_matrix', asname=None)]
ImportFrom(module='commonfunc', names=[alias(name='calculate_order_dist_matrix', asname=None)], level=1)
module_name---> commonfunc
[1;33mfunc_name.name, and module name are[0m calculate_order_dist_matrix commonfunc
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  get_gpu_num utility.get_gpu_num
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  calculate_order_dist_matrix commonfunc.calculate_order_dist_matrix
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_max->paddle.fluid.layers.elementwise_max)[0m
[3;32mRestore API full name(fluid.layers.elementwise_min->paddle.fluid.layers.elementwise_min)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.reduce_max->paddle.fluid.layers.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_min->paddle.fluid.layers.reduce_min)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.exp->paddle.fluid.layers.exp)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_max)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.reduce_min)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_max->paddle.elementwise_max)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_min->paddle.elementwise_min)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_max->paddle.tensor.max)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_min->paddle.tensor.min)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.exp->paddle.exp)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/emlloss.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/run_mp_mode.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/run_mp_mode.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/env.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/env.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/run_nccl2_mode.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/run_nccl2_mode.sh has been written sucess[0m
[1;32mNo module named 'batch_merge', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/dist_train batch_merge.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/batch_merge.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/batch_merge.py has been written sucess[0m

[1;32mNo module named 'model_libs', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models model_libs.py
[1;34mStart upgrading model PaddleCV/image_classification/models/model_libs.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
key,value import_dict: 
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(create_var_list->pytracking.libs.paddle_utils.create_var_list)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(layers.zeros->paddle.fluid.layers.zeros)[0m
[3;32mRestore API full name(layers.zeros->paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (device) to API (paddle.fluid.layers.zeros)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mDelete Params (force_cpu) from API (paddle.fluid.layers.zeros)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;33mUpgrade API (paddle.fluid.layers.zeros->paddle.tensor.zeros)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/libs/optimization.py has been written sucess[0m

[1;32mNo module named 'googlenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models googlenet.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/googlenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/googlenet.py has been written sucess[0m

[1;32mNo module named 'darknet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models darknet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/darknet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname='paddle')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
key,value import_dict:  paddle paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.gather->paddle.fluid.layers.gather)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather->paddle.tensor.gather)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/losses/commonfunc.py has been written sucess[0m

[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification reader.py
[1;34mStart upgrading model PaddleCV/image_classification/reader.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> utils.autoaugment
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='imghdr', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='ImageNetPolicy', asname=None)]
ImportFrom(module='utils.autoaugment', names=[alias(name='ImageNetPolicy', asname=None)], level=0)
module_name---> utils.autoaugment
[1;33mfunc_name.name, and module name are[0m ImageNetPolicy utils.autoaugment
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  ImageNetPolicy utils.autoaugment.ImageNetPolicy
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/reader.py has been written sucess[0m

[1;32mNo module named 'res2net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models res2net.py
[1;34mStart upgrading model PaddleCV/image_classification/models/res2net.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='utils', names=[alias(name='*', asname=None)], level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m * utils
ImportName--->: Import
[alias(name='models', asname=None)]
NameFrom--->: ImportFrom
[alias(name='create_model', asname=None)]
ImportFrom(module='build_model', names=[alias(name='create_model', asname=None)], level=0)
module_name---> build_model
[1;33mfunc_name.name, and module name are[0m create_model build_model
ImportName--->: Import
[alias(name='dali', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None dali
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  create_model build_model.create_model
key, v, from_dict:  * utils.*
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.contrib.mixed_precision.decorate->paddle.fluid.contrib.mixed_precision.decorate)[0m
[3;32mRestore API full name(fluid.layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.framework.cpu_places->paddle.fluid.framework.cpu_places)[0m
[3;32mRestore API full name(profiler.start_profiler->paddle.fluid.profiler.start_profiler)[0m
[3;32mRestore API full name(profiler.stop_profiler->paddle.fluid.profiler.stop_profiler)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/train.py has been written sucess[0m

[1;32mNo module named 'alexnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models alexnet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/alexnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  CycleGAN_model network.CycleGAN_network.CycleGAN_model
key, v, from_dict:  utility util.utility
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  profiler paddle.fluid.profiler
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.abs->paddle.fluid.layers.abs)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.layers.pad2d->paddle.fluid.layers.pad2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.nets.simple_img_conv_pool->paddle.fluid.nets.simple_img_conv_pool)[0m
[3;32mRestore API full name(fluid.layer_helper.LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.spectral_norm->paddle.fluid.layers.spectral_norm)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layer_helper.LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(fluid.layers.utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(fluid.layers.utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[3;32mRestore API full name(fluid.layers.utils.convert_to_list->paddle.fluid.layers.utils.convert_to_list)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.pad2d->paddle.nn.functional.pad2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/base_network.py has been written sucess[0m

[1;32mNo module named 'vgg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models vgg.py
[1;34mStart upgrading model PaddleCV/image_classification/models/vgg.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/alexnet.py has been written sucess[0m

[1;32mNo module named 'autodl', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models autodl.py
[1;34mStart upgrading model PaddleCV/image_classification/models/autodl.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
NameFrom--->: ImportFrom
[alias(name='Xavier', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Xavier', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Xavier paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Normal', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Normal', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Normal paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='Constant', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='Constant', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m Constant paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='namedtuple', asname=None)]
ImportFrom(module='collections', names=[alias(name='namedtuple', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m namedtuple collections
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Xavier paddle.fluid.initializer.Xavier
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  namedtuple collections.namedtuple
key, v, from_dict:  Normal paddle.fluid.initializer.Normal
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  Constant paddle.fluid.initializer.Constant
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/network/CGAN_network.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/gan/scripts/run_stargan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/run_stargan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_stgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_stgan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_cyclegan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_cyclegan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_stargan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_stargan.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/scripts/infer_attgan.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/scripts/infer_attgan.sh has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/metric_learning utility.py
[1;34mStart upgrading model PaddleCV/metric_learning/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='subprocess', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='core', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='core', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m core paddle.fluid
ImportName--->: Import
[alias(name='multiprocessing', asname='mp')]
key,value import_dict:  mp multiprocessing
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  core paddle.fluid.core
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/utility.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/fast_imagenet/tools/resize.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/tools/resize.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/legacy/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/README.md has been written sucess[0m
[1;32mNo module named 'reader_pil', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy reader_pil.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/reader_pil.py[0m
NameFrom--->: ImportFrom
module_name---> PIL
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageEnhance', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageEnhance PIL
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
key,value import_dict:  np numpy
key,value import_dict:  None functools
key, v, from_dict:  ImageEnhance PIL.ImageEnhance
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.contrib.reader.distributed_batch_reader->paddle.fluid.contrib.reader.distributed_batch_reader)[0m
[3;32mRestore API full name(fluid.io.xmap_readers->paddle.fluid.io.xmap_readers)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/reader_pil.py has been written sucess[0m

[1;32mNo module named 'resnet_vd', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnet_vd.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnet_vd.py[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/c_gan/network.py has been written sucess[0m

[1;32mNo module named 'dpn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models dpn.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/dpn.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/dpn.py has been written sucess[0m

[1;32mNo module named 'resnet_vc', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnet_vc.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnet_vc.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/AttGAN.py has been written sucess[0m
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/se_resnext.py has been written sucess[0m

[1;32mNo module named 'res2net_vd', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models res2net_vd.py
[1;34mStart upgrading model PaddleCV/image_classification/models/res2net_vd.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[alias(name='DCGAN_model', asname=None)]
ImportFrom(module='network.DCGAN_network', names=[alias(name='DCGAN_model', asname=None)], level=0)
module_name---> network.DCGAN_network
[1;33mfunc_name.name, and module name are[0m DCGAN_model network.DCGAN_network
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='utility', asname=None)]
ImportFrom(module='util', names=[alias(name='utility', asname=None)], level=0)
module_name---> util
[1;33mfunc_name.name, and module name are[0m utility util
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='random', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None random
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  utility util.utility
key, v, from_dict:  DCGAN_model network.DCGAN_network.DCGAN_model
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/DCGAN.py has been written sucess[0m

[1;32mNo module named 'se_resnext_vd', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models se_resnext_vd.py
[1;34mStart upgrading model PaddleCV/image_classification/models/se_resnext_vd.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification predict.py
[1;34mStart upgrading model PaddleCV/image_classification/predict.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='cv2', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
NameFrom--->: ImportFrom
[alias(name='PaddleTensor', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='PaddleTensor', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m PaddleTensor paddle.fluid.core
NameFrom--->: ImportFrom
[alias(name='AnalysisConfig', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='AnalysisConfig', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m AnalysisConfig paddle.fluid.core
NameFrom--->: ImportFrom
[alias(name='create_paddle_predictor', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='create_paddle_predictor', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m create_paddle_predictor paddle.fluid.core
key,value import_dict:  np numpy
key,value import_dict:  None logging
key, v, from_dict:  create_paddle_predictor paddle.fluid.core.create_paddle_predictor
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  PaddleTensor paddle.fluid.core.PaddleTensor
key, v, from_dict:  AnalysisConfig paddle.fluid.core.AnalysisConfig
[3;32mRestore API full name(AnalysisConfig->paddle.fluid.core.AnalysisConfig)[0m
[3;32mRestore API full name(create_paddle_predictor->paddle.fluid.core.create_paddle_predictor)[0m
[3;32mRestore API full name(PaddleTensor->paddle.fluid.core.PaddleTensor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/predict.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/legacy/dist_train/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/__init__.py has been written sucess[0m
[1;32mNo module named 'inception_v4', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/legacy/models inception_v4.py
[1;34mStart upgrading model PaddleCV/image_classification/legacy/models/inception_v4.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/inception_v4.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DenseNet169.sh[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/rcnn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/human_pose_estimation/lib/coco_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/lib/coco_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/gan/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/download.py has been written sucess[0m
[1;32mNo module named 'utilit', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan/util utility.py
[1;34mStart upgrading model PaddleCV/gan/util/utility.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='distutils.util', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='inspect', asname=None)]
ImportName--->: Import
[alias(name='matplotlib', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='matplotlib.pyplot', asname='plt')]
ImportName--->: Import
[alias(name='matplotlib.gridspec', asname='gridspec')]
ImportName--->: Import
[alias(name='copy', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Image', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
key,value import_dict:  gridspec matplotlib.gridspec
key,value import_dict:  None copy
key,value import_dict:  plt matplotlib.pyplot
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/util/utility.py has been written sucess[0m

[1;32mNo module named 'shufflenet_v2_swish', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models shufflenet_v2_swish.py
[1;34mStart upgrading model PaddleCV/image_classification/models/shufflenet_v2_swish.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/alexnet.py has been written sucess[0m

[1;32mNo module named 'googlenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models googlenet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/googlenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu6->paddle.fluid.layers.relu6)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu6->paddle.nn.functional.relu6)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/mobilenet_v2.py has been written sucess[0m

[1;32mNo module named 'mobilenet_v1', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models mobilenet_v1.py
[1;34mStart upgrading model PaddleCV/image_classification/models/mobilenet_v1.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/mobilenet_v1.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt50_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt50_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Xception65.sh[0m network.DCGAN_network
NameFrom--->: ImportFrom
[alias(name='SPADE_model', asname=None)]
ImportFrom(module='network.SPADE_network', names=[alias(name='SPADE_model', asname=None)], level=0)
module_name---> network.SPADE_network
[1;33mfunc_name.name, and module name are[0m SPADE_model network.SPADE_network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None matplotlib
key,value import_dict:  plt matplotlib.pyplot
key, v, from_dict:  division __future__.division
key, v, from_dict:  celeba_reader_creator data_reader.celeba_reader_creator
key, v, from_dict:  CycleGAN_model network.CycleGAN_network.CycleGAN_model
key, v, from_dict:  save_batch_image util.utility.save_batch_image
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  triplex_reader_creator data_reader.triplex_reader_creator
key, v, from_dict:  check_version util.utility.check_version
key, v, from_dict:  SPADE_model network.SPADE_network.SPADE_model
key, v, from_dict:  check_gpu util.utility.check_gpu
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  STGAN_model network.STGAN_network.STGAN_model
key, v, from_dict:  CGAN_model network.CGAN_network.CGAN_model
key, v, from_dict:  DCGAN_model network.DCGAN_network.DCGAN_model
key, v, from_dict:  check_attribute_conflict util.utility.check_attribute_conflict
key, v, from_dict:  Pix2pix_model network.Pix2pix_network.Pix2pix_model
key, v, from_dict:  print_arguments util.config.print_arguments
key, v, from_dict:  StarGAN_model network.StarGAN_network.StarGAN_model
key, v, from_dict:  reader_creator data_reader.reader_creator
key, v, from_dict:  utility util.utility
key, v, from_dict:  AttGAN_model network.AttGAN_network.AttGAN_model
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments util.config.add_arguments
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/infer.py has been written sucess[0m

[1;32mNo module named 'squeezenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models squeezenet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/squeezenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/darknet.py has been written sucess[0m

[1;32mNo module named 'shufflenet_v2', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models shufflenet_v2.py
[1;34mStart upgrading model PaddleCV/image_classification/models/shufflenet_v2.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.cosine_decay->paddle.fluid.layers.cosine_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.RMSProp->paddle.fluid.optimizer.RMSProp)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cosine_decay->paddle.nn.functional.cosine_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.polynomial_decay->paddle.nn.functional.polynomial_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.cosine_decay->paddle.nn.functional.cosine_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/optimizer.py has been written sucess[0m

[1;32mNo module named 'layers', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models layers.py
[1;34mStart upgrading model PaddleCV/image_classification/models/layers.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='warnings', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None warnings
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layer_helper.LayerHelper->paddle.fluid.layer_helper.LayerHelper)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.leaky_relu->paddle.fluid.layers.leaky_relu)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.swish->paddle.fluid.layers.swish)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnet_acnet.py has been written sucess[0m

[1;32mNo module named 'resnext101_wsl', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnext101_wsl.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnext101_wsl.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/resnet_dist.py has been written sucess[0m

[1;32mNo module named 'resnext_vd', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnext_vd.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnext_vd.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnext_vd.py has been written sucess[0m

[1;32mNo module named 'fast_imagenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models fast_imagenet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/fast_imagenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='functools', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.profiler', asname='profiler')]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.adaptive_pool2d->paddle.fluid.layers.adaptive_pool2d)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.DGCMomentumOptimizer->paddle.optimizer.DGCMomentumOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Accuracy->paddle.metric.Accuracy)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Accuracy->paddle.metric.Accuracy)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Accuracy->paddle.metric.Accuracy)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Accuracy->paddle.metric.Accuracy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/dist_train/dist_train.py has been written sucess[0m

[1;32mNo module named 'densenet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models densenet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/densenet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.uniform_random->paddle.fluid.layers.uniform_random)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.is_parameter->paddle.fluid.io.is_parameter)[0m
[3;32mRestore API full name(fluid.gradients->paddle.fluid.gradients)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sqrt->paddle.fluid.layers.sqrt)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(profiler.reset_profiler->paddle.fluid.profiler.reset_profiler)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.cuda_places->paddle.fluid.cuda_places)[0m
[3;32mRestore API full name(fluid.cpu_places->paddle.fluid.cpu_places)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.abs->paddle.abs)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/StarGAN.py has been written sucess[0m

[1;32mNo module named 'efficientnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models efficientnet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/efficientnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> layers
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/shufflenet_v2.py has been written sucess[0m

[1;32mNo module named 'resnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models resnet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/resnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/legacy/models/resnet.py has been written sucess[0m

[1;32mNo module named 'xception_deeplab', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models xception_deeplab.py
[1;34mStart upgrading model PaddleCV/image_classification/models/xception_deeplab.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> model_libs
NameFrom--->: ImportFrom
module_name---> model_libs
NameFrom--->: ImportFrom
module_name---> model_libs
NameFrom--->: ImportFrom
module_name---> model_libs
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='scope', asname=None), alias(name='name_scope', asname=None)]
ImportFrom(module='model_libs',
    names=[alias(name='scope', asname=None), alias(name='name_scope', asname=None)],
    level=1)
module_name---> model_libs
[1;33mfunc_name.name, and module name are[0m scope model_libs
[1;33mfunc_name.name, and module name are[0m name_scope model_libs
NameFrom--->: ImportFrom
[alias(name='bn', asname=None), alias(name='bn_relu', asname=None), alias(name='relu', asname=None)]
ImportFrom(module='model_libs',
    names=[alias(name='bn', asname=None), alias(name='bn_relu', asname=None), alias(name='relu', asname=None)],
    level=1)
module_name---> model_libs
[1;33mfunc_name.name, and module name are[0m bn model_libs
[1;33mfunc_name.name, and module name are[0m bn_relu model_libs
[1;33mfunc_name.name, and module name are[0m relu model_libs
NameFrom--->: ImportFrom
[alias(name='conv', asname=None)]
ImportFrom(module='model_libs', names=[alias(name='conv', asname=None)], level=1)
module_name---> model_libs
[1;33mfunc_name.name, and module name are[0m conv model_libs
NameFrom--->: ImportFrom
[alias(name='seperate_conv', asname=None)]
ImportFrom(module='model_libs', names=[alias(name='seperate_conv', asname=None)], level=1)
module_name---> model_libs
[1;33mfunc_name.name, and module name are[0m seperate_conv model_libs
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  relu model_libs.relu
key, v, from_dict:  seperate_conv model_libs.seperate_conv
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  name_scope model_libs.name_scope
key, v, from_dict:  bn_relu model_libs.bn_relu
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  bn model_libs.bn
key, v, from_dict:  conv model_libs.conv
key, v, from_dict:  scope model_libs.scope
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/xception_deeplab.py has been written sucess[0m
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
ImportName--->: Import
[alias(name='models', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None models
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/acnet/weights_aggregator.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W18_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W18_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W64_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W64_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50_dist.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50_dist.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt152_vd_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt152_vd_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/GoogLeNet.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/GoogLeNet.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2_x0_5.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2_x0_5.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/InceptionV4.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/InceptionV4.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt152_64x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt152_64x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNet34_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNet34_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_x2_0.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_x2_0.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DPN92.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DPN92.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt152_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt152_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50_ACNet.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50_ACNet.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W30_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W30_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W40_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W40_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Xception71.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Xception71.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multiview_simnet/README.cn.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/README.cn.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/run_train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/run_train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/args.py[0m
ImportFrom(module='utility',
    names=[alias(name='fmt_time', asname=None),
        alias(name='recall_topk', asname=None),
        alias(name='get_gpu_num', asname=None),
        alias(name='check_cuda', asname=None)],
    level=0)
module_name---> utility
[1;33mfunc_name.name, and module name are[0m fmt_time utility
[1;33mfunc_name.name, and module name are[0m recall_topk utility
[1;33mfunc_name.name, and module name are[0m get_gpu_num utility
[1;33mfunc_name.name, and module name are[0m check_cuda utility
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  recall_topk utility.recall_topk
key, v, from_dict:  get_gpu_num utility.get_gpu_num
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ArcMarginLoss losses.ArcMarginLoss
key, v, from_dict:  SoftmaxLoss losses.SoftmaxLoss
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  check_cuda utility.check_cuda
key, v, from_dict:  print_arguments utility.print_arguments
key, v, from_dict:  fmt_time utility.fmt_time
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/metric_learning/train_elem.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt101_vd_64x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt101_vd_64x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNeXt50_vd_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNeXt50_vd_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DenseNet264.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DenseNet264.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Xception41_deeplab.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Xception41_deeplab.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/local_cluster.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/local_cluster.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/run_infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/run_infer.sh has been written sucess[0m
[1;32mNo module named 'predict', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo predict.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/predict.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
NameFrom--->: ImportFrom
module_name---> paddle.fluid.core
NameFrom--->: ImportFrom
module_name---> dataset_generator
NameFrom--->: ImportFrom
module_name---> infer_network
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='PaddleTensor', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='PaddleTensor', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m PaddleTensor paddle.fluid.core
NameFrom--->: ImportFrom
[alias(name='AnalysisConfig', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='AnalysisConfig', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m AnalysisConfig paddle.fluid.core
NameFrom--->: ImportFrom
[alias(name='create_paddle_predictor', asname=None)]
ImportFrom(module='paddle.fluid.core', names=[alias(name='create_paddle_predictor', asname=None)], level=0)
module_name---> paddle.fluid.core
[1;33mfunc_name.name, and module name are[0m create_paddle_predictor paddle.fluid.core
NameFrom--->: ImportFrom
[alias(name='TDMDataset', asname=None)]
ImportFrom(module='dataset_generator', names=[alias(name='TDMDataset', asname=None)], level=0)
module_name---> dataset_generator
[1;33mfunc_name.name, and module name are[0m TDMDataset dataset_generator
NameFrom--->: ImportFrom
[alias(name='TdmInferNet', asname=None)]
ImportFrom(module='infer_network', names=[alias(name='TdmInferNet', asname=None)], level=0)
module_name---> infer_network
[1;33mfunc_name.name, and module name are[0m TdmInferNet infer_network
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)]
ImportFrom(module='args',
    names=[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)],
    level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m print_arguments args
[1;33mfunc_name.name, and module name are[0m parse_args args
ImportName--->: Import
[alias(name='logging', asname=None)] fluid paddle.fluid
key,value import_dict:  None contextlib
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.group_norm->paddle.fluid.layers.group_norm)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.conv2d_transpose->paddle.fluid.layers.conv2d_transpose)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/model_libs.py has been written sucess[0m

[1;32mNo module named 'se_resnet_vd', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models se_resnet_vd.py
[1;34mStart upgrading model PaddleCV/image_classification/models/se_resnet_vd.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/vgg.py has been written sucess[0m

[1;32mNo module named 'mobilenet_v2', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models mobilenet_v2.py
[1;34mStart upgrading model PaddleCV/image_classification/models/mobilenet_v2.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu6->paddle.fluid.layers.relu6)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu6->paddle.nn.functional.relu6)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/mobilenet_v2.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multiview_simnet/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/word2vec/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/train_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/infer_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/infer_cpu.sh has been written sucess[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/res2net_vd.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/VGG19.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/VGG19.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet200_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet200_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Res2Net101_vd_26w_4s.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Res2Net101_vd_26w_4s.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNet50_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNet50_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_25.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_25.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DenseNet161.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DenseNet161.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Xception65_deeplab.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Xception65_deeplab.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SqueezeNet1_0.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SqueezeNet1_0.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SqueezeNet1_1.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SqueezeNet1_1.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet18_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet18_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt152_vd_64x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt152_vd_64x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_33.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_33.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/VGG13.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/VGG13.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNet18_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNet18_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/VGG16.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/VGG16.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV1_x0_25.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV1_x0_25.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet101.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet101.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W44_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W44_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt101_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt101_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_5.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_x0_5.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNeXt50_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNeXt50_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2_x1_5.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2_x1_5.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2_x0_25.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2_x0_25.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tagspace/README.md[0m
[3;32mRestore API full name(fluid.framework.cuda_places->paddle.fluid.framework.cuda_places)[0m
[3;32mRestore API full name(fluid.framework.cpu_places->paddle.fluid.framework.cpu_places)[0m
[3;32mRestore API full name(fluid.compiler.CompiledProgram->paddle.fluid.compiler.CompiledProgram)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.compiler.CompiledProgram->paddle.CompiledProgram)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/eval.py has been written sucess[0m

[1;32mNo module named 'mobilenet_v3', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models mobilenet_v3.py
[1;34mStart upgrading model PaddleCV/image_classification/models/mobilenet_v3.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu6->paddle.fluid.layers.relu6)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu6->paddle.nn.functional.relu6)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/mobilenet_v3.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/youbube_dnn train.py
[1;34mStart upgrading model PaddleRec/youbube_dnn/train.py[0m
NameFrom--->: ImportFrom
module_name---> youtubednn
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/googlenet.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SENet154_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SENet154_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/run_predict.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/run_predict.sh has been written sucess[0m
[1;32mNo module named 'distributed_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo distributed_train.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/distributed_train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> shutil
NameFrom--->: ImportFrom
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler
NameFrom--->: ImportFrom
module_name---> paddle.fluid.incubate.fleet.utils.hdfs
NameFrom--->: ImportFrom
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> train_network
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
NameFrom--->: ImportFrom
[alias(name='copyfile', asname=None)]
ImportFrom(module='shutil', names=[alias(name='copyfile', asname=None)], level=0)
module_name---> shutil
[1;33mfunc_name.name, and module name are[0m copyfile shutil
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.fleet.base.role_maker', asname='role_maker')]
NameFrom--->: ImportFrom
[alias(name='fleet', asname=None)]
ImportFrom(
    module='paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler',
    names=[alias(name='fleet', asname=None)],
    level=0)
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler
[1;33mfunc_name.name, and module name are[0m fleet paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler
NameFrom--->: ImportFrom
[alias(name='HDFSClient', asname=None)]
ImportFrom(module='paddle.fluid.incubate.fleet.utils.hdfs', names=[alias(name='HDFSClient', asname=None)], level=0)
module_name---> paddle.fluid.incubate.fleet.utils.hdfs
[1;33mfunc_name.name, and module name are[0m HDFSClient paddle.fluid.incubate.fleet.utils.hdfs
NameFrom--->: ImportFrom
[alias(name='StrategyFactory', asname=None)]
ImportFrom(
    module='paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy',
    names=[alias(name='StrategyFactory', asname=None)],
    level=0)
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy
[1;33mfunc_name.name, and module name are[0m StrategyFactory paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)]
ImportFrom(module='args',
    names=[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)],
    level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m print_arguments args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='tdm_sampler_prepare', asname=None),
    alias(name='tdm_child_prepare', asname=None),
    alias(name='tdm_emb_prepare', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='tdm_sampler_prepare', asname=None),
        alias(name='tdm_child_prepare', asname=None),
        alias(name='tdm_emb_prepare', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m tdm_sampler_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_child_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_emb_prepare utils
NameFrom--->: ImportFrom
[alias(name='TdmTrainNet', asname=None)]
ImportFrom(module='train_network', names=[alias(name='TdmTrainNet', asname=None)], level=0)
module_name---> train_network
[1;33mfunc_name.name, and module name are[0m TdmTrainNet train_network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None random
key,value import_dict:  role_maker paddle.fluid.incubate.fleet.base.role_maker
key, v, from_dict:  TdmTrainNet train_network.TdmTrainNet
key, v, from_dict:  tdm_emb_prepare utils.tdm_emb_prepare
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  StrategyFactory paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy.StrategyFactory
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/res2net.py has been written sucess[0m

[1;32mNo module named 'se_resnext', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models se_resnext.py
[1;34mStart upgrading model PaddleCV/image_classification/models/se_resnext.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m pytracking.tracker.atom.optim
[1;33mfunc_name.name, and module name are[0m FactorizedConvProblem pytracking.tracker.atom.optim
[1;33mfunc_name.name, and module name are[0m ConvProblem pytracking.tracker.atom.optim
NameFrom--->: ImportFrom
[alias(name='BaseTracker', asname=None)]
ImportFrom(module='pytracking.tracker.base.basetracker', names=[alias(name='BaseTracker', asname=None)], level=0)
module_name---> pytracking.tracker.base.basetracker
[1;33mfunc_name.name, and module name are[0m BaseTracker pytracking.tracker.base.basetracker
key,value import_dict:  np numpy
key,value import_dict:  None time
key, v, from_dict:  FactorizedConvProblem pytracking.tracker.atom.optim.FactorizedConvProblem
key, v, from_dict:  fluid paddle.fluid
key, v, from_dict:  ConjugateGradient pytracking.libs.optimization.ConjugateGradient
key, v, from_dict:  dcf pytracking.libs.dcf
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  n2p pytracking.libs.paddle_utils.n2p
key, v, from_dict:  mod pytracking.libs.paddle_utils.mod
key, v, from_dict:  GradientDescentL2 pytracking.libs.optimization.GradientDescentL2
key, v, from_dict:  ConvProblem pytracking.tracker.atom.optim.ConvProblem
key, v, from_dict:  TensorList pytracking.libs.tensorlist.TensorList
key, v, from_dict:  dropout2d pytracking.libs.paddle_utils.dropout2d
key, v, from_dict:  BaseTracker pytracking.tracker.base.basetracker.BaseTracker
key, v, from_dict:  operation pytracking.libs.operation
key, v, from_dict:  fourier pytracking.libs.fourier
key, v, from_dict:  GaussNewtonCG pytracking.libs.optimization.GaussNewtonCG
key, v, from_dict:  leaky_relu pytracking.libs.paddle_utils.leaky_relu
key, v, from_dict:  augmentation pytracking.features.augmentation
[3;32mRestore API full name(mod->pytracking.libs.paddle_utils.mod)[0m
[3;32mRestore API full name(mod->pytracking.libs.paddle_utils.mod)[0m
[3;32mRestore API full name(layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(mod->pytracking.libs.paddle_utils.mod)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(layers.gaussian_random->paddle.fluid.layers.gaussian_random)[0m
[3;32mRestore API full name(leaky_relu->pytracking.libs.paddle_utils.leaky_relu)[0m
[3;32mRestore API full name(layers.elu->paddle.fluid.layers.elu)[0m
[3;32mRestore API full name(leaky_relu->pytracking.libs.paddle_utils.leaky_relu)[0m
[3;32mRestore API full name(layers.elu->paddle.fluid.layers.elu)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(dropout2d->pytracking.libs.paddle_utils.dropout2d)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(layers.gaussian_random->paddle.fluid.layers.gaussian_random)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(n2p->pytracking.libs.paddle_utils.n2p)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elu->paddle.nn.functional.elu)[0m
[1;33mUpgrade API (paddle.fluid.layers.elu->paddle.nn.functional.elu)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/tracking/pytracking/tracker/atom/atom.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DenseNet201.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DenseNet201.sh has been written sucess[0m
[1;32mNo module named 'local_infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo local_infer.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/local_infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> infer_network
NameFrom--->: ImportFrom
module_name---> dataset_generator
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='profiler', asname=None)]
ImportFrom(module='paddle.fluid', names=[alias(name='profiler', asname=None)], level=0)
module_name---> paddle.fluid
[1;33mfunc_name.name, and module name are[0m profiler paddle.fluid
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)]
ImportFrom(module='args',
    names=[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)],
    level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m print_arguments args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='TdmInferNet', asname=None)]
ImportFrom(module='infer_network', names=[alias(name='TdmInferNet', asname=None)], level=0)
module_name---> infer_network
[1;33mfunc_name.name, and module name are[0m TdmInferNet infer_network
NameFrom--->: ImportFrom
[alias(name='TDMDataset', asname=None)]
ImportFrom(module='dataset_generator', names=[alias(name='TDMDataset', asname=None)], level=0)
module_name---> dataset_generator
[1;33mfunc_name.name, and module name are[0m TDMDataset dataset_generator
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  TDMDataset dataset_generator.TDMDataset
key, v, from_dict:  TdmInferNet infer_network.TdmInferNet
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  print_arguments args.print_arguments
[3;32mRestore API full name(fluid.Tensor->paddle.fluid.Tensor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.adaptive_pool2d->paddle.fluid.layers.adaptive_pool2d)[0m
[3;32mRestore API full name(Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m None models
key, v, from_dict:  Program paddle.fluid.framework.Program
key, v, from_dict:  signature_safe_contextmanager paddle.fluid.wrapped_decorator.signature_safe_contextmanager
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  name_scope paddle.fluid.framework.name_scope
key, v, from_dict:  layers paddle.fluid.layers
key, v, from_dict:  default_main_program paddle.fluid.framework.default_main_program
key, v, from_dict:  Optimizer utils.optimizer.Optimizer
key, v, from_dict:  unique_name paddle.fluid.unique_name
key, v, from_dict:  program_guard paddle.fluid.framework.program_guard
key, v, from_dict:  dist_utils utils.dist_utils
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.io.load_vars->paddle.fluid.io.load_vars)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.compiler.BuildStrategy->paddle.fluid.compiler.BuildStrategy)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.CompiledProgram->paddle.fluid.CompiledProgram)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[3;32mRestore API full name(unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[3;32mRestore API full name(layers.tensor.create_global_var->paddle.fluid.layers.tensor.create_global_var)[0m
[3;32mRestore API full name(layers.control_flow.Switch->paddle.fluid.layers.control_flow.Switch)[0m
[3;32mRestore API full name(layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(layers.tensor.assign->paddle.fluid.layers.tensor.assign)[0m
[3;32mRestore API full name(layers.learning_rate_scheduler._decay_step_counter->paddle.fluid.layers.learning_rate_scheduler._decay_step_counter)[0m
[3;32mRestore API full name(layers.elementwise_pow->paddle.fluid.layers.elementwise_pow)[0m
[3;32mRestore API full name(unique_name.generate->paddle.fluid.unique_name.generate)[0m
[3;32mRestore API full name(layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(name_scope->paddle.fluid.framework.name_scope)[0m
[3;32mRestore API full name(layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(default_main_program->paddle.fluid.framework.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.compiler.BuildStrategy->paddle.BuildStrategy)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.layers.tensor.create_global_var->paddle.create_global_var)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_pow->paddle.elementwise_pow)[0m
[1;33mUpgrade API (paddle.fluid.framework.name_scope->paddle.name_scope)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.framework.default_main_program->paddle.default_main_program)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/utils/utility.py has been written sucess[0m

[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/word2vec net.py
[1;34mStart upgrading model PaddleRec/word2vec/net.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnext.py has been written sucess[0m

[1;32mNo module named 'hrnet', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models hrnet.py
[1;34mStart upgrading model PaddleCV/image_classification/models/hrnet.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.initializer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='MSRA', asname=None)]
ImportFrom(module='paddle.fluid.initializer', names=[alias(name='MSRA', asname=None)], level=0)
module_name---> paddle.fluid.initializer
[1;33mfunc_name.name, and module name are[0m MSRA paddle.fluid.initializer
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
key, v, from_dict:  MSRA paddle.fluid.initializer.MSRA
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.resize_nearest->paddle.fluid.layers.resize_nearest)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(MSRA->paddle.fluid.initializer.MSRA)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/trainer/CycleGAN.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet101_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet101_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt101_64x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt101_64x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet34_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet34_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV1_x0_75.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV1_x0_75.sh has been written sucess[0m
[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multiview_simnet nets.py
[1;34mStart upgrading model PaddleRec/multiview_simnet/nets.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.layers.tensor', asname='tensor')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.control_flow', asname='cf')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.io', asname='io')]
key,value import_dict:  io paddle.fluid.layers.io
key,value import_dict:  cf paddle.fluid.layers.control_flow
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  tensor paddle.fluid.layers.tensor
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(cf.less_than->paddle.fluid.layers.control_flow.less_than)[0m
[3;32mRestore API full name(tensor.cast->paddle.fluid.layers.tensor.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_max->paddle.fluid.layers.elementwise_max)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_max->paddle.elementwise_max)[0m dpn.py
[1;34mStart upgrading model PaddleCV/image_classification/models/dpn.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
insert paddle into 4
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/dpn.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/word2vec utils.py
[1;34mStart upgrading model PaddleRec/word2vec/utils.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='preprocess', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/wide_deep/infer_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/infer_gpu.sh has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/wide_deep utils.py
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->:
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sqrt->paddle.tensor.sqrt)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.leaky_relu->paddle.nn.functional.leaky_relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.swish->paddle.nn.functional.swish)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/layers.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/AlexNet.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/AlexNet.sh has been written sucess[0m
[1;32mNo module named 'infer_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo infer_network.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/infer_network.py[0m
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> train_network
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='tdm_sampler_prepare', asname=None),
    alias(name='tdm_child_prepare', asname=None),
    alias(name='trace_var', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='tdm_sampler_prepare', asname=None),
        alias(name='tdm_child_prepare', asname=None),
        alias(name='trace_var', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m tdm_sampler_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_child_prepare utils
[1;33mfunc_name.name, and module name are[0m trace_var utils
NameFrom--->: ImportFrom
[alias(name='DnnLayerClassifierNet', asname=None), alias(name='InputTransNet', asname=None)]
ImportFrom(module='train_network',
    names=[alias(name='DnnLayerClassifierNet', asname=None), alias(name='InputTransNet', asname=None)],
    level=0)
module_name---> train_network
[1;33mfunc_name.name, and module name are[0m DnnLayerClassifierNet train_network
[1;33mfunc_name.name, and module name are[0m InputTransNet train_network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None argparse
key, v, from_dict:  tdm_sampler_prepare utils.tdm_sampler_prepare
key, v, from_dict:  DnnLayerClassifierNet train_network.DnnLayerClassifierNet
key, v, from_dict:  InputTransNet train_network.InputTransNet
key, v, from_dict:  trace_var utils.trace_var
key, v, from_dict:  tdm_child_prepare utils.tdm_child_prepare
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.contrib.layers.index_sample->paddle.fluid.contrib.layers.index_sample)[0m
[3;32mRestore API full name(fluid.contrib.layers.index_sample->paddle.fluid.contrib.layers.index_sample)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.contrib.layers.tdm_child->paddle.fluid.contrib.layers.tdm_child)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[3;32mRestore API full name(fluid.contrib.layers.index_sample->paddle.fluid.contrib.layers.index_sample)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/se_resnext_vd.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo utils.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/utils.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)]
ImportFrom(module='args',
    names=[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)],
    level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m print_arguments args
[1;33mfunc_name.name, and module name are[0m parse_args args
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  print_arguments args.print_arguments
[3;32mRestore API full name(fluid.layers.Print->paddle.fluid.layers.Print)[0m
[3;32mRestore API full name(fluid.layers.Print->paddle.fluid.layers.Print)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/utils.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/xdeepfm infer.py
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/infer.py[0m
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> criteo_reader
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='args', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='CriteoDataset', asname=None)]
ImportFrom(module='criteo_reader', names=[alias(name='CriteoDataset', asname=None)], level=0)
module_name---> criteo_reader
[1;33mfunc_name.name, and module name are[0m CriteoDataset criteo_reader
ImportName--->: Import
[alias(name='network_conf', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  CriteoDataset criteo_reader.CriteoDataset
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/shufflenet_v2_swish.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multiview_simnet infer.py
[1;34mStart upgrading model PaddleRec/multiview_simnet/infer.py[0m
NameFrom--->: ImportFrom
module_name---> nets
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='MultiviewSimnet', asname=None), alias(name='SimpleEncoderFactory', asname=None)]
ImportFrom(module='nets',
    names=[alias(name='MultiviewSimnet', asname=None), alias(name='SimpleEncoderFactory', asname=None)],
    level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m MultiviewSimnet nets
[1;33mfunc_name.name, and module name are[0m SimpleEncoderFactory nets
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  reader reader
key, v, from_dict:  MultiviewSimnet nets.MultiviewSimnet
key, v, from_dict:  SimpleEncoderFactory nets.SimpleEncoderFactory
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/gru4rec/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gru4rec/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/run_gru.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/run_gru.sh has been written sucess[0m
[1;32mNo module named 'local_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/xdeepfm local_train.py
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/local_train.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='args', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m parse_args args
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='network_conf', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  parse_args args.parse_args
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnet.py has been written sucess[0m

[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tagspace net.py
[1;34mStart upgrading model PaddleRec/tagspace/net.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.layers.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.tensor', asname='tensor')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.control_flow', asname='cf')]
key,value import_dict:  nn paddle.fluid.layers.nn
key,value import_dict:  cf paddle.fluid.layers.control_flow
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  tensor paddle.fluid.layers.tensor
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(nn.cos_sim->paddle.fluid.layers.nn.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.sequence_expand_as->paddle.fluid.layers.sequence_expand_as)[0m
[3;32mRestore API full name(nn.cos_sim->paddle.fluid.layers.nn.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(nn.reduce_max->paddle.fluid.layers.nn.reduce_max)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(nn.elementwise_sub->paddle.fluid.layers.nn.elementwise_sub)[0m
[3;32mRestore API full name(nn.elementwise_add->paddle.fluid.layers.nn.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(nn.elementwise_max->paddle.fluid.layers.nn.elementwise_max)[0m
[3;32mRestore API full name(nn.mean->paddle.fluid.layers.nn.mean)[0m
[3;32mRestore API full name(cf.less_than->paddle.fluid.layers.control_flow.less_than)[0m
[3;32mRestore API full name(tensor.cast->paddle.fluid.layers.tensor.cast)[0m
[3;32mRestore API full name(nn.reduce_sum->paddle.fluid.layers.nn.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.nn.cos_sim->paddle.metric.cos_sim)[0m
[1;33mUpgrade API (paddle.fluid.layers.nn.cos_sim->paddle.metric.cos_sim)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/net.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/wide_deep/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/train_cpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/infer_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/infer_cpu.sh has been written sucess[0m
[1;32mNo module named 'local_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm local_train.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm/local_train.py[0m
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> network_conf
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='args', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m parse_args args
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ctr_deepfm_model', asname=None)]
ImportFrom(module='network_conf', names=[alias(name='ctr_deepfm_model', asname=None)], level=0)
module_name---> network_conf
[1;33mfunc_name.name, and module name are[0m ctr_deepfm_model network_conf
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  ctr_deepfm_model network_conf.ctr_deepfm_model
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DenseNet169.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DarkNet53.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DarkNet53.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_x1_5.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_x1_5.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DPN98.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DPN98.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet18.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet18.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Res2Net50_vd_26w_4s.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Res2Net50_vd_26w_4s.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2_x0_75.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2_x0_75.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50_fp16.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50_fp16.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Res2Net50_26w_4s.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Res2Net50_26w_4s.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W48_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W48_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV1_x0_5.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV1_x0_5.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50_vc.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50_vc.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multiview_simnet/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/README.md has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/youbube_dnn infer.py
[1;34mStart upgrading model PaddleRec/youbube_dnn/infer.py[0m
NameFrom--->: ImportFrom
module_name---> youtubednn
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='YoutubeDNN', asname=None)]
ImportFrom(module='youtubednn', names=[alias(name='YoutubeDNN', asname=None)], level=0)
module_name---> youtubednn
[1;33mfunc_name.name, and module name are[0m YoutubeDNN youtubednn
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key,value import_dict:  pd pandas
key, v, from_dict:  YoutubeDNN youtubednn.YoutubeDNN
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/args.py has been written sucess[0m
[1;32mNo module named 'criteo_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/xdeepfm criteo_reader.py
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/criteo_reader.py[0m
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Counter', asname=None)]
ImportFrom(module='collections', names=[alias(name='Counter', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m Counter collections
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  None os
key, v, from_dict:  Counter collections.Counter
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/criteo_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/din/data/remap_id.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/data/remap_id.py has been written sucess[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/squeezenet.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/youbube_dnn/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/args.py has been written sucess[0m
[1;32mNo module named 'youtubednn', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/youbube_dnn youtubednn.py
[1;34mStart upgrading model PaddleRec/youbube_dnn/youtubednn.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/youtubednn.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/wide_deep train.py
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/train.py[0m
NameFrom--->: ImportFrom
module_name---> net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='wide_deep', asname=None)]
ImportFrom(module='net', names=[alias(name='wide_deep', asname=None)], level=0)
module_name---> net
[1;33mfunc_name.name, and module name are[0m wide_deep net
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  wide_deep net.wide_deep
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.optimizer.AdagradOptimizer->paddle.fluid.optimizer.AdagradOptimizer)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Xception65.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DPN68.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DPN68.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Xception41.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Xception41.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet152.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet152.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV2_x2_0.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV2_x2_0.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt50_vd_64x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt50_vd_64x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/HRNet_W32_C.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/HRNet_W32_C.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DPN131.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DPN131.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/EfficientNetB0.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/EfficientNetB0.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet152_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet152_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet50_vd.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet50_vd.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/MobileNetV1.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/MobileNetV1.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DPN107.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DPN107.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNet34.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNet34.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/SE_ResNeXt101_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/SE_ResNeXt101_32x4d.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/VGG11.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/VGG11.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Res2Net200_vd_26w_4s.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Res2Net200_vd_26w_4s.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/Res2Net50_14w_8s.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/Res2Net50_14w_8s.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/async_train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/async_train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/word2vec/preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/word2vec/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/get_topk.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/get_topk.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/train_cpu.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tagspace train.py
[1;34mStart upgrading model PaddleRec/tagspace/train.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='net', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None net
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/3d_vision/PointRCNN/models/point_rcnn.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/rrpn/pretrained/download.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/rrpn/pretrained/download.sh has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/nms_utils.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/nms_utils.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/utils/coco_evaluator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/utils/coco_evaluator.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/lib/base_reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/lib/base_reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleCV/human_pose_estimation/lib/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/human_pose_estimation/lib/__init__.py has been written sucess[0m
[1;32mNo module named 'data_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/gan data_reader.py
[1;34mStart upgrading model PaddleCV/gan/data_reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> six.moves
NameFrom--->: ImportFrom
module_name---> PIL
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
NameFrom--->: ImportFrom
[alias(name='range', asname=None)]
ImportFrom(module='six.moves', names=[alias(name='range', asname=None)], level=0)
module_name---> six.moves
[1;33mfunc_name.name, and module name are[0m range six.moves
NameFrom--->: ImportFrom
[alias(name='Image', asname=None), alias(name='ImageOps', asname=None)]
ImportFrom(module='PIL', names=[alias(name='Image', asname=None), alias(name='ImageOps', asname=None)], level=0)
module_name---> PIL
[1;33mfunc_name.name, and module name are[0m Image PIL
[1;33mfunc_name.name, and module name are[0m ImageOps PIL
ImportName--->: Import
[alias(name='gzip', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='struct', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  Image PIL.Image
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  ImageOps PIL.ImageOps
key, v, from_dict:  range six.moves.range
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/gan/data_reader.py has been written sucess[0m

[1;32mNo module named 'network_conf', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/xdeepfm network_conf.py
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/network_conf.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/local_infer.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/xdeepfm utils.py
[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/wide_deep/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/data_preparation.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/data_preparation.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/train_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/args.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/wide_deep infer.py
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/infer.py[0m
NameFrom--->: ImportFrom
module_name---> net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='wide_deep', asname=None)]
ImportFrom(module='net', names=[alias(name='wide_deep', asname=None)], level=0)
module_name---> net
[1;33mfunc_name.name, and module name are[0m wide_deep net
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  wide_deep net.wide_deep
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/dcn/config.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/config.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dcn utils.py
[1;34mStart upgrading model PaddleRec/ctr/dcn/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/README.md has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm_dygraph infer.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> network
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
ImportName--->: Import
[alias(name='utility', asname='utils')]
NameFrom--->: ImportFrom
[alias(name='DeepFM', asname=None)]
ImportFrom(module='network', names=[alias(name='DeepFM', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m DeepFM network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict: 
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/shufflenet_v2.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ResNeXt101_vd_32x4d.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ResNeXt101_vd_32x4d.sh has been written sucess[0m
[1;32mNo module named 'train_network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo train_network.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/train_network.py[0m
NameFrom--->: ImportFrom
module_name---> utils
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='tdm_sampler_prepare', asname=None),
    alias(name='tdm_child_prepare', asname=None),
    alias(name='tdm_emb_prepare', asname=None),
    alias(name='trace_var', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='tdm_sampler_prepare', asname=None),
        alias(name='tdm_child_prepare', asname=None),
        alias(name='tdm_emb_prepare', asname=None),
        alias(name='trace_var', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m tdm_sampler_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_child_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_emb_prepare utils
[1;33mfunc_name.name, and module name are[0m trace_var utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  tdm_sampler_prepare utils.tdm_sampler_prepare
key, v, from_dict:  tdm_emb_prepare utils.tdm_emb_prepare
key, v, from_dict:  trace_var utils.trace_var
key, v, from_dict:  tdm_child_prepare utils.tdm_child_prepare
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.initializer.ConstantInitializer->paddle.fluid.initializer.ConstantInitializer)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.contrib.layers.tdm_sampler->paddle.fluid.contrib.layers.tdm_sampler)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.where->paddle.fluid.layers.where)[0m
[3;32mRestore API full name(fluid.layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.unsqueeze->paddle.fluid.layers.unsqueeze)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.unsqueeze->paddle.tensor.unsqueeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/train_network.py has been written sucess[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/se_resnet_vd.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/README.md has been written sucess[0m
[1;32mNo module named 'gru4rec_d', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec/dy_graph gru4rec_dy.py
[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/gru4rec_dy.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
NameFrom--->: ImportFrom
module_name---> paddle.fluid.optimizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.optimizer
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.core', asname='core')]
NameFrom--->: ImportFrom
[alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn', names=[alias(name='Embedding', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
ImportName--->: Import
[alias(name='paddle.fluid.framework', asname='framework')]
NameFrom--->: ImportFrom
[alias(name='SGDOptimizer', asname=None)]
ImportFrom(module='paddle.fluid.optimizer', names=[alias(name='SGDOptimizer', asname=None)], level=0)
module_name---> paddle.fluid.optimizer
[1;33mfunc_name.name, and module name are[0m SGDOptimizer paddle.fluid.optimizer
NameFrom--->: ImportFrom
[alias(name='AdagradOptimizer', asname=None)]
ImportFrom(module='paddle.fluid.optimizer', names=[alias(name='AdagradOptimizer', asname=None)], level=0)
module_name---> paddle.fluid.optimizer
[1;33mfunc_name.name, and module name are[0m AdagradOptimizer paddle.fluid.optimizer
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='model_check', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  framework paddle.fluid.framework
key,value import_dict:  None sys
key,value import_dict:  core paddle.fluid.core
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  * args.*
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  SGDOptimizer paddle.fluid.optimizer.SGDOptimizer
key, v, from_dict:  AdagradOptimizer paddle.fluid.optimizer.AdagradOptimizer
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.split->paddle.fluid.layers.split)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.tanh->paddle.fluid.layers.tanh)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/fast_imagenet.py has been written sucess[0m

[1;32mNo module named 'local_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo local_train.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/local_train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> utils
NameFrom--->: ImportFrom
module_name---> train_network
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)]
ImportFrom(module='args',
    names=[alias(name='print_arguments', asname=None), alias(name='parse_args', asname=None)],
    level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m print_arguments args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='tdm_sampler_prepare', asname=None), alias(name='tdm_child_prepare', asname=None)]
ImportFrom(module='utils',
    names=[alias(name='tdm_sampler_prepare', asname=None), alias(name='tdm_child_prepare', asname=None)],
    level=0)
module_name---> utils
[1;33mfunc_name.name, and module name are[0m tdm_sampler_prepare utils
[1;33mfunc_name.name, and module name are[0m tdm_child_prepare utils
NameFrom--->: ImportFrom
[alias(name='TdmTrainNet', asname=None)]
ImportFrom(module='train_network', names=[alias(name='TdmTrainNet', asname=None)], level=0)
module_name---> train_network
[1;33mfunc_name.name, and module name are[0m TdmTrainNet train_network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  TdmTrainNet train_network.TdmTrainNet
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  tdm_sampler_prepare utils.tdm_sampler_prepare
key, v, from_dict:  print_arguments args.print_arguments
key, v, from_dict:  tdm_child_prepare utils.tdm_child_prepare
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save_persistables->paddle.fluid.io.save_persistables)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/local_train.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn utils.py
[1;34mStart upgrading model PaddleRec/ctr/dnn/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/dnn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/__init__.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn train.py
[1;34mStart upgrading model PaddleRec/ctr/dnn/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network_conf
NameFrom--->: ImportFrom
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler
NameFrom--->: ImportFrom
module_name---> paddle.fluid.transpiler.distribute_transpiler
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='CTR', asname=None)]
ImportFrom(module='network_conf', names=[alias(name='CTR', asname=None)], level=0)
module_name---> network_conf
[1;33mfunc_name.name, and module name are[0m CTR network_conf
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.fleet.base.role_maker', asname='role_maker')]
NameFrom--->: ImportFrom
[alias(name='fleet', asname=None)]
ImportFrom(
    module='paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler',
    names=[alias(name='fleet', asname=None)],
    level=0)
module_name---> paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/word2vec train.py
[1;34mStart upgrading model PaddleRec/word2vec/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> net
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
NameFrom--->: ImportFrom
[alias(name='skip_gram_word2vec', asname=None), alias(name='skip_gram_word2vec_shuffle_batch', asname=None)]
ImportFrom(module='net',
    names=[alias(name='skip_gram_word2vec', asname=None), alias(name='skip_gram_word2vec_shuffle_batch', asname=None)],
    level=0)
module_name---> net
[1;33mfunc_name.name, and module name are[0m skip_gram_word2vec net
[1;33mfunc_name.name, and module name are[0m skip_gram_word2vec_shuffle_batch net
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  skip_gram_word2vec net.skip_gram_word2vec
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  skip_gram_word2vec_shuffle_batch net.skip_gram_word2vec_shuffle_batch
[3;32mRestore API full name(fluid.Tensor->paddle.fluid.Tensor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Tensor->paddle.fluid.Tensor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/dcn/dist_data/dist_download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/dist_data/dist_download.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/utility.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/utility.py has been written sucess[0m
[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm_dygraph network.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/network.py[0m
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.nn
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='Linear', asname=None), alias(name='Embedding', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.nn',
    names=[alias(name='Linear', asname=None), alias(name='Embedding', asname=None)],
    level=0)
module_name---> paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Linear paddle.fluid.dygraph.nn
[1;33mfunc_name.name, and module name are[0m Embedding paddle.fluid.dygraph.nn
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  Embedding paddle.fluid.dygraph.nn.Embedding
key, v, from_dict:  Linear paddle.fluid.dygraph.nn.Linear
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.regularizer.L1DecayRegularizer->paddle.fluid.regularizer.L1DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Linear->paddle.fluid.dygraph.nn.Linear)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnet_vd.py has been written sucess[0m

[1;32mNo module named 'train_sample_neg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec train_sample_neg.py
[1;34mStart upgrading model PaddleRec/gru4rec/train_sample_neg.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='net', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None net
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/train_sample_neg.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/esmm/cpu_train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/cpu_train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/gpu_infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/gpu_infer.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/args.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/esmm infer.py
[1;34mStart upgrading model PaddleRec/multi_task/esmm/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/inception_v4.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/gru4rec/convert_format.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/convert_format.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gru4rec/text2paddle.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/text2paddle.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec utils.py
[1;34mStart upgrading model PaddleRec/gru4rec/utils.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/se_resnext.py has been written sucess[0m

[1;32mNo module named 'model_check', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec/dy_graph model_check.py
[1;34mStart upgrading model PaddleRec/gru4rec/dy_graph/model_check.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.is_compiled_with_cuda->paddle.fluid.is_compiled_with_cuda)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/model_check.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/xdeepfm/data/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/data/download.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/create_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/create_data.sh has been written sucess[0m
[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/wide_deep net.py
[1;34mStart upgrading model PaddleRec/ctr/wide_deep/net.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.create_tensor->paddle.fluid.layers.create_tensor)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.create_tensor->paddle.create_tensor)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/net.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/data/download_preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/data/download_preprocess.py has been written sucess[0m
[1;32mNo module named 'README', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn README.md
[1;32mNo module named 'dataset_generator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn dataset_generator.py
[1;34mStart upgrading model PaddleRec/ctr/dnn/dataset_generator.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  None paddle
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/dataset_generator.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/mmoe/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/train_cpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/train_cpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/reader.py[0m
 Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/utils.py has been written sucess[0m

[1;32mNo module named 'network_conf', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm network_conf.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm/network_conf.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.regularizer.L1DecayRegularizer->paddle.fluid.regularizer.L1DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormalInitializer->paddle.fluid.initializer.TruncatedNormalInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/network_conf.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/mmoe/create_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/create_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/gpu_train.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/gpu_train.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/esmm/get_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/get_data.sh has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/esmm utils.py
[1;34mStart upgrading model PaddleRec/multi_task/esmm/utils.py[0m
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->:

[1;34mStart upgrading model PaddleCV/image_classification/models/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/__init__.py has been written sucess[0m
[1;32mNo module named 'xception', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleCV/image_classification/models xception.py
[1;34mStart upgrading model PaddleCV/image_classification/models/xception.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.param_attr
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None sys
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/xception.py has been written sucess[0m

[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/esmm net.py
[1;34mStart upgrading model PaddleRec/multi_task/esmm/net.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  create_paddle_predictor paddle.fluid.core.create_paddle_predictor
key, v, from_dict:  TDMDataset dataset_generator.TDMDataset
key, v, from_dict:  TdmInferNet infer_network.TdmInferNet
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  PaddleTensor paddle.fluid.core.PaddleTensor
key, v, from_dict:  print_arguments args.print_arguments
key, v, from_dict:  AnalysisConfig paddle.fluid.core.AnalysisConfig
[3;32mRestore API full name(PaddleTensor->paddle.fluid.core.PaddleTensor)[0m
[3;32mRestore API full name(PaddleTensor->paddle.fluid.core.PaddleTensor)[0m
[3;32mRestore API full name(PaddleTensor->paddle.fluid.core.PaddleTensor)[0m
[3;32mRestore API full name(AnalysisConfig->paddle.fluid.core.AnalysisConfig)[0m
[3;32mRestore API full name(create_paddle_predictor->paddle.fluid.core.create_paddle_predictor)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/predict.py has been written sucess[0m

[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec net.py
[1;34mStart upgrading model PaddleRec/gru4rec/net.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.layers.bpr_loss->paddle.fluid.layers.bpr_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.initializer.XavierInitializer->paddle.fluid.initializer.XavierInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.sequence_reshape->paddle.fluid.layers.sequence_reshape)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/densenet.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/ShuffleNetV2_swish.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/ShuffleNetV2_swish.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multiview_simnet train.py
[1;34mStart upgrading model PaddleRec/multiview_simnet/train.py[0m
NameFrom--->: ImportFrom
module_name---> nets
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='reader', asname='reader')]
NameFrom--->: ImportFrom
[alias(name='MultiviewSimnet', asname=None), alias(name='SimpleEncoderFactory', asname=None)]
ImportFrom(module='nets',
    names=[alias(name='MultiviewSimnet', asname=None), alias(name='SimpleEncoderFactory', asname=None)],
    level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m MultiviewSimnet nets
[1;33mfunc_name.name, and module name are[0m SimpleEncoderFactory nets
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  reader reader
key, v, from_dict:  MultiviewSimnet nets.MultiviewSimnet
key, v, from_dict:  SimpleEncoderFactory nets.SimpleEncoderFactory
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm/dist_data/dist_data_download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/dist_data/dist_data_download.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/deepfm/data/download_preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/data/download_preprocess.py has been written sucess[0m
[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/din reader.py
[1;34mStart upgrading model PaddleRec/ctr/din/reader.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  None pickle
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/reader.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/mmoe utils.py
[1;34mStart upgrading model PaddleRec/multi_task/mmoe/utils.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='io', asname=None)]
NameFrom--->: ImportFrom
[alias(name='islice', asname=None)]
ImportFrom(module='itertools', names=[alias(name='islice', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m islice itertools
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key,value import_dict:  pd pandas
key, v, from_dict:  islice itertools.islice
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/esmm/cpu_infer.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/cpu_infer.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gnn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/README.md has been written sucess[0m
[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gnn network.py
[1;34mStart upgrading model PaddleRec/gnn/network.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle.fluid.layers', asname='layers')]
key,value import_dict:  layers paddle.fluid.layers
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/nets.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/deepfm/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/args.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm utils.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm/dist_data/preprocess_dist.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/dist_data/preprocess_dist.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/deepfm/data/preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/data/preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/din/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/README.md has been written sucess[0m
[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/din network.py
[1;34mStart upgrading model PaddleRec/ctr/din/network.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.scale->paddle.fluid.layers.scale)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.scale->paddle.scale)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/network.py has been written sucess[0m

[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ssr
key, v, from_dict:  tdm_sampler_prepare utils.tdm_sampler_prepare
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  fleet paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet
key, v, from_dict:  HDFSClient paddle.fluid.incubate.fleet.utils.hdfs.HDFSClient
key, v, from_dict:  copyfile shutil.copyfile
key, v, from_dict:  print_arguments args.print_arguments
key, v, from_dict:  tdm_child_prepare utils.tdm_child_prepare
[3;32mRestore API full name(HDFSClient->paddle.fluid.incubate.fleet.utils.hdfs.HDFSClient)[0m
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[3;32mRestore API full name(fleet.split_files->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.split_files)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(role_maker.PaddleCloudRoleMaker->paddle.fluid.incubate.fleet.base.role_maker.PaddleCloudRoleMaker)[0m
[3;32mRestore API full name(fleet.init->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init)[0m
[3;32mRestore API full name(StrategyFactory.create_sync_strategy->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy.StrategyFactory.create_sync_strategy)[0m
[3;32mRestore API full name(StrategyFactory.create_half_async_strategy->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy.StrategyFactory.create_half_async_strategy)[0m
[3;32mRestore API full name(StrategyFactory.create_async_strategy->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.distributed_strategy.StrategyFactory.create_async_strategy)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fleet.distributed_optimizer->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.distributed_optimizer)[0m
[3;32mRestore API full name(fleet.is_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_server)[0m
[3;32mRestore API full name(fleet.init_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init_server)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fleet.run_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.run_server)[0m
[3;32mRestore API full name(fleet.is_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_worker)[0m
[3;32mRestore API full name(fleet.init_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init_worker)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fleet.is_first_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_first_worker)[0m
[3;32mRestore API full name(fleet.save_persistables->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.save_persistables)[0m
[3;32mRestore API full name(fleet.stop_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.stop_worker)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/distributed_train.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn infer.py
[1;34mStart upgrading model PaddleRec/ctr/dnn/infer.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> network_conf
[1;34mfuture count is 1 [0m
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='CTR', asname=None)]
ImportFrom(module='network_conf', names=[alias(name='CTR', asname=None)], level=0)
module_name---> network_conf
[1;33mfunc_name.name, and module name are[0m CTR network_conf
ImportName--->: Import
[alias(name='feed_generator', asname='generator')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  generator feed_generator
key, v, from_dict:  CTR network_conf.CTR
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load_persistables->paddle.fluid.io.load_persistables)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/rerank/listwise/infer_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/infer_cpu.sh has been written sucess[0m
[1;32mNo module named 'net', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/text_classification net.py
[1;34mStart upgrading model PaddleRec/text_classification/net.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/args.py has been written sucess[0m
[1;32mNo module named 'dataset_generator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tdm/tdm_demo dataset_generator.py
[1;34mStart upgrading model PaddleRec/tdm/tdm_demo/dataset_generator.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='json', asname=None)]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  np numpy
key,value import_dict:  None paddle
[1;33mUpgrade API (fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/dataset_generator.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec infer.py
[1;34mStart upgrading model PaddleRec/gru4rec/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/infer.py has been written sucess[0m

[1;32mNo module named 'local_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dcn local_train.py
[1;34mStart upgrading model PaddleRec/ctr/dcn/local_train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> network
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None),
    alias(name='absolute_import', asname=None),
    alias(name='division', asname=None)]
ImportFrom(module='__future__',
    names=[alias(name='print_function', asname=None),
        alias(name='absolute_import', asname=None),
        alias(name='division', asname=None)],
    level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='config', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m parse_args config
NameFrom--->: ImportFrom
[alias(name='DCN', asname=None)]
ImportFrom(module='network', names=[alias(name='DCN', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m DCN network
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  parse_args config.parse_args
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  DCN network.DCN
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/local_train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/text_classification/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/text_classification/README.md has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/text_classification train.py
[1;34mStart upgrading model PaddleRec/text_classification/train.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='net', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.adaptive_pool2d->paddle.nn.functional.adaptive_pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.adaptive_pool2d->paddle.nn.functional.adaptive_pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/autodl.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm infer.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm/infer.py[0m
NameFrom--->: ImportFrom
module_name---> args
NameFrom--->: ImportFrom
module_name---> criteo_reader
NameFrom--->: ImportFrom
module_name---> network_conf
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='args', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m parse_args args
NameFrom--->: ImportFrom
[alias(name='CriteoDataset', asname=None)]
ImportFrom(module='criteo_reader', names=[alias(name='CriteoDataset', asname=None)], level=0)
module_name---> criteo_reader
[1;33mfunc_name.name, and module name are[0m CriteoDataset criteo_reader
NameFrom--->: ImportFrom
[alias(name='ctr_deepfm_model', asname=None)]
ImportFrom(module='network_conf', names=[alias(name='ctr_deepfm_model', asname=None)], level=0)
module_name---> network_conf
[1;33mfunc_name.name, and module name are[0m ctr_deepfm_model network_conf
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  parse_args args.parse_args
key, v, from_dict:  ctr_deepfm_model network_conf.ctr_deepfm_model
key, v, from_dict:  CriteoDataset criteo_reader.CriteoDataset
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/dnn/download_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/download_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/dnn/feed_generator.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/feed_generator.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/mmoe/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/README.md has been written sucess[0m
[1;32mNo module named 'data_preparation', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/mmoe data_preparation.py
[1;34mStart upgrading model PaddleRec/multi_task/mmoe/data_preparation.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  pd pandas
key, v, from_dict:  * args.*
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/data_preparation.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnext101_wsl.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/youbube_dnn/rec_topk.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/rec_topk.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/youbube_dnn/infer_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/infer_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/tagspace/text2paddle.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/text2paddle.py has been written sucess[0m
[1;32mNo module named 'infer_sample_neg', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec infer_sample_neg.py
[1;34mStart upgrading model PaddleRec/gru4rec/infer_sample_neg.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='net', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/infer_sample_neg.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dcn infer.py
[1;34mStart upgrading model PaddleRec/ctr/dcn/infer.py[0m
NameFrom--->: ImportFrom
module_name---> config
NameFrom--->: ImportFrom
module_name---> reader
NameFrom--->: ImportFrom
module_name---> network
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='parse_args', asname=None)]
ImportFrom(module='config', names=[alias(name='parse_args', asname=None)], level=0)
module_name---> config
[1;33mfunc_name.name, and module name are[0m parse_args config
NameFrom--->: ImportFrom
[alias(name='CriteoDataset', asname=None)]
ImportFrom(module='reader', names=[alias(name='CriteoDataset', asname=None)], level=0)
module_name---> reader
[1;33mfunc_name.name, and module name are[0m CriteoDataset reader
NameFrom--->: ImportFrom
[alias(name='DCN', asname=None)]
ImportFrom(module='network', names=[alias(name='DCN', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m DCN network
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  parse_args config.parse_args
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  DCN network.DCN
key, v, from_dict:  CriteoDataset reader.CriteoDataset
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ssr/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/reader.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ssr infer.py
[1;34mStart upgrading model PaddleRec/ssr/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/infer.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/din/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/din/data/build_dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/data/build_dataset.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/din/data/data_process.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/data/data_process.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/din/data/convert_pd.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/data/convert_pd.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/tools/tools.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/tools/tools.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/dcn/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/README.md has been written sucess[0m
[1;32mNo module named 'network', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dcn network.py
[1;34mStart upgrading model PaddleRec/ctr/dcn/network.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None),
    alias(name='absolute_import', asname=None),
    alias(name='division', asname=None)]
ImportFrom(module='__future__',
    names=[alias(name='print_function', asname=None),
        alias(name='absolute_import', asname=None),
        alias(name='division', asname=None)],
    level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
[1;33mfunc_name.name, and module name are[0m division __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='OrderedDict', asname=None)]
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m OrderedDict collections
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  OrderedDict collections.OrderedDict
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.backward.append_backward->paddle.fluid.backward.append_backward)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.clip.append_gradient_clip_ops->paddle.fluid.clip.append_gradient_clip_ops)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.relu->paddle.fluid.layers.relu)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.square->paddle.fluid.layers.square)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.backward.append_backward->paddle.append_backward)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.resize_nearest->paddle.nn.functional.resize_nearest)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.MSRA->paddle.nn.initializer.MSRA)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.relu->paddle.nn.functional.relu)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/hrnet.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gnn infer.py
[1;34mStart upgrading model PaddleRec/gnn/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='network', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None network
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.load->paddle.fluid.io.load)[0m
[1;33mUpgrade API (paddle.fluid.io.load->paddle.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/infer.py has been written sucess[0m

[1;32mNo module named 'neumf', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf neumf.py
[1;34mStart upgrading model PaddleRec/ncf/neumf.py[0m
NameFrom--->: ImportFrom
module_name---> time
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='time', asname=None)]
ImportFrom(module='time', names=[alias(name='time', asname=None)], level=0)
module_name---> time
[1;33mfunc_name.name, and module name are[0m time time
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  time time.time
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.flatten->paddle.fluid.layers.flatten)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='copy', asname=None)]
NameFrom--->: ImportFrom
[alias(name='conv2d', asname=None),
    alias(name='init_batch_norm_layer', asname=None),
    alias(name='init_fc_layer', asname=None)]
ImportFrom(module='layers',
    names=[alias(name='conv2d', asname=None),
        alias(name='init_batch_norm_layer', asname=None),
        alias(name='init_fc_layer', asname=None)],
    level=1)
module_name---> layers
[1;33mfunc_name.name, and module name are[0m conv2d layers
[1;33mfunc_name.name, and module name are[0m init_batch_norm_layer layers
[1;33mfunc_name.name, and module name are[0m init_fc_layer layers
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None copy
key, v, from_dict:  division __future__.division
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  init_fc_layer layers.init_fc_layer
key, v, from_dict:  conv2d layers.conv2d
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  init_batch_norm_layer layers.init_batch_norm_layer
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.uniform_random_batch_size_like->paddle.fluid.layers.uniform_random_batch_size_like)[0m
[3;32mRestore API full name(fluid.layers.floor->paddle.fluid.layers.floor)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.swish->paddle.fluid.layers.swish)[0m
[3;32mRestore API full name(fluid.layers.swish->paddle.fluid.layers.swish)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.swish->paddle.fluid.layers.swish)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.floor->paddle.floor)[0m
[1;33mUpgrade API (paddle.fluid.layers.swish->paddle.nn.functional.swish)[0m
[1;33mUpgrade API (paddle.fluid.layers.swish->paddle.nn.functional.swish)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.swish->paddle.nn.functional.swish)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/efficientnet.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ncf/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/train_cpu.sh has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf train.py
[1;34mStart upgrading model PaddleRec/ncf/train.py[0m
NameFrom--->: ImportFrom
module_name---> gmf
NameFrom--->: ImportFrom
module_name---> mlp
NameFrom--->: ImportFrom
module_name---> neumf
NameFrom--->: ImportFrom
module_name---> Dataset
NameFrom--->: ImportFrom
module_name---> evaluate
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='GMF', asname=None)]
ImportFrom(module='gmf', names=[alias(name='GMF', asname=None)], level=0)
module_name---> gmf
[1;33mfunc_name.name, and module name are[0m GMF gmf
NameFrom--->: ImportFrom
[alias(name='MLP', asname=None)]
ImportFrom(module='mlp', names=[alias(name='MLP', asname=None)], level=0)
module_name---> mlp
[1;33mfunc_name.name, and module name are[0m MLP mlp
NameFrom--->: ImportFrom
[alias(name='NeuMF', asname=None)]
ImportFrom(module='neumf', names=[alias(name='NeuMF', asname=None)], level=0)
module_name---> neumf
[1;33mfunc_name.name, and module name are[0m NeuMF neumf
NameFrom--->: ImportFrom
[alias(name='Dataset', asname=None)]
ImportFrom(module='Dataset', names=[alias(name='Dataset', asname=None)], level=0)
module_name---> Dataset
[1;33mfunc_name.name, and module name are[0m Dataset Dataset
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='evaluate_model', asname=None)]
ImportFrom(module='evaluate', names=[alias(name='evaluate_model', asname=None)], level=0)
module_name---> evaluate
[1;33mfunc_name.name, and module name are[0m evaluate_model evaluate
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  MLP mlp.MLP
key, v, from_dict:  evaluate_model evaluate.evaluate_model
key, v, from_dict:  Dataset Dataset.Dataset
key, v, from_dict:  GMF gmf.GMF
key, v, from_dict:  NeuMF neumf.NeuMF
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.gru_unit->paddle.fluid.layers.gru_unit)[0m
[3;32mRestore API full name(layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(layers.gather_nd->paddle.fluid.layers.gather_nd)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(layers.create_parameter->paddle.fluid.layers.create_parameter)[0m
[3;32mRestore API full name(layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.layers.gather_nd->paddle.gather_nd)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.contrib.layers.shuffle_batch->paddle.fluid.contrib.layers.shuffle_batch)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.contrib.layers.shuffle_batch->paddle.fluid.contrib.layers.shuffle_batch)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.sigmoid_cross_entropy_with_logits->paddle.fluid.layers.sigmoid_cross_entropy_with_logits)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.l2_normalize->paddle.fluid.layers.l2_normalize)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.topk->paddle.fluid.layers.topk)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.nets.sequence_conv_pool->paddle.fluid.nets.sequence_conv_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/text_classification/net.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ncf/create_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/create_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/dssm/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/train_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/dssm/infer_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/infer_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/dssm/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/train_cpu.sh has been written sucess[0m

[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/local_train.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm_dygraph train.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/train.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> paddle.fluid.dygraph.base
NameFrom--->: ImportFrom
module_name---> network
[1;34mfuture count is 1 [0m
insert paddle into 2
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='to_variable', asname=None)]
ImportFrom(module='paddle.fluid.dygraph.base', names=[alias(name='to_variable', asname=None)], level=0)
module_name---> paddle.fluid.dygraph.base
[1;33mfunc_name.name, and module name are[0m to_variable paddle.fluid.dygraph.base
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='data_reader', asname=None)]
ImportName--->: Import
[alias(name='utility', asname='utils')]
NameFrom--->: ImportFrom
[alias(name='DeepFM', asname=None)]
ImportFrom(module='network', names=[alias(name='DeepFM', asname=None)], level=0)
module_name---> network
[1;33mfunc_name.name, and module name are[0m DeepFM network
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None data_reader
key,value import_dict:  utils utility
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  DeepFM network.DeepFM
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[3;32mRestore API full name(fluid.dygraph.save_dygraph->paddle.fluid.dygraph.save_dygraph)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ncf/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ncf/get_train_data.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/get_train_data.py has been written sucess[0m

[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tdm/tdm_demo/infer_network.py has been written sucess[0m

[1;32mNo module named 'criteo_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm criteo_reader.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm/criteo_reader.py[0m
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='cPickle', asname='pickle')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Counter', asname=None)]
ImportFrom(module='collections', names=[alias(name='Counter', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m Counter collections
ImportName--->: Import
[alias(name='os', asname=None)]
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  pickle cPickle
key,value import_dict:  None os
key, v, from_dict:  Counter collections.Counter
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm/criteo_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/data/preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/data/preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/dnn/local_cluster.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/local_cluster.sh has been written sucess[0m
[1;32mNo module named 'network_conf', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dnn network_conf.py
[1;34mStart upgrading model PaddleRec/ctr/dnn/network_conf.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.embedding->paddle.fluid.layers.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/network_conf.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/dssm/infer_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/infer_cpu.sh has been written sucess[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/reader.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/esmm train.py
[1;34mStart upgrading model PaddleRec/multi_task/esmm/train.py[0m
NameFrom--->: ImportFrom
module_name---> net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ESMM', asname=None)]
ImportFrom(module='net', names=[alias(name='ESMM', asname=None)], level=0)
module_name---> net
[1;33mfunc_name.name, and module name are[0m ESMM net
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None args
key, v, from_dict:  ESMM net.ESMM
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/train.py has been written sucess[0m


[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.square->paddle.square)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/network.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/rerank/listwise/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/args.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/rerank/listwise infer.py
[1;34mStart upgrading model PaddleRec/rerank/listwise/infer.py[0m
NameFrom--->: ImportFrom
module_name---> evaluator
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BiRNN', asname=None)]
ImportFrom(module='evaluator', names=[alias(name='BiRNN', asname=None)], level=0)
module_name---> evaluator
[1;33mfunc_name.name, and module name are[0m BiRNN evaluator
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  BiRNN evaluator.BiRNN
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/infer.py has been written sucess[0m


[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/rerank/listwise/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/rerank/listwise/infer_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/infer_gpu.sh has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/rerank/listwise utils.py
[1;34mStart upgrading model PaddleRec/rerank/listwise/utils.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  None paddle
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.layers.assign->paddle.fluid.layers.assign)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sequence_pad->paddle.fluid.layers.sequence_pad)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.cumsum->paddle.fluid.layers.cumsum)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.assign->paddle.nn.functional.assign)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cumsum->paddle.cumsum)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/utils.py has been written sucess[0m



[1;34mStart upgrading model PaddleRec/multi_task/mmoe/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/args.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/create_data.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/create_data.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/args.py has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/share_bottom utils.py
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/utils.py[0m
NameFrom--->: ImportFrom
module_name---> itertools
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='io', asname=None)]
NameFrom--->: ImportFrom
[alias(name='islice', asname=None)]
ImportFrom(module='itertools', names=[alias(name='islice', asname=None)], level=0)
module_name---> itertools
[1;33mfunc_name.name, and module name are[0m islice itertools
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key,value import_dict:  pd pandas
key, v, from_dict:  islice itertools.islice
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ssr/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ssr/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/__init__.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ncf/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/train_gpu.sh has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf utils.py
[1;34mStart upgrading model PaddleRec/ncf/utils.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None os
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/utils.py has been written sucess[0m


[1;33mfunc_name.name, and module name are[0m fleet paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler
NameFrom--->: ImportFrom
[alias(name='DistributeTranspilerConfig', asname=None)]
ImportFrom(module='paddle.fluid.transpiler.distribute_transpiler',
    names=[alias(name='DistributeTranspilerConfig', asname=None)],
    level=0)
module_name---> paddle.fluid.transpiler.distribute_transpiler
[1;33mfunc_name.name, and module name are[0m DistributeTranspilerConfig paddle.fluid.transpiler.distribute_transpiler
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key,value import_dict:  role_maker paddle.fluid.incubate.fleet.base.role_maker
key, v, from_dict:  CTR network_conf.CTR
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  DistributeTranspilerConfig paddle.fluid.transpiler.distribute_transpiler.DistributeTranspilerConfig
key, v, from_dict:  fleet paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[3;32mRestore API full name(fleet.split_files->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.split_files)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[3;32mRestore API full name(role_maker.PaddleCloudRoleMaker->paddle.fluid.incubate.fleet.base.role_maker.PaddleCloudRoleMaker)[0m
[3;32mRestore API full name(fleet.init->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init)[0m
[3;32mRestore API full name(DistributeTranspilerConfig->paddle.fluid.transpiler.distribute_transpiler.DistributeTranspilerConfig)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fleet.distributed_optimizer->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.distributed_optimizer)[0m
[3;32mRestore API full name(fleet.is_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_server)[0m
[3;32mRestore API full name(fleet.init_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init_server)[0m
[3;32mRestore API full name(fleet.run_server->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.run_server)[0m
[3;32mRestore API full name(fleet.is_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_worker)[0m
[3;32mRestore API full name(fleet.init_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.init_worker)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fleet.is_first_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.is_first_worker)[0m
[3;32mRestore API full name(fleet.save_persistables->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.save_persistables)[0m
[3;32mRestore API full name(fleet.stop_worker->paddle.fluid.incubate.fleet.parameter_server.distribute_transpiler.fleet.stop_worker)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dnn/train.py has been written sucess[0m


[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/text_classification/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/dssm/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/README.md has been written sucess[0m
[1;34mStart upgrading model PaddleRec/dssm/args.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/args.py has been written sucess[0m

[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/local_train.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/din infer.py
[1;34mStart upgrading model PaddleRec/ctr/din/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='reader', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/infer.py has been written sucess[0m

[1;32mNo module named 'mmoe_train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/mmoe mmoe_train.py
[1;34mStart upgrading model PaddleRec/multi_task/mmoe/mmoe_train.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='datetime', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key,value import_dict:  pd pandas
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/mmoe_train.py has been written sucess[0m


[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tagspace infer.py
[1;34mStart upgrading model PaddleRec/tagspace/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/infer.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/din train.py
[1;34mStart upgrading model PaddleRec/ctr/din/train.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='network', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None random
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/din/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ncf/README.md[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/README.md has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf infer.py
[1;34mStart upgrading model PaddleRec/ncf/infer.py[0m
NameFrom--->: ImportFrom
module_name---> gmf
NameFrom--->: ImportFrom
module_name---> mlp
NameFrom--->: ImportFrom
module_name---> neumf
NameFrom--->: ImportFrom
module_name---> Dataset
NameFrom--->: ImportFrom
module_name---> evaluate
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='GMF', asname=None)]
ImportFrom(module='gmf', names=[alias(name='GMF', asname=None)], level=0)
module_name---> gmf
[1;33mfunc_name.name, and module name are[0m GMF gmf
NameFrom--->: ImportFrom
[alias(name='MLP', asname=None)]
ImportFrom(module='mlp', names=[alias(name='MLP', asname=None)], level=0)
module_name---> mlp
[1;33mfunc_name.name, and module name are[0m MLP mlp
NameFrom--->: ImportFrom
[alias(name='NeuMF', asname=None)]
ImportFrom(module='neumf', names=[alias(name='NeuMF', asname=None)], level=0)
module_name---> neumf
[1;33mfunc_name.name, and module name are[0m NeuMF neumf
NameFrom--->: ImportFrom
[alias(name='Dataset', asname=None)]
ImportFrom(module='Dataset', names=[alias(name='Dataset', asname=None)], level=0)
module_name---> Dataset
[1;33mfunc_name.name, and module name are[0m Dataset Dataset
NameFrom--->: ImportFrom
[alias(name='evaluate_model', asname=None)]
ImportFrom(module='evaluate', names=[alias(name='evaluate_model', asname=None)], level=0)
module_name---> evaluate
[1;33mfunc_name.name, and module name are[0m evaluate_model evaluate
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  MLP mlp.MLP
key, v, from_dict:  evaluate_model evaluate.evaluate_model
key, v, from_dict:  Dataset Dataset.Dataset
key, v, from_dict:  GMF gmf.GMF
key, v, from_dict:  NeuMF neumf.NeuMF
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/infer.py has been written sucess[0m


ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None args
[3;32mRestore API full name(fluid.initializer.NormalInitializer->paddle.fluid.initializer.NormalInitializer)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/net.py has been written sucess[0m

[1;32mNo module named 'gmf', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf gmf.py
[1;34mStart upgrading model PaddleRec/ncf/gmf.py[0m
NameFrom--->: ImportFrom
module_name---> time
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='time', asname=None)]
ImportFrom(module='time', names=[alias(name='time', asname=None)], level=0)
module_name---> time
[1;33mfunc_name.name, and module name are[0m time time
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  time time.time
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.elementwise_mul->paddle.fluid.layers.elementwise_mul)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/gmf.py has been written sucess[0m

 Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='defaultdict', asname=None)]
ImportFrom(module='collections', names=[alias(name='defaultdict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m defaultdict collections
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  defaultdict collections.defaultdict
[3;32mRestore API full name(fluid.DatasetFactory->paddle.fluid.DatasetFactory)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/utils.py has been written sucess[0m

[1;32mNo module named 'ml', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf mlp.py
[1;34mStart upgrading model PaddleRec/ncf/mlp.py[0m
NameFrom--->: ImportFrom
module_name---> time
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
NameFrom--->: ImportFrom
[alias(name='time', asname=None)]
ImportFrom(module='time', names=[alias(name='time', asname=None)], level=0)
module_name---> time
[1;33mfunc_name.name, and module name are[0m time time
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None math
key, v, from_dict:  time time.time
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.initializer.Normal->paddle.fluid.initializer.Normal)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.initializer.MSRAInitializer->paddle.fluid.initializer.MSRAInitializer)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/mlp.py has been written sucess[0m


[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/gnn/data/preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/data/preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gnn/data/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/data/download.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/rerank/listwise/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/train_gpu.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/rerank/listwise/train_cpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/train_cpu.sh has been written sucess[0m
[1;32mNo module named 'evaluator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/rerank/listwise evaluator.py
[1;34mStart upgrading model PaddleRec/rerank/listwise/evaluator.py[0m
NameFrom--->: ImportFrom
module_name---> paddle
[1;34mfuture count is 0 [0m
insert paddle into 1
NameFrom--->: ImportFrom
[alias(name='fluid', asname=None)]
ImportFrom(module='paddle', names=[alias(name='fluid', asname=None)], level=0)
module_name---> paddle
[1;33mfunc_name.name, and module name are[0m fluid paddle
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
key,value import_dict:  np numpy
key,value import_dict:  None utils
key, v, from_dict:  fluid paddle.fluid
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.initializer.TruncatedNormal->paddle.fluid.initializer.TruncatedNormal)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByValue->paddle.fluid.clip.GradientClipByValue)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.regularizer.L2Decay->paddle.fluid.regularizer.L2Decay)[0m
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.Constant->paddle.fluid.initializer.Constant)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.sequence_unpad->paddle.fluid.layers.sequence_unpad)[0m
[3;32mRestore API full name(fluid.layers.cross_entropy->paddle.fluid.layers.cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByValue->paddle.nn.GradientClipByValue)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/evaluator.py has been written sucess[0m


[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.squeeze->paddle.fluid.layers.squeeze)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.bpr_loss->paddle.nn.functional.bpr_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/net.py has been written sucess[0m

 utils.py
[1;34mStart upgrading model PaddleRec/ssr/utils.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='reader', asname='reader')]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
key,value import_dict:  reader reader
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/utils.py has been written sucess[0m


[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/network.py has been written sucess[0m


[1;33mUpgrade API (paddle.fluid.initializer.Normal->paddle.nn.initializer.Normal)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.flatten->paddle.flatten)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.initializer.TruncatedNormal->paddle.nn.initializer.TruncatedNormal)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/neumf.py has been written sucess[0m

 Import
[alias(name='functools', asname=None)]
NameFrom--->: ImportFrom
[alias(name='FastImageNet', asname=None), alias(name='lr_decay', asname=None)]
ImportFrom(module='models.fast_imagenet',
    names=[alias(name='FastImageNet', asname=None), alias(name='lr_decay', asname=None)],
    level=0)
module_name---> models.fast_imagenet
[1;33mfunc_name.name, and module name are[0m FastImageNet models.fast_imagenet
[1;33mfunc_name.name, and module name are[0m lr_decay models.fast_imagenet
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  distribute_transpiler paddle.fluid.transpiler.distribute_transpiler
key,value import_dict:  None utils
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  profiler paddle.fluid.profiler
key, v, from_dict:  FastImageNet models.fast_imagenet.FastImageNet
key, v, from_dict:  lr_decay models.fast_imagenet.lr_decay
key, v, from_dict:  add_arguments utility.add_arguments
key, v, from_dict:  print_arguments utility.print_arguments
[3;32mRestore API full name(fluid.core.get_cuda_device_count->paddle.fluid.core.get_cuda_device_count)[0m
[3;32mRestore API full name(fluid.metrics.Accuracy->paddle.fluid.metrics.Accuracy)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.layers.py_reader->paddle.fluid.layers.py_reader)[0m
[3;32mRestore API full name(fluid.layers.read_file->paddle.fluid.layers.read_file)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.create_global_var->paddle.fluid.layers.create_global_var)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_div->paddle.fluid.layers.elementwise_div)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(fluid.optimizer.Momentum->paddle.fluid.optimizer.Momentum)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.ExecutionStrategy->paddle.fluid.ExecutionStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.BuildStrategy->paddle.fluid.BuildStrategy)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.DataFeeder->paddle.fluid.DataFeeder)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_div)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Accuracy->paddle.metric.Accuracy)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_div->paddle.tensor.div)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Momentum->paddle.optimizer.Momentum)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/fast_imagenet/train.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gru4rec train.py
[1;34mStart upgrading model PaddleRec/gru4rec/train.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='net', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None net
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/train.py has been written sucess[0m


NameFrom--->: ImportFrom
module_name---> net
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ESMM', asname=None)]
ImportFrom(module='net', names=[alias(name='ESMM', asname=None)], level=0)
module_name---> net
[1;33mfunc_name.name, and module name are[0m ESMM net
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  ESMM net.ESMM
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.Program->paddle.fluid.framework.Program)[0m
[3;32mRestore API full name(fluid.framework.program_guard->paddle.fluid.framework.program_guard)[0m
[3;32mRestore API full name(fluid.unique_name.guard->paddle.fluid.unique_name.guard)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.Program->paddle.Program)[0m
[1;33mUpgrade API (paddle.fluid.framework.program_guard->paddle.program_guard)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/infer.py has been written sucess[0m

[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/dssm infer.py
[1;34mStart upgrading model PaddleRec/dssm/infer.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/infer.py has been written sucess[0m


[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='YoutubeDNN', asname=None)]
ImportFrom(module='youtubednn', names=[alias(name='YoutubeDNN', asname=None)], level=0)
module_name---> youtubednn
[1;33mfunc_name.name, and module name are[0m YoutubeDNN youtubednn
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key,value import_dict:  pd pandas
key, v, from_dict:  YoutubeDNN youtubednn.YoutubeDNN
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/youbube_dnn/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ctr/dcn/dist_data/dist_preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/dist_data/dist_preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/dcn/data/preprocess.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/data/preprocess.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/ctr/dcn/data/download.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/data/download.py has been written sucess[0m
[1;32mNo module named 'data_reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/deepfm_dygraph data_reader.py
[1;34mStart upgrading model PaddleRec/ctr/deepfm_dygraph/data_reader.py[0m
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
NameFrom--->: ImportFrom
module_name---> __future__
[1;34mfuture count is 3 [0m
NameFrom--->: ImportFrom
[alias(name='absolute_import', asname=None)]
ImportFrom(module='__future__', names=[alias(name='absolute_import', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m absolute_import __future__
NameFrom--->: ImportFrom
[alias(name='division', asname=None)]
ImportFrom(module='__future__', names=[alias(name='division', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m division __future__
NameFrom--->: ImportFrom
[alias(name='print_function', asname=None)]
ImportFrom(module='__future__', names=[alias(name='print_function', asname=None)], level=0)
module_name---> __future__
[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='pickle', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/data_reader.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/gnn/reader.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/reader.py has been written sucess[0m
[1;34mStart upgrading model PaddleRec/gnn/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/__init__.py has been written sucess[0m
[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/gnn train.py
[1;34mStart upgrading model PaddleRec/gnn/train.py[0m
NameFrom--->: ImportFrom
module_name---> functools
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='partial', asname=None)]
ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0)
module_name---> functools
[1;33mfunc_name.name, and module name are[0m partial functools
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='network', asname=None)]
ImportName--->: Import
[alias(name='reader', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None reader
key, v, from_dict:  partial functools.partial
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.layers.exponential_decay->paddle.fluid.layers.exponential_decay)[0m
[3;32mRestore API full name(fluid.regularizer.L2DecayRegularizer->paddle.fluid.regularizer.L2DecayRegularizer)[0m
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.ParallelExecutor->paddle.fluid.ParallelExecutor)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.layers.exponential_decay->paddle.nn.functional.exponential_decay)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/train.py has been written sucess[0m


[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdagradOptimizer->paddle.optimizer.AdagradOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/wide_deep/train.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/mmoe/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/mmoe/train_gpu.sh has been written sucess[0m
[1;32mNo module named 'data_preparation', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/share_bottom data_preparation.py
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/data_preparation.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='pandas', asname='pd')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key,value import_dict:  pd pandas
key, v, from_dict:  * args.*
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/data_preparation.py has been written sucess[0m

[1;32mNo module named 'nets', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ssr nets.py
[1;34mStart upgrading model PaddleRec/ssr/nets.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.layers.nn', asname='nn')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.tensor', asname='tensor')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.control_flow', asname='cf')]
ImportName--->: Import
[alias(name='paddle.fluid.layers.io', asname='io')]
key,value import_dict:  cf paddle.fluid.layers.control_flow
key,value import_dict:  None paddle
key,value import_dict:  tensor paddle.fluid.layers.tensor
key,value import_dict:  io paddle.fluid.layers.io
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  nn paddle.fluid.layers.nn
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.dynamic_gru->paddle.fluid.layers.dynamic_gru)[0m
[3;32mRestore API full name(fluid.layers.sequence_pool->paddle.fluid.layers.sequence_pool)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_sub->paddle.fluid.layers.elementwise_sub)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.shape->paddle.fluid.layers.shape)[0m
[3;32mRestore API full name(fluid.layers.fill_constant->paddle.fluid.layers.fill_constant)[0m
[3;32mRestore API full name(fluid.layers.elementwise_max->paddle.fluid.layers.elementwise_max)[0m
[3;32mRestore API full name(cf.less_than->paddle.fluid.layers.control_flow.less_than)[0m
[3;32mRestore API full name(tensor.cast->paddle.fluid.layers.tensor.cast)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_max->paddle.elementwise_max)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/nets.py has been written sucess[0m


[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/train.py has been written sucess[0m

 None data_reader
key,value import_dict:  utils utility
key, v, from_dict:  to_variable paddle.fluid.dygraph.base.to_variable
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  DeepFM network.DeepFM
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.dygraph.load_dygraph->paddle.fluid.dygraph.load_dygraph)[0m
[3;32mRestore API full name(fluid.metrics.Auc->paddle.fluid.metrics.Auc)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[1;33mUpgrade API (paddle.fluid.metrics.Auc->paddle.metric.Auc)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/deepfm_dygraph/infer.py has been written sucess[0m

[1;32mNo module named 'share_bottom', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/share_bottom share_bottom.py
[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/share_bottom.py[0m
NameFrom--->: ImportFrom
module_name---> args
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='datetime', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
NameFrom--->: ImportFrom
[alias(name='*', asname=None)]
ImportFrom(module='args', names=[alias(name='*', asname=None)], level=0)
module_name---> args
[1;33mfunc_name.name, and module name are[0m * args
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None logging
key, v, from_dict:  * args.*
[3;32mRestore API full name(fluid.global_scope->paddle.fluid.global_scope)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.clip->paddle.fluid.layers.clip)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.optimizer.AdamOptimizer->paddle.fluid.optimizer.AdamOptimizer)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save->paddle.fluid.io.save)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.clip->paddle.nn.clip)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.cross_entropy->paddle.nn.functional.cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdamOptimizer->paddle.optimizer.AdamOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.io.save->paddle.io.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/share_bottom.py has been written sucess[0m


[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gnn/network.py has been written sucess[0m


[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/README.md has been written sucess[0m
[1;32mNo module named 'utils', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/tagspace utils.py
[1;34mStart upgrading model PaddleRec/tagspace/utils.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='re', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='collections', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='csv', asname=None)]
ImportName--->: Import
[alias(name='io', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None io
[3;32mRestore API full name(fluid.LoDTensor->paddle.fluid.LoDTensor)[0m
[3;32mRestore API full name(fluid.require_version->paddle.fluid.require_version)[0m
[3;32mRestore API full name(fluid.io.shuffle->paddle.fluid.io.shuffle)[0m
[1;33mUpgrade API (paddle.fluid.io.shuffle->paddle.shuffle)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/tagspace/utils.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/multi_task/share_bottom/train_gpu.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/share_bottom/train_gpu.sh has been written sucess[0m
[1;32mNo module named 'dataset_generator', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/multi_task/esmm dataset_generator.py
[1;34mStart upgrading model PaddleRec/multi_task/esmm/dataset_generator.py[0m
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='defaultdict', asname=None)]
ImportFrom(module='collections', names=[alias(name='defaultdict', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m defaultdict collections
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  defaultdict collections.defaultdict
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multi_task/esmm/dataset_generator.py has been written sucess[0m

[1;32mNo module named 'train', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/rerank/listwise train.py
[1;34mStart upgrading model PaddleRec/rerank/listwise/train.py[0m
NameFrom--->: ImportFrom
module_name---> evaluator
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='random', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
NameFrom--->: ImportFrom
[alias(name='BiRNN', asname=None)]
ImportFrom(module='evaluator', names=[alias(name='BiRNN', asname=None)], level=0)
module_name---> evaluator
[1;33mfunc_name.name, and module name are[0m BiRNN evaluator
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  BiRNN evaluator.BiRNN
[3;32mRestore API full name(fluid.optimizer.Adam->paddle.fluid.optimizer.Adam)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adam->paddle.optimizer.Adam)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/rerank/listwise/train.py has been written sucess[0m


ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='nets', asname='net')]
key,value import_dict:  net nets
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.embedding->paddle.fluid.embedding)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.expand->paddle.fluid.layers.expand)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.expand->paddle.expand)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/infer.py has been written sucess[0m


[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.squeeze->paddle.tensor.squeeze)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_mul->paddle.elementwise_mul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.fill_constant->paddle.tensor.fill_constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.shape->paddle.shape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid_cross_entropy_with_logits->paddle.nn.functional.sigmoid_cross_entropy_with_logits)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_sub->paddle.elementwise_sub)[0m
[1;33mUpgrade API (paddle.fluid.layers.l2_normalize->paddle.nn.functional.l2_normalize)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.topk->paddle.topk)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/net.py has been written sucess[0m


[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.transpose->paddle.fluid.layers.transpose)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.layers.sigmoid->paddle.fluid.layers.sigmoid)[0m
[3;32mRestore API full name(fluid.layers.log_loss->paddle.fluid.layers.log_loss)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.cast->paddle.fluid.layers.cast)[0m
[3;32mRestore API full name(fluid.layers.auc->paddle.fluid.layers.auc)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.log_loss->paddle.nn.functional.log_loss)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.cast->paddle.cast)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/xdeepfm/network_conf.py has been written sucess[0m

[1;34mStart upgrading model PaddleRec/ncf/Dataset.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/Dataset.py has been written sucess[0m
[1;32mNo module named 'dssm', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/dssm dssm.py
[1;34mStart upgrading model PaddleRec/dssm/dssm.py[0m
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
[3;32mRestore API full name(fluid.initializer.Xavier->paddle.fluid.initializer.Xavier)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.data->paddle.fluid.data)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.cos_sim->paddle.fluid.layers.cos_sim)[0m
[3;32mRestore API full name(fluid.layers.concat->paddle.fluid.layers.concat)[0m
[3;32mRestore API full name(fluid.layers.softmax->paddle.fluid.layers.softmax)[0m
[3;32mRestore API full name(fluid.layers.slice->paddle.fluid.layers.slice)[0m
[3;32mRestore API full name(fluid.layers.log->paddle.fluid.layers.log)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(fluid.layers.mean->paddle.fluid.layers.mean)[0m
[3;32mRestore API full name(fluid.optimizer.SGD->paddle.fluid.optimizer.SGD)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.io.save_inference_model->paddle.fluid.io.save_inference_model)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Xavier->paddle.nn.initializer.Xavier)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.data->paddle.nn.data)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax->paddle.nn.functional.softmax)[0m
[1;33mUpgrade API (paddle.fluid.layers.slice->paddle.slice)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.layers.log->paddle.log)[0m
[1;33mUpgrade API (paddle.fluid.layers.mean->paddle.mean)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.SGD->paddle.optimizer.SGD)[0m
[1;33mUpgrade API (paddle.fluid.io.save_inference_model->paddle.io.save_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/dssm/dssm.py has been written sucess[0m


[1;32mNo module named 'reader', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ctr/dcn reader.py
[1;34mStart upgrading model PaddleRec/ctr/dcn/reader.py[0m
NameFrom--->: ImportFrom
module_name---> collections
[1;34mfuture count is 0 [0m
insert paddle into 1
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid.incubate.data_generator', asname='dg')]
ImportName--->: Import
[alias(name='pickle', asname=None)]
NameFrom--->: ImportFrom
[alias(name='Counter', asname=None)]
ImportFrom(module='collections', names=[alias(name='Counter', asname=None)], level=0)
module_name---> collections
[1;33mfunc_name.name, and module name are[0m Counter collections
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
key,value import_dict:  dg paddle.fluid.incubate.data_generator
key,value import_dict:  None paddle
key, v, from_dict:  Counter collections.Counter
[1;33mUpgrade API (fluid.io.batch->paddle.io.batch)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ctr/dcn/reader.py has been written sucess[0m

[1;32mNo module named 'evaluate', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ncf evaluate.py
[1;34mStart upgrading model PaddleRec/ncf/evaluate.py[0m
NameFrom--->: ImportFrom
module_name---> time
NameFrom--->: ImportFrom
module_name---> gmf
NameFrom--->: ImportFrom
module_name---> mlp
NameFrom--->: ImportFrom
module_name---> neumf
NameFrom--->: ImportFrom
module_name---> Dataset
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='heapq', asname=None)]
ImportName--->: Import
[alias(name='multiprocessing', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='time', asname=None)]
ImportFrom(module='time', names=[alias(name='time', asname=None)], level=0)
module_name---> time
[1;33mfunc_name.name, and module name are[0m time time
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='os', asname=None)]
NameFrom--->: ImportFrom
[alias(name='GMF', asname=None)]
ImportFrom(module='gmf', names=[alias(name='GMF', asname=None)], level=0)
module_name---> gmf
[1;33mfunc_name.name, and module name are[0m GMF gmf
NameFrom--->: ImportFrom
[alias(name='MLP', asname=None)]
ImportFrom(module='mlp', names=[alias(name='MLP', asname=None)], level=0)
module_name---> mlp
[1;33mfunc_name.name, and module name are[0m MLP mlp
NameFrom--->: ImportFrom
[alias(name='NeuMF', asname=None)]
ImportFrom(module='neumf', names=[alias(name='NeuMF', asname=None)], level=0)
module_name---> neumf
[1;33mfunc_name.name, and module name are[0m NeuMF neumf
NameFrom--->: ImportFrom
[alias(name='Dataset', asname=None)]
ImportFrom(module='Dataset', names=[alias(name='Dataset', asname=None)], level=0)
module_name---> Dataset
[1;33mfunc_name.name, and module name are[0m Dataset Dataset
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='args', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None time
key, v, from_dict:  MLP mlp.MLP
key, v, from_dict:  time time.time
key, v, from_dict:  Dataset Dataset.Dataset
key, v, from_dict:  GMF gmf.GMF
key, v, from_dict:  NeuMF neumf.NeuMF
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.io.batch->paddle.fluid.io.batch)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.load_inference_model->paddle.fluid.io.load_inference_model)[0m
[1;33mUpgrade API (paddle.fluid.io.batch->paddle.io.batch)[0m
[1;33mUpgrade API (paddle.fluid.io.load_inference_model->paddle.io.load_inference_model)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ncf/evaluate.py has been written sucess[0m


[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(Embedding->paddle.fluid.dygraph.nn.Embedding)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.ParamAttr->paddle.fluid.ParamAttr)[0m
[3;32mRestore API full name(fluid.initializer.UniformInitializer->paddle.fluid.initializer.UniformInitializer)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.dropout->paddle.fluid.layers.dropout)[0m
[3;32mRestore API full name(fluid.layers.matmul->paddle.fluid.layers.matmul)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[3;32mRestore API full name(fluid.layers.softmax_with_cross_entropy->paddle.fluid.layers.softmax_with_cross_entropy)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.accuracy->paddle.fluid.layers.accuracy)[0m
[3;32mRestore API full name(fluid.layers.reshape->paddle.fluid.layers.reshape)[0m
[3;32mRestore API full name(fluid.layers.reduce_mean->paddle.fluid.layers.reduce_mean)[0m
[3;32mRestore API full name(fluid.layers.reduce_sum->paddle.fluid.layers.reduce_sum)[0m
[3;32mRestore API full name(core.CUDAPlace->paddle.fluid.core.CUDAPlace)[0m
[3;32mRestore API full name(fluid.dygraph.guard->paddle.fluid.dygraph.guard)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.load_dygraph->paddle.fluid.load_dygraph)[0m
[3;32mRestore API full name(fluid.clip.GradientClipByGlobalNorm->paddle.fluid.clip.GradientClipByGlobalNorm)[0m
[3;32mRestore API full name(fluid.layers.piecewise_decay->paddle.fluid.layers.piecewise_decay)[0m
[3;32mRestore API full name(AdagradOptimizer->paddle.fluid.optimizer.AdagradOptimizer)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(to_variable->paddle.fluid.dygraph.base.to_variable)[0m
[3;32mRestore API full name(fluid.save_dygraph->paddle.fluid.save_dygraph)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.tanh)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (x->input) in API (paddle.fluid.layers.sigmoid)[0m
[1;33mRename Params (dim->axis) in API (paddle.fluid.layers.reduce_sum)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.tanh)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (inplace) to API (paddle.fluid.layers.sigmoid)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (name) from API (paddle.fluid.layers.sigmoid)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Constant->paddle.nn.initializer.Constant)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.split->paddle.tensor.split)[0m
[1;33mUpgrade API (paddle.fluid.layers.tanh->paddle.tensor.tanh)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.sigmoid->paddle.nn.Sigmoid)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.concat->paddle.concat)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.transpose->paddle.transpose)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.dropout->paddle.nn.functional.dropout)[0m
[1;33mUpgrade API (paddle.fluid.layers.matmul->paddle.tensor.matmul)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;33mUpgrade API (paddle.fluid.layers.softmax_with_cross_entropy->paddle.nn.functional.softmax_with_cross_entropy)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reshape->paddle.reshape)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_mean->paddle.reduce_mean)[0m
[1;33mUpgrade API (paddle.fluid.layers.reduce_sum->paddle.tensor.sum)[0m
[1;33mUpgrade API (paddle.fluid.core.CUDAPlace->paddle.CUDAPlace)[0m
[1;33mUpgrade API (paddle.fluid.clip.GradientClipByGlobalNorm->paddle.nn.GradientClipByGlobalNorm)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.AdagradOptimizer->paddle.optimizer.AdagradOptimizer)[0m
[1;33mUpgrade API (paddle.fluid.layers.piecewise_decay->paddle.nn.functional.piecewise_decay)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;33mUpgrade API (paddle.fluid.dygraph.base.to_variable->paddle.imperative.to_variable)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/gru4rec/dy_graph/gru4rec_dy.py has been written sucess[0m


-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/ssr train.py
[1;34mStart upgrading model PaddleRec/ssr/train.py[0m
NameFrom--->: ImportFrom
module_name---> nets
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='os', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='logging', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
NameFrom--->: ImportFrom
[alias(name='SequenceSemanticRetrieval', asname=None)]
ImportFrom(module='nets', names=[alias(name='SequenceSemanticRetrieval', asname=None)], level=0)
module_name---> nets
[1;33mfunc_name.name, and module name are[0m SequenceSemanticRetrieval nets
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
key, v, from_dict:  SequenceSemanticRetrieval nets.SequenceSemanticRetrieval
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.optimizer.Adagrad->paddle.fluid.optimizer.Adagrad)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.default_startup_program->paddle.fluid.default_startup_program)[0m
[3;32mRestore API full name(fluid.io.DataLoader.from_generator->paddle.fluid.io.DataLoader.from_generator)[0m
[3;32mRestore API full name(fluid.default_main_program->paddle.fluid.default_main_program)[0m
[3;32mRestore API full name(fluid.save->paddle.fluid.save)[0m
[1;33mUpgrade API (paddle.fluid.optimizer.Adagrad->paddle.optimizer.Adagrad)[0m
[1;33mUpgrade API (paddle.fluid.io.DataLoader->paddle.io.DataLoader)[0m
[1;33mUpgrade API (paddle.fluid.save->paddle.save)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/ssr/train.py has been written sucess[0m


[1;33mfunc_name.name, and module name are[0m print_function __future__
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
NameFrom--->: ImportFrom
[alias(name='ParamAttr', asname=None)]
ImportFrom(module='paddle.fluid.param_attr', names=[alias(name='ParamAttr', asname=None)], level=0)
module_name---> paddle.fluid.param_attr
[1;33mfunc_name.name, and module name are[0m ParamAttr paddle.fluid.param_attr
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None paddle
key, v, from_dict:  print_function __future__.print_function
key, v, from_dict:  division __future__.division
key, v, from_dict:  absolute_import __future__.absolute_import
key, v, from_dict:  ParamAttr paddle.fluid.param_attr.ParamAttr
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.layers.pool2d->paddle.fluid.layers.pool2d)[0m
[3;32mRestore API full name(fluid.initializer.Uniform->paddle.fluid.initializer.Uniform)[0m
[3;32mRestore API full name(fluid.param_attr.ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.fc->paddle.fluid.layers.fc)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.conv2d->paddle.fluid.layers.conv2d)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(ParamAttr->paddle.fluid.param_attr.ParamAttr)[0m
[3;32mRestore API full name(fluid.layers.batch_norm->paddle.fluid.layers.batch_norm)[0m
[3;32mRestore API full name(fluid.layers.elementwise_add->paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (alpha) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mAdd Params (out) to API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (act) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mDelete Params (axis) from API (paddle.fluid.layers.elementwise_add)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.layers.pool2d->paddle.nn.functional.pool2d)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.initializer.Uniform->paddle.nn.initializer.Uniform)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.param_attr.ParamAttr->paddle.ParamAttr)[0m
[1;33mUpgrade API (paddle.fluid.layers.elementwise_add->paddle.tensor.add)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/models/resnet_vc.py has been written sucess[0m

[1;34mStart upgrading model PaddleCV/image_classification/scripts/train/DenseNet121.sh[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleCV/image_classification/scripts/train/DenseNet121.sh has been written sucess[0m
[1;34mStart upgrading model PaddleRec/multiview_simnet/__init__.py[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/multiview_simnet/__init__.py has been written sucess[0m
[1;32mNo module named 'infer', so we use another strategy to dynamically import module[0m
-->module name and package name: /paddle_joe_upgrade_tool_test/paddle_models/models/PaddleRec/word2vec infer.py
[1;34mStart upgrading model PaddleRec/word2vec/infer.py[0m
[1;34mfuture count is 0 [0m
ImportName--->: Import
[alias(name='argparse', asname=None)]
ImportName--->: Import
[alias(name='sys', asname=None)]
ImportName--->: Import
[alias(name='time', asname=None)]
ImportName--->: Import
[alias(name='math', asname=None)]
ImportName--->: Import
[alias(name='unittest', asname=None)]
ImportName--->: Import
[alias(name='contextlib', asname=None)]
ImportName--->: Import
[alias(name='numpy', asname='np')]
ImportName--->: Import
[alias(name='six', asname=None)]
ImportName--->: Import
[alias(name='paddle.fluid', asname='fluid')]
ImportName--->: Import
[alias(name='paddle', asname=None)]
ImportName--->: Import
[alias(name='net', asname=None)]
ImportName--->: Import
[alias(name='utils', asname=None)]
key,value import_dict:  np numpy
key,value import_dict:  fluid paddle.fluid
key,value import_dict:  None utils
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[3;32mRestore API full name(fluid.CUDAPlace->paddle.fluid.CUDAPlace)[0m
[3;32mRestore API full name(fluid.CPUPlace->paddle.fluid.CPUPlace)[0m
[3;32mRestore API full name(fluid.Executor->paddle.fluid.Executor)[0m
[3;32mRestore API full name(fluid.Scope->paddle.fluid.Scope)[0m
[3;32mRestore API full name(fluid.scope_guard->paddle.fluid.scope_guard)[0m
[3;32mRestore API full name(fluid.Program->paddle.fluid.Program)[0m
[3;32mRestore API full name(fluid.program_guard->paddle.fluid.program_guard)[0m
[3;32mRestore API full name(fluid.load->paddle.fluid.load)[0m
[1;34mUpgrade Complete. The updated file /paddle_joe_upgrade_tool_test/paddle_models/transfered_models/PaddleRec/word2vec/infer.py has been written sucess[0m

[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;31m parallel error with future exception: 'NoneType' object has no attribute 'loader', while process PaddleRec/dssm/infer_cpu.sh [0m
[1;33m all done.[0m
Time taken to execute commands is 5 seconds.
